#define FONT_SIZE 10

   /**** Background ***
    * 
    *  must provide:
    *   - elm.swallow.background
    *   - elm.swallow.content
    */
      group { name: "elm/bg/base/default";
      parts {
	 part { name: "base";
	    type: RECT;
	    mouse_events:  0;
	    description { state: "default" 0.0;}
	 }
	 part { name: "elm.swallow.background";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	    }
	 }
	 part { name: "elm.swallow.content";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1.offset:  4 4;
	       rel2.offset: -5 -5;
	    }
	 }
      }
   }
   /**** Label ***
    * 
    *  must provide:
    *   - elm.text
    */
      group { name: "elm/label/base/default";
      styles
	{
	   style { name: "label_textblock_style";
	      base: "font=Sans font_size="FONT_SIZE" align=left color=#888 wrap=word";
	      tag:  "br" "\n";
	      tag:  "hilight" "+ font=Sans:style=Bold";
	      tag:  "b" "+ font=Sans:style=Bold";
	      tag:  "tab" "\t";
	   }
	}
      parts {
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 0;
	    scale: 1;
	    description { state: "default" 0.0;
	       text {
		  style: "label_textblock_style";
		  min: 1 1;
	       }
	    }
	 }
      }
   }
   /**** Button ***
    * 
    *  must provide:
    *   - elm.swallow.content
    *   - elm.text
    * 
    *  must emit:
    *   - "elm,action,click" ""
    * 
    *  should receive:
    *   - "elm,state,text,visible" "elm"
    *   - "elm,state,text,hidden" "elm"
    *   - "elm,state,icon,visible" "elm"
    *   - "elm,state,icon,hidden" "elm"
    * 
    *  styles:
    *   -hoversel_vertical   //TODO more styles
    */
   group { name: "elm/button/base/default";
      parts {      
	 part { name: "button_image";
	    type: RECT;
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 200 200 0 200;
	    }
	    description { state: "clicked" 0.0;
	       inherit: "default" 0.0;
	    }
	 }
	 part { name: "elm.swallow.content";
	    type: SWALLOW;
	    description { state: "default" 0.0;
               fixed: 1 0;
	       visible: 0;
	       align: 0.0 0.5;
	       rel1.offset: 4 4;
	       rel2.offset: 3 -5;
	       rel2.relative: 0.0 1.0;
	    }
	    description { state: "visible" 0.0;
	       inherit: "default" 0.0;
               fixed: 1 0;
	       visible: 1;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel2.offset: 4 -5;
	    }
	    description { state: "icononly" 0.0;
	       inherit: "default" 0.0;
               fixed: 0 0;
	       visible: 1;
	       align: 0.5 0.5;
	       aspect: 1.0 1.0;
	       rel2.offset: -5 -5;
	       rel2.relative: 1.0 1.0;
	       aspect_preference: VERTICAL;
	    }
	 }
         part { name: "elm.text";
	    type:          TEXT;
	    mouse_events:  0;
	    scale: 1;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to_x: "elm.swallow.content";
	       rel1.relative: 1.0 0.0;
               rel1.offset: 0 4;
	       rel2.offset: -5 -5;
	       color: 80 80 80 255;
	       text {
		  font:     "Sans";
		  size:     FONT_SIZE;
		  min:      0 0;
		  align:    0.5 0.5;
	       }
	    }
	    description { state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       text.min: 1 1;
	    }
	 }
      }
      programs {
	 program {
	    name:   "button_click";
	    signal: "mouse,down,1";
	    source: "button_image";
	    action: STATE_SET "clicked" 0.0;
	    target: "button_image";
	 }
	 program {
	    name:   "button_unclick";
	    signal: "mouse,up,1";
	    source: "button_image";
	    action: STATE_SET "default" 0.0;
	    target: "button_image";
	    after: "button_unclick2";
	 }
	 program {
	    name:   "button_unclick2";
	    action: SIGNAL_EMIT "elm,action,click" "";
	 }
	 program { name: "text_show";
	    signal: "elm,state,text,visible";
	    source: "elm";
	    script {
	       new st[31];
	       new Float:vl;
	       get_state(PART:"elm.swallow.content", st, 30, vl);
	       if (!strcmp(st, "icononly"))
		 set_state(PART:"elm.swallow.content", "visible", 0.0);
	       set_state(PART:"elm.text", "visible", 0.0);
	    }
	 }
	 program { name: "text_hide";
	    signal: "elm,state,text,hidden";
	    source: "elm";
	    script {
	       new st[31];
	       new Float:vl;
	       get_state(PART:"elm.swallow.content", st, 30, vl);
	       if (!strcmp(st, "visible"))
		 set_state(PART:"elm.swallow.content", "icononly", 0.0);
	       set_state(PART:"elm.text", "default", 0.0);
	    }
	 }
	 program { name: "icon_show";
	    signal: "elm,state,icon,visible";
	    source: "elm";
	    script {
	       new st[31];
	       new Float:vl;
	       get_state(PART:"elm.text", st, 30, vl);
	       if (!strcmp(st, "visible"))
		 set_state(PART:"elm.swallow.content", "visible", 0.0);
	       else
		 set_state(PART:"elm.swallow.content", "icononly", 0.0);
	    }
	 }
	 program { name: "icon_hide";
	    signal: "elm,state,icon,hidden";
	    source: "elm";
	    action:  STATE_SET "default" 0.0;
	    target: "elm.swallow.content";
	 }
      }
   }
   group { name: "elm/button/base/hoversel_vertical";
      images {
	 image: "elm_frame.png" COMP;
	 image: "elm_arrow_down.png" COMP;
      }
      parts {      
	 part { name: "button_image";
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       image {
		  normal: "elm_frame.png";
		  border: 1 1 1 1;
	       }
	    }
	    //~ description { state: "clicked" 0.0;
	       //~ inherit: "default" 0.0;
	       //~ image.normal: "rect.png";
	    //~ }
	 }
	 part { name: "arrow";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       image.normal: "elm_arrow_down.png";
	       rel1.offset: -10 -4;
	       rel2.offset: -2 4;
	       rel1.relative: 1.0 0.5;
	       rel2.relative: 1.0 0.5;
	       align: 0.0 0.5;
	    }
	 }
	 part { name: "elm.swallow.content";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       visible: 0;
	       align: 0.0 0.5;
	       aspect: 1.0 0.0001;		//TODO Is this hack good ??
	       aspect_preference: VERTICAL;
	       rel1.offset: 1 1;
	       rel2.offset: 0 -1;
	    }
	    description { state: "visible" 0.0;
	       inherit: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       visible: 1;
	    }
	 }
	 part { name: "elm.text";
	    type:          TEXT;
	    mouse_events:  0;
	    scale: 1;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  to_x: "elm.swallow.content";
		  relative: 1.0 0.0;
	       }
	       rel2 {
		  to_x: "arrow";
		  relative: 0.0 1.0;
		  offset: -4 0;
	       }
	       color: 80 80 80 200;
	       text {
		  font:     "Sans,Edje-Vera";
		  size:     FONT_SIZE;
		  min:      0 0;
		  align:    0.5 0.5;
	       }
	    }
	    description { state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       text.min: 1 1;
	    }
	 }
      }
      programs {
	 program {
	    name:   "button_unclick";
	    signal: "mouse,up,1";
	    source: "button_image";
	    action: SIGNAL_EMIT "elm,action,click" "";
	 }
	 program { name: "text_show";
	    signal: "elm,state,text,visible";
	    source: "elm";
	    action:  STATE_SET "visible" 0.0;
	    target: "elm.text";
	 }
	 program { name: "text_hide";
	    signal: "elm,state,text,hidden";
	    source: "elm";
	    action:  STATE_SET "default" 0.0;
	    target: "elm.text";
	 }
	 program { name: "icon_show";
	    signal: "elm,state,icon,visible";
	    source: "elm";
	    action:  STATE_SET "visible" 0.0;
	    target: "elm.swallow.content";
	 }
	 program { name: "icon_hide";
	    signal: "elm,state,icon,hidden";
	    source: "elm";
	    action:  STATE_SET "default" 0.0;
	    target: "elm.swallow.content";
	 }
      }
   }

   /**** Toolbar ***
    * 
    *  must provide:
    * 
    *  must emit:
    * 
    *  should receive:
    * 
    *  styles:
    */
   group { name: "elm/toolbar/base/default";
      parts {
         part { name: "base";
	    type: RECT;
            mouse_events: 1;
            description { state: "default" 0.0;
	       color: 0 0 0 0;
            }
         }
         part { name: "clipper";
            type: RECT;
            mouse_events: 0;
            description {
               state: "default" 0.0;
               rel1 {
                  to: "base";
                  offset: 2 2;
               }
               rel2 {
                  to: "base";
                  offset: -3 -3;
               }
            }
         }
         part { name: "elm.swallow.content";
            clip_to: "clipper";
            type: SWALLOW;
            description {
               state: "default" 0.0;
               rel1.to: "clipper";
               rel2.to: "clipper";
            }
         }
         //~ part { name: "over2";
            //~ mouse_events: 0;
            //~ description { state: "default" 0.0;
               //~ rel1.to: "base";
               //~ rel2.to: "base";
               //~ image {
                  //~ normal: "bt_dis_shine.png";
                  //~ border: 4 4 4 4;
               //~ }
            //~ }
         //~ }
         //~ part { name: "over1";
            //~ mouse_events: 0;
            //~ description { state: "default" 0.0;
               //~ rel1.to: "base";
               //~ rel2.to: "base";
               //~ rel2.relative: 1.0 0.5;
               //~ image {
                  //~ normal: "bt_dis_hilight.png";
                  //~ border: 4 4 4 0;
               //~ }
               //~ color: 255 255 255 128;
            //~ }
         //~ }
         //~ part { name: "left_arrow";
            //~ mouse_events: 0;
            //~ description { state: "default" 0.0;
               //~ image.normal: "icon_left_arrow.png";
               //~ aspect: 1.0 1.0;
               //~ aspect_preference: VERTICAL;
               //~ align: 0.0 0.5;
               //~ min: 32 32;
               //~ max: 32 32;
            //~ }
            //~ description { state: "hidden" 0.0;
               //~ inherit: "default" 0.0;
               //~ visible: 0;
               //~ color: 255 255 255 0;
            //~ }
         //~ }
         //~ part { name: "right_arrow";
            //~ mouse_events: 0;
            //~ description { state: "default" 0.0;
               //~ image.normal: "icon_right_arrow.png";
               //~ aspect: 1.0 1.0;
               //~ aspect_preference: VERTICAL;
               //~ align: 1.0 0.5;
               //~ min: 32 32;
               //~ max: 32 32;
            //~ }
            //~ description { state: "hidden" 0.0;
               //~ inherit: "default" 0.0;
               //~ visible: 0;
               //~ color: 255 255 255 0;
            //~ }
         //~ }
         part { name: "event";
            type: RECT;
            mouse_events: 1;
            repeat_events: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
         }
      }
      programs {
         //~ program { name: "sb_hbar_show";
            //~ signal: "elm,action,show,hbar";
            //~ source: "elm";
            //~ action:  STATE_SET "default" 0.0;
            //~ transition: LINEAR 0.5;
            //~ target: "left_arrow";
            //~ target: "right_arrow";
         //~ }
         //~ program { name: "sb_hbar_hide";
            //~ signal: "elm,action,hide,hbar";
            //~ source: "elm";
            //~ action:  STATE_SET "hidden" 0.0;
            //~ target: "left_arrow";
            //~ target: "right_arrow";
            //~ transition: LINEAR 0.5;
         //~ }
      }
   }
   group { name: "elm/toolbar/item/default";
      images {
         //~ image: "toolbar_sel.png" COMP;
      }
      parts {
         part { name: "label2";
            type: TEXT;
            mouse_events:  0;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.5 1.0;
               fixed: 0 1;
               rel1.to: "elm.text";
               rel2.to: "elm.text";
               color: 0 0 0 255;
               text {
                  font: "Sans";
                  text_source: "elm.text";
                  size: 10;
                  min: 1 1;
                  align: 0.5 0.5;
               }
            }
            description { state: "selected" 0.0;
               inherit: "default" 0.0;
               visible: 0;
            }
         }
         part { name: "bg";
            mouse_events: 0;
            description { state: "default" 0.0;
               visible: 0;
               color: 255 255 255 0;
               //~ image {
                  //~ normal: "toolbar_sel.png";
                  //~ border: 3 3 0 0;
               //~ }
               image.middle: SOLID;
               fill.smooth: 0;
            }
            description { state: "selected" 0.0;
               inherit: "default" 0.0;
               visible: 1;
               color: 255 255 255 255;
            }
         }
         part { name: "elm.swallow.icon";
            type: SWALLOW;
            description { state: "default" 0.0;
               align: 0.5 0.5;
               aspect: 1.0 1.0;
               aspect_preference: VERTICAL;
               rel1 {
                  relative: 0.0 0.0;
                  offset: 2 2;
               }
               rel2 {
                  to_y: "elm.text";
                  relative: 1.0 0.0;
                  offset: -3 -1;
               }
               color: 0 0 0 0;
            }
         }
         part { name: "elm.text";
            type: TEXT;
            effect: SOFT_SHADOW;
            mouse_events:  0;
            scale: 1;
            description { state: "default" 0.0;
               align: 0.5 1.0;
               fixed: 0 1;
               rel1 {
                  relative: 0.0 1.0;
                  offset:   0 -1;
               }
               rel2 {
                  relative: 1.0 1.0;
                  offset:   -1 -1;
               }
               visible: 0;
               color: 224 224 224 255;
               color3: 0 0 0 32;
               text {
                  font: "Sans:style=Bold";
                  size: 10;
                  min: 1 1;
                  align: 0.5 0.5;
               }
            }
            description { state: "selected" 0.0;
               inherit: "default" 0.0;
               visible: 1;
            }
         }
         part { name: "event";
            type: RECT;
            mouse_events: 1;
            ignore_flags: ON_HOLD;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
         }
      }
      programs {
         program { name: "go_active";
            signal:  "elm,state,selected";
            source:  "elm";
            action:  STATE_SET "selected" 0.0;
            target:  "bg";
            target:  "elm.text";
            target:  "label2";
            transition: LINEAR 0.2;
         }
         program { name: "go_passive";
            signal:  "elm,state,unselected";
            source:  "elm";
            action:  STATE_SET "default" 0.0;
            target:  "bg";
            target:  "elm.text";
            target:  "label2";
            transition: LINEAR 0.1;
         }
         program { name: "go";
            signal:  "mouse,up,1";
            source:  "event";
            action:  SIGNAL_EMIT "elm,action,click" "elm";
         }
      }
   }

   /**** Entry ***
    * 
    *  must provide:
    * 
    *  must emit:
    * 
    *  should receive:
    * 
    *  styles:
    */
   group { name: "elm/entry/base-single/default";
      images {
	 image: "elm_frame.png" COMP;
      }
      styles
	{
	   style { name: "entry_single_textblock_style";
	      base: "font=Sans font_size="FONT_SIZE" align=left color=#000 wrap=none";
	      tag:  "em" "+ font=Sans:style=Oblique";
	      tag:  "b" "+ font=Sans:style=Bold";
	      tag:  "br" "\n";
	   }
	}
      parts {
	 part { name: "bg";
	    description { state: "default" 0.0;
	       rel1.offset: -2 0;
	       rel2.offset: 2 0;
	       image.normal: "elm_frame.png";
	       image.border: 1 1 1 1;
	       visible: 0;
	    }
	    description { state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 part { name: "elm.text";
	    type: TEXTBLOCK;
	    mouse_events: 1;
	    scale: 1;
	    entry_mode: EDITABLE;
	    select_mode: EXPLICIT;
	    multiline: 0;
	    source: "elm/entry/selection/default"; // selection under
	    source4: "elm/entry/cursor/default"; // cursorover
	    description { state: "default" 0.0;
	       text {
		  style: "entry_single_textblock_style";
		  min: 1 1;
	       }
	    }
	 }
      }
      programs {
	 program { name: "focus";
	    signal: "load";
	    source: "";
	    action: FOCUS_SET;
	    target: "elm.text";
	 }
	 program { name: "focused";
	    signal: "elm,action,focus";
	    source: "elm";
	    action: STATE_SET "visible" 0.0;
	    target: "bg";
	 }
	 program { name: "unfocused";
	    signal: "elm,action,unfocus";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "bg";
	 }
      }
   }
   group { name: "elm/entry/cursor/default";
      parts {
         part { name: "cursor";
	    mouse_events: 0;
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	    }
	    description { state: "visible" 0.0;
	       visible: 1;
	       rel1.offset: 0 2;
	       rel2.relative: 0.0 1.0;
	       rel2.offset: 0 -2;
	       color: 0 0 0 250;
	    }
	    description { state: "blink" 0.0;
	       inherit: "visible" 0.0;
	       color: 0 0 0 20;
	    }
	 }
      }
      programs {
	 program { name: "blink";
	    action: STATE_SET "blink" 0.0;
	    in: 0.9 0.0;
	    transition: SINUSOIDAL 0.5;
	    target: "cursor";
	    after: "blink2";
	 }
	 program { name: "blink2";
	    action: STATE_SET "visible" 0.0;
	    transition: SINUSOIDAL 0.5;
	    target: "cursor";
	    after: "blink";
	 }
	 program { name: "stop_blink";
	    action: ACTION_STOP;
	    target: "blink";
	    target: "blink2";
	 }
	 program { name: "focused";
	    signal: "elm,action,focus";
	    source: "elm";
	    action: STATE_SET "visible" 0.0;
	    target: "cursor";
	    after: "blink";
	 }
	 program { name: "unfocused";
	    signal: "elm,action,unfocus";
	    source: "elm";
	    action: STATE_SET "default" 0.0;
	    target: "cursor";
	    after: "stop_blink";
	 }
      }
   }
   group { name: "elm/entry/selection/default";
      parts {      
         part { name: "bg";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       color: 128 128 128 128;
	    }
	 }
      }
   }
