dnl Process this file with autoconf to produce a configure script.

# get rid of that stupid cache mechanism
rm -f config.cache

AC_INIT(configure.in)

AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE(entrance_edit_gui, 0.0.1)

AC_PREREQ(2.52)

AM_CONFIG_HEADER(src/config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST
AM_ENABLE_SHARED
AM_PROG_LIBTOOL
LIBS=""

if test "x${prefix}" = "xNONE"; then
	prefix="${ac_default_prefix}"
fi

AC_DEFINE_UNQUOTED(PREFIX, "${prefix}", [Install prefix])

if test "x${exec_prefix}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    bindir="${ac_default_prefix}/bin";
  else
    bindir="${prefix}/bin";
  fi
else
  if test "x${prefix}" = "xNONE"; then
    bindir="${ac_default_prefix}/bin";
  else
    bindir="${prefix}/bin";
  fi
fi

if test "x${exec_prefix}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    libdir="${ac_default_prefix}/lib";
  else
    libdir="${prefix}/lib";
  fi
else
  if test "x${prefix}" = "xNONE"; then
    libdir="${ac_default_prefix}/lib";
  else
    libdir="${prefix}/lib";
  fi
fi
      
dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", [Shared Data Directory])
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", [Shared Data Directory])
fi

dnl Set PACKAGE_BIN_DIR in config.h.
if test "x${bindir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${ac_default_prefix}/bin", [Installation Directory for User Executables])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${prefix}/bin", [Installation Directory for User Executables])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${bindir}", [Installation Directory for User Executables])
fi

dnl Set PACKAGE_LIB_DIR in config.h.
if test "x${libdir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${ac_default_prefix}/lib", [Installation Directory for Libraries])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${prefix}/lib", [Installation Directory for Libraries])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${libdir}", [Installation Directory for Libraries])
fi

#dnl Set PACKAGE_SOURCE_DIR in config.h.
#packagesrcdir=`cd $srcdir && pwd`
#AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}", [Source Code Directory])

#check for ENTRANCE_EDIT which contains libentrance_edit
AC_PATH_EFL(
   entrance_edit,
   0.1.0.001,
   [
     AC_DEFINE(HAVE_ENTRANCE_EDIT, 1, have ENTRANCE_EDIT)
     entrance_edit="ENTRANCE_EDIT "
     AM_CONDITIONAL(HAVE_ENTRANCE_EDIT, true)
     have_entrance_edit="yes"
     entrance_edit_libs=`entrance_edit-config --libs`
     entrance_edit_cflags=`entrance_edit-config --cflags`
   ],
   [
	AC_MSG_ERROR([No Entrance, entrance_edit_gui is an entrance utility. Install entrance first])
   ]
)

#check for ECORE
PKG_CHECK_MODULES(ECORE, [
     ecore >= 0.9.9
     ecore-evas >= 0.9.9
     ecore-file >= 0.9.9
   ], [
     have_ecore="yes"
     ecore_libs=`pkg-config --libs ecore ecore-evas ecore-file`
     ecore_cflags=`pkg-config --cflags ecore ecore-evas ecore-file`
   ],
   [
     AC_MSG_ERROR([No Ecore, can't build!])
   ]
)

#check for EVAS
PKG_CHECK_MODULES(EVAS, [evas >= 0.9.9], [
     have_evas="yes"
     evas_libs=`pkg-config --libs evas`
     evas_cflags=`pkg-config --cflags evas`     
   ],
   [
     AC_MSG_ERROR([No Evas, can't build!])
   ]
)

#check for EDJE
PKG_CHECK_MODULES(EDJE, [edje >= 0.5.0], [
     have_edje="yes"
     edje_libs=`pkg-config --libs edje`
     edje_cflags=`pkg-config --cflags edje`     
   ],
   [
     AC_MSG_ERROR([No Edje, can't build!])
   ]
)

#check for ETK
PKG_CHECK_MODULES(ETK, [etk >= 0.1.0], [
     have_etk="yes"
     etk_libs=`pkg-config --libs etk`
     etk_cflags=`pkg-config --cflags etk`     
   ],
   [
     AC_MSG_ERROR([No Etk, can't build. Check back when we support another toolkit or just install etk already!])
   ]
)

AC_SUBST(entrance_edit_libs)
AC_SUBST(entrance_edit_cflags)
AC_SUBST(etk_libs)
AC_SUBST(etk_cflags)
AC_SUBST(ecore_libs)
AC_SUBST(ecore_cflags)
AC_SUBST(evas_libs)
AC_SUBST(evas_cflags)
AC_SUBST(edje_libs)
AC_SUBST(edje_cflags)

AC_OUTPUT([
			 Makefile \
			 src/Makefile \
			 src/widgets/Makefile \
			 src/smarts/Makefile \
			 src/gui/Makefile \
			 \
			 data/Makefile \
			 data/icons/Makefile \
			 data/icons/48x48/Makefile \
			 data/icons/48x48/apps/Makefile \
			 data/icons/48x48/categories/Makefile \
			 data/icons/48x48/devices/Makefile \
			 data/icons/48x48/status/Makefile \
			 data/icons/48x48/mimetypes/Makefile \
			 data/entrance_edit_gui.desktop \
			 ])
