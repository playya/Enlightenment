AC_INIT(configure.in)

E_PKG_VERSION=0.16.8.9
E_PKG_REVISION=0.03
if test "x$E_PKG_REVISION" != "x"; then
  E_PKG_VER_REV=$E_PKG_VERSION-$E_PKG_REVISION
  E_RPM_REVISION=$E_PKG_REVISION
else
  E_PKG_VER_REV=$E_PKG_VERSION
  E_RPM_REVISION=1
fi

AM_INIT_AUTOMAKE(e16, $E_PKG_VER_REV)

AC_DEFINE_UNQUOTED(E_PKG_VERSION, "$E_PKG_VERSION", [Version])
AC_DEFINE_UNQUOTED(E_PKG_VER_REV, "$E_PKG_VER_REV", [Version, Revision])
AC_SUBST(E_PKG_VERSION)
AC_SUBST(E_RPM_REVISION)

# reasonable guesses for where stuff is installed
if test "x$prefix" = "xNONE"; then
  prefix=$ac_default_prefix
fi
if test "x$exec_prefix" = "xNONE"; then
  exec_prefix=$prefix
fi

AM_MAINTAINER_MODE

ALL_LINGUAS="bg bs da de en_US es fr hu ko nl no ru sv pt pl pt_BR tr ja"

AC_PROG_CC
AC_PROG_MAKE_SET
AC_ISC_POSIX
AC_PROG_INSTALL
AC_PROG_LN_S

AC_HEADER_STDC

AM_ENABLE_SHARED
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL

AC_PATH_X
AC_PATH_XTRA

AC_CHECK_HEADERS(alloca.h locale.h stdarg.h wctype.h)

AC_TYPE_SIGNAL

AC_C_BIGENDIAN
AC_C_CONST
AC_C_INLINE
AC_C___ATTRIBUTE__
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(wchar_t, 4)

AC_CHECK_FUNCS(getcwd)
AC_CHECK_FUNCS(mkdir)
AC_CHECK_FUNCS(snprintf)
AM_CONDITIONAL(USE_ESNPRINTF, test "x$ac_cv_func_snprintf" != "xyes")
AC_CHECK_FUNCS(strcasecmp strcasestr)
AC_CHECK_FUNCS(setenv unsetenv)
AC_CHECK_FUNCS(strdup strndup)

AC_CHECK_FUNCS(blumfrub)
AC_CHECK_FUNCS(buckets_of_erogenous_nym)
AC_CHECK_FUNCS(buttox)

AM_ICONV
AM_LANGINFO_CODESET

AM_GNU_GETTEXT([external])
AM_GNU_GETTEXT_VERSION([0.12.1])

AC_ARG_ENABLE(fsstd,
  [  --enable-fsstd          install files following FSSTD @<:@default=yes@:>@],,
  enable_fsstd=yes)

AC_ARG_ENABLE(sound,
  [  --enable-sound          compile with sound support @<:@default=yes@:>@],,
  enable_sound=yes)

AC_ARG_ENABLE(hints-gnome,
  [  --enable-hints-gnome    compile with GNOME(<2.0) hints support @<:@default=no@:>@],,
  enable_hints_gnome=no)

if test "x$enable_hints_gnome" = "xyes"; then
  AC_DEFINE(ENABLE_GNOME, 1, [GNOME(<2.0) Hints])
fi
AM_CONDITIONAL(ENABLE_GNOME, test "x$enable_hints_gnome" = "xyes")

if test "x$enable_fsstd" = "xyes"; then
  LOCALEDIR=`eval echo ${datadir}/locale`
else
  datadir=${prefix}
  exec_prefix=${prefix}/e16
  LOCALEDIR=${prefix}/e16/locale
fi
DATADIR=`eval echo ${datadir}`
ENLIGHTENMENT_ROOT=`eval echo ${DATADIR}/e16`
ENLIGHTENMENT_BIN=`eval echo ${bindir}`
ENLIGHTENMENT_LIB=`eval echo ${libdir}`
AC_SUBST(ENLIGHTENMENT_ROOT)
AC_SUBST(ENLIGHTENMENT_BIN)
AC_SUBST(ENLIGHTENMENT_LIB)
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_ROOT, "$ENLIGHTENMENT_ROOT", [The installation root directory])
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_BIN, "$ENLIGHTENMENT_BIN", [The installation bin directory])
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_LIB, "$ENLIGHTENMENT_LIB", [The installation lib directory])
AC_DEFINE_UNQUOTED(LOCALEDIR, "$LOCALEDIR",  [The installation locale directory])

if test "x$enable_sound" = "xyes"; then
  AM_PATH_ESD(0.2.17,AC_DEFINE(HAVE_LIBESD, 1, [libesd.so]),[
    enable_sound=no
    AC_MSG_WARN([Sound support was requested but not found.])
  ])
fi

CPPFLAGS="$X_CFLAGS $CPPFLAGS"
LDFLAGS="$X_LIBS $LDFLAGS -L$prefix/lib"

PKG_CHECK_MODULES(IMLIB2, imlib2 >= 1.2.0, have_good_imlib2=yes)
AC_CHECK_LIB(Imlib2, imlib_context_set_mask_alpha_threshold,
  AC_DEFINE(HAVE_IMLIB_CONTEXT_SET_MASK_ALPHA_THRESHOLD, 1,
            [Imlib2 has imlib_context_set_mask_alpha_threshold]),,
  $IMLIB2_LIBS)

AC_ARG_ENABLE(sm,
  [  --enable-sm             compile with session management support @<:@default=yes@:>@],,
  enable_sm=yes)
if test "x$enable_sm" = "xyes"; then
  AC_CHECK_HEADERS(X11/SM/SMlib.h,, enable_sm=no)
  AC_CHECK_LIB(SM, SmcOpenConnection, SM_LIBS="-lSM -lICE", enable_sm=no)
  AC_SUBST(SM_LIBS)
fi
if test "x$enable_sm" = "xyes"; then
  AC_DEFINE(HAVE_SM, 1, [Session management support])
fi

AC_ARG_ENABLE(xft,
  [  --enable-xft            compile with Xft support @<:@default=yes@:>@],,
  enable_xft=yes)
if test "x$enable_xft" = "xyes"; then
  PKG_CHECK_MODULES(XFT, xft, AC_DEFINE(USE_XFT, 1, [Xft support]), enable_xft=no)
fi

AC_ARG_ENABLE(ecore,
  [  --enable-ecore          use ecore functions (for testing only - DO NOT USE!) @<:@default=no@:>@],,
  enable_ecore=no)
if test "x$enable_ecore" = "xyes"; then
  PKG_CHECK_MODULES(ECORE, ecore-x,
    AC_DEFINE(USE_ECORE, 1, [Use libecore])
    AC_DEFINE(USE_ECORE_X, 1, [Use libecore_x]),
    enable_ecore=no)
fi

# Is this reasonably correct?
AC_ARG_ENABLE(glx,
  [  --enable-glx            compile with GLX support (experimental) @<:@default=no@:>@],,
  enable_glx=no)
if test "x$enable_glx" = "xyes"; then
  AC_CHECK_HEADERS(GL/gl.h GL/glu.h GL/glx.h, , AC_MSG_ERROR([Cannot find GLX headers]))
  AC_CHECK_LIB(GL, glXCreateNewContext,
    [
      AC_DEFINE(HAVE_GLX, 1, [GLX support])
      GLX_LIBS="-lGL -lGLU"
    ],[
      AC_MSG_ERROR([Cannot find GLX libraries])
    ])
  AC_CHECK_LIB(GL, glXBindTexImageEXT,
      AC_DEFINE(HAVE_GLX_glXBindTexImageEXT, 1, [glXBindTexImageEXT is available]))
  AC_SUBST(GLX_LIBS)
fi
AM_CONDITIONAL(HAVE_GLX, test "x$enable_glx" = "xyes")

AC_CHECK_LIB(Xext, XShapeQueryExtension,
  E_X_LIBS="-lXext $E_X_LIBS",
  AC_MSG_ERROR([Shape support is required but was not found]),
  -lX11)

AC_ARG_ENABLE(xinerama,
  [  --enable-xinerama       compile with xinerama support @<:@default=yes@:>@],,
  enable_xinerama=yes)
if test "x$enable_xinerama" = "xyes"; then
  AC_CHECK_LIB(Xinerama, XineramaQueryExtension,
    AC_DEFINE(HAVE_XINERAMA, 1, [Xinerama support])
    XINERAMA_LIBS="-lXinerama",
    enable_xinerama=no
    AC_MSG_WARN([Xinerama support was requested but not found]),
    -lXext -lX11)
fi
AC_SUBST(XINERAMA_LIBS)

AC_ARG_ENABLE(zoom,
  [  --enable-zoom           compile with zoom support @<:@default=yes@:>@],,
  enable_zoom=yes)
if test "x$enable_zoom" = "xyes"; then
  AC_CHECK_LIB(Xxf86vm, XF86VidModeQueryExtension,
    AC_DEFINE(WITH_ZOOM, 1, [Zoom Support])
    E_X_LIBS="-lXxf86vm $E_X_LIBS",
    enable_zoom=no
    AC_MSG_WARN([Zoom support was requested but not found]),
    -lXext -lX11)
fi

AC_ARG_ENABLE(xsync,
  [  --enable-xsync          compile with SYNC support @<:@default=yes@:>@],,
  enable_xsync=yes)
if test "x$enable_xsync" = "xyes"; then
  AC_CHECK_LIB(Xext, XSyncQueryExtension,
    AC_DEFINE(HAVE_XSYNC, 1, [SYNC support]),
    enable_xsync=no
    AC_MSG_WARN([Sync support was requested but not found]),
    -lX11)
fi

AC_ARG_ENABLE(xscrnsaver,
  [  --enable-xscrnsaver     compile with ScreenSaver support (experimental!) @<:@default=no@:>@],,
  enable_xscrnsaver=no)
if test "x$enable_xscrnsaver" = "xyes"; then
  AC_CHECK_LIB(Xss, XScreenSaverQueryExtension,
    AC_DEFINE(HAVE_XSCREENSAVER, 1, [ScreenSaver support])
    E_X_LIBS="-lXss $E_X_LIBS",
    enable_xscrnsaver=no
    AC_MSG_WARN([ScreenSaver support was requested but not found]),
    -lXext -lX11)
fi

AC_ARG_ENABLE(xrandr,
  [  --enable-xrandr         compile with RandR support @<:@default=yes@:>@],,
  enable_xrandr=yes)
if test "x$enable_xrandr" = "xyes"; then
  AC_CHECK_LIB(Xrandr, XRRQueryExtension,
    AC_DEFINE(HAVE_XRANDR, 1, [RandR support])
    E_X_LIBS="-lXrandr -lXrender $E_X_LIBS",
    enable_xrandr=no
    AC_MSG_WARN([RandR support was requested but not found]),
    -lXrender -lXext -lX11)
  AC_CHECK_HEADERS(X11/extensions/Xrandr.h,,,[#include <X11/Xlib.h>])
fi

# FIXME - Do this properly
AC_ARG_ENABLE(composite,
  [  --enable-composite      compile with Composite support @<:@default=yes@:>@],,
  enable_composite=yes)
if test "x$enable_composite" = "xyes"; then
  AC_CHECK_LIB(Xcomposite, XCompositeQueryExtension,
    AC_DEFINE(HAVE_COMPOSITE, 1, [Composite support])
    E_X_LIBS="-lXcomposite -lXdamage -lXfixes -lXrender $E_X_LIBS",
    enable_composite=no,
    -lXext -lX11)
  AC_CHECK_HEADERS(X11/extensions/Xcomposite.h ,, enable_composite=no, [#include <X11/Xlib.h>])
  AC_CHECK_HEADERS(X11/extensions/Xdamage.h    ,, enable_composite=no, [#include <X11/Xlib.h>])
  AC_CHECK_HEADERS(X11/extensions/Xfixes.h     ,, enable_composite=no, [#include <X11/Xlib.h>])
  AC_CHECK_HEADERS(X11/extensions/Xrender.h    ,, enable_composite=no, [#include <X11/Xlib.h>])
  if test "x$enable_composite" != "xyes"; then
    AC_MSG_WARN([Composite support was requested but required component was not found])
  fi
fi
AM_CONDITIONAL(HAVE_COMPOSITE, test "x$enable_composite" = "xyes")

AC_CHECK_LIB(Fridge,mass_quantities_of_bass_ale)
AC_CHECK_LIB(Fridge,mass_quantities_of_any_ale,, [
  echo "Warning: No ales were found in your refrigerator."
  echo "  We highly suggest that you rectify this situation immediately."
])

AC_ARG_ENABLE(roothacklib,
  [  --enable-roothacklib    build window mode helper library @<:@default=yes@:>@],,
  enable_roothacklib=yes) 
if test "x$enable_roothacklib" = "xyes"; then
  AC_CHECK_LIB(dl, dlopen, DLOPEN_LIBS=-ldl, enable_roothacklib=no)
  AC_SUBST(DLOPEN_LIBS)
fi
if test "x$enable_roothacklib" = "xyes"; then
  AC_DEFINE(USE_ROOTHACKLIB, 1, [Use window mode helper library])
fi
AM_CONDITIONAL(BUILD_ROOTHACKLIB, test "x$enable_roothacklib" = "xyes")

AC_ARG_ENABLE(gcc-cpp,
  [  --enable-gcc-cpp   compile everything as if it were C++ @<:@default=no@:>@],,
  enable_gcc_cpp=no) 
if test "x$enable_gcc_cpp" = "xyes"; then
  CC="g++"
  CPPFLAGS="-x c++"
fi

AC_ARG_ENABLE(gcc-warnings,
  [  --enable-gcc-warnings   enable GCC compiler warnings @<:@default=no@:>@],,
  enable_gcc_warnings=no) 
if test "x$enable_gcc_warnings" = "xyes"; then
  CFLAGS="$CFLAGS -W -Wall -Waggregate-return -Wcast-align -Wpointer-arith -Wshadow -Wwrite-strings"
  if test "x$enable_gcc_cpp" != "xyes"; then
    CFLAGS="$CFLAGS -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes"
  fi
fi

AC_SUBST(E_X_LIBS)

AM_CONFIG_HEADER(config.h)

AC_OUTPUT([
Makefile
src/Makefile
dox/Makefile
dox/E-docs/Makefile
eesh/Makefile
epp/Makefile
lib/Makefile
man/Makefile
config/Makefile
config/pix/Makefile
themes/Makefile
scripts/Makefile
misc/Makefile
misc/e16.desktop
misc/e16-gnome.desktop
misc/e16-kde.desktop
po/Makefile.in
e16.spec
])

if test "x$have_good_imlib2" != "xyes"; then
  echo "***************************************************************"
  echo "*** WARNING: imlib2 >= 1.2.0 was not detected               ***"
  echo "*** WARNING: If you indeed do not have this, expect trouble ***"
  echo "***************************************************************"
fi

echo
echo "------------------------------------------------------------------------"
echo "$PACKAGE Version $VERSION"
echo "------------------------------------------------------------------------"
echo
echo "Configuration summary"
echo
echo "Support for"
echo "  Localisation ................. $USE_NLS"
echo "  Sound ........................ $enable_sound"
echo "  Old GNOME hints .............. $enable_hints_gnome"
echo "  Session management ........... $enable_sm"
echo "  Zoom ......................... $enable_zoom"
echo "  Xft .......................... $enable_xft"
echo "  Xinerama ..................... $enable_xinerama"
echo "  RandR ........................ $enable_xrandr"
echo "  Sync ......................... $enable_xsync"
echo "  Composite .................... $enable_composite"
echo "  Window mode helper library ... $enable_roothacklib"
echo
echo "Experimental options - DO NOT USE unless you know what you are doing"
echo "  Compile with ecore/ecore_x ... $enable_ecore"
echo "  GLX .......................... $enable_glx"
echo "  ScreenSaver .................. $enable_xscrnsaver"
echo
echo "Installation path .............. $prefix"
echo
echo "Compilation .................... make"
echo "Installation ................... make install"
echo

echo "***************************************************************"
echo "*** NOTE: If this is your first trip with version 0.16.8    ***"
echo "*** NOTE: you may want to take a look in docs/README-0.16.8 ***"
echo "***************************************************************"
