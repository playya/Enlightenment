AC_INIT(e.spec)

ENLIGHTENMENT_MAJOR=0
ENLIGHTENMENT_MINOR=16
ENLIGHTENMENT_MICRO=6
ENLIGHTENMENT_VERSION=$ENLIGHTENMENT_MAJOR.$ENLIGHTENMENT_MINOR.$ENLIGHTENMENT_MICRO

AM_INIT_AUTOMAKE(enlightenment, $ENLIGHTENMENT_VERSION)
AM_MAINTAINER_MODE
AM_CONDITIONAL(FSSTD, test x$enable_fsstd = xyes)
AC_SUBST(USE_FSSTD)

dnl reasonable guesses for where stuff is installed
if test "x$prefix" = "xNONE"; then
  prefix="/usr/local"
else
  prefix=$prefix
fi

AM_CONFIG_HEADER(config.h)

AC_DEFINE_UNQUOTED(ENLIGHTENMENT_VERSION, "$ENLIGHTENMENT_VERSION", [Enlightenment version])
AC_SUBST(ENLIGHTENMENT_VERSION)
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_MAJOR, "$ENLIGHTENMENT_MAJOR", [Major Version])
AC_SUBST(ENLIGHTENMENT_MAJOR)
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_MINOR, "$ENLIGHTENMENT_MINOR", [Minor Version])
AC_SUBST(ENLIGHTENMENT_MINOR)
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_MICRO, "$ENLIGHTENMENT_MICRO", [Micro Version])
AC_SUBST(ENLIGHTENMENT_MICRO)

AC_SUBST(ENLIGHTENMENT_ROOT)
AC_SUBST(ENLIGHTENMENT_BIN)
AC_SUBST(LOCALEDIR)

ALL_LINGUAS="de dk en_US es fr hu ko nl no ru sv pt pl pt_BR tr ja"

AC_PROG_CC
AC_PROG_MAKE_SET
AC_ISC_POSIX
AC_PROG_INSTALL
AC_PROG_LN_S

AC_HEADER_STDC

AC_PATH_X
AC_PATH_XTRA

AC_CHECK_HEADERS(X11/SM/SMlib.h)
AC_CHECK_HEADERS(alloca.h stdarg.h wctype.h)

AC_TYPE_SIGNAL

AC_C_BIGENDIAN

AC_CHECK_FUNCS(getcwd)
AC_CHECK_FUNCS(mkdir)
AC_CHECK_FUNCS(snprintf)
AC_CHECK_FUNCS(strcasecmp)
AC_CHECK_FUNCS(setenv)

AC_CHECK_FUNCS(blumfrub)
AC_CHECK_FUNCS(buckets_of_erogenous_nym)
AC_CHECK_FUNCS(buttox)

AM_GNU_GETTEXT
AM_GNU_GETTEXT_VERSION(0.10.40)

AC_ARG_ENABLE(fsstd, [  --enable-fsstd          install files following FSSTD [default=no]], ,enable_fsstd=no)

AC_ARG_ENABLE(sound, [  --enable-sound          compile with sound support [default=yes]], ,enable_sound=yes)

AC_ARG_ENABLE(upgrade, [  --enable-upgrade        compile with auto-upgrade support [default=yes]], ,enable_upgrade=yes)

AC_ARG_ENABLE(hints-ewmh,
  [  --enable-hints-ewmh     compile with Extended Window Manager Hints support [default=yes]],, enable_hints_ewmh=yes)
AC_ARG_ENABLE(hints-gnome,
  [  --enable-hints-gnome    compile with GNOME(<2.0) hints support [default=yes]],, enable_hints_gnome=yes)
AC_ARG_ENABLE(hints-kde,
  [  --enable-hints-kde      compile with KDE(<2.0) hints support [default=no]],, enable_hints_kde=no)
AC_ARG_WITH(fnlib,
  [  --with-fnlib            compile with Fnlib support [default=yes]],, with_fnlib=yes)

if test "x$enable_hints_ewmh" = "xyes"; then AC_DEFINE(ENABLE_EWMH, 1, [Extended Window Manager Hints]) fi
if test "x$enable_hints_gnome" = "xyes"; then AC_DEFINE(ENABLE_GNOME, 1, [GNOME(<2.0) Hints]) fi
if test "x$enable_hints_kde" = "xyes"; then AC_DEFINE(ENABLE_KDE, 1, [KDE(<2.0) Hints]) fi
AM_CONDITIONAL(ENABLE_EWMH, test "x$enable_hints_ewmh" = "xyes")
AM_CONDITIONAL(ENABLE_GNOME, test "x$enable_hints_gnome" = "xyes")
AM_CONDITIONAL(ENABLE_KDE, test "x$enable_hints_kde" = "xyes")

dnl The following test must come after AM_GNU_GETTEXT as it relies on
dnl ${DATADIRNAME} being defined.

if test "x$enable_fsstd" = "xyes"; then
	ENLIGHTENMENT_ROOT=${datadir}/enlightenment
	ENLIGHTENMENT_BIN=${bindir}
	LOCALEDIR=${prefix}/${DATADIRNAME}/locale
	USE_FSSTD=yes
else
	ENLIGHTENMENT_ROOT=${prefix}/enlightenment
	ENLIGHTENMENT_BIN=${prefix}/enlightenment/bin
	LOCALEDIR=${prefix}/enlightenment/locale
	USE_FSSTD=no
fi

if test "x$enable_sound" = "xyes"; then
AM_PATH_ESD(0.2.17,AC_DEFINE(HAVE_LIBESD, 1, [libesd.so]),[
echo "WARNING: Enlightenment needs a system with libesd.so (EsounD)"
echo "0.2.17 or higher to use sound support."
echo "Enlightenment can use EsounD (ESD) to be installed to compile."
echo "Sound will be disabled in this binary. If you ever want sound"
echo "You will need to get and install EsounD then recompile Enlightenment"
echo "Please see the EsounD homepage below on how to obtain/install it."
echo "http://pw1.netcom.com/~ericmit/EsounD.html"
echo "You can also obtain it from:"
echo "ftp://ftp.enlightenment.org/pub/enlightenment/"
echo "ftp://www.rasterman.com/pub/enlightenment/"
AC_MSG_WARN([Warning: no EsounD detected.])])
else
echo "Sound support has been turned off, per the --enable-sound=no"
echo "passed to your configure line."
fi

AM_PATH_IMLIB(1.9.8, , [
echo "ERROR: Enlightenment needs a system with Imlib 1.9.8 or higher"
echo "You can obtain it from:"
echo "ftp://ftp.enlightenment.org/pub/enlightenment/"
echo "ftp://www.rasterman.com/pub/enlightenment/"
echo "ftp://ftp.labs.redhat.com/pub/imlib/"
AC_MSG_ERROR([Fatal Error: no Imlib detected.])])

LDFLAGS="$LDFLAGS -L$prefix/lib"
LDFLAGS="$LDFLAGS `echo $IMLIB_LIBS | sed 's/\(.*\)-lImlib.*/\1/'`"
LDFLAGS="$LDFLAGS `echo $IMLIB_LIBS | sed 's/.*-lImlib.*\(-L[[^ ]]*\).*$/\1/'`"
XTST_LIBS=""

if test "x$with_fnlib" = "xyes"; then
# AC_CHECK_HEADER(Fnlib.h, ,AC_MSG_ERROR([Fatal Error: no Fnlib header detected.]))
AC_CHECK_LIB(Fnlib, Fnlib_init, FNLIB_LIBS=-lFnlib , [
echo "ERROR: Enlightenment needs a system with libFnlib.so (Fnlib)"
echo "You can obtain it from:"
echo "ftp://ftp.enlightenment.org/pub/enlightenment/"
echo "ftp://www.rasterman.com/pub/enlightenment/"
echo "ftp://ftp.labs.redhat.com/pub/fnlib/"
AC_MSG_ERROR([Fatal Error: no Fnlib detected.])], $IMLIB_LIBS)
AC_SUBST(FNLIB_LIBS)
AC_DEFINE(USE_FNLIB, 1, [Fnlib support])
fi

if test "x$enable_upgrade" = "xyes"; then
AC_CHECK_LIB(ghttp, ghttp_uri_validate, [AC_DEFINE(AUTOUPGRADE, 1, [Automatic upgrading]) 
GHTTP_LIBS=-lghttp] , [
echo "Automatic Upgrades requires libghttp"
AC_MSG_WARN([no libghttp detected.])
],$IMLIB_LIBS)
else
echo "Automatic Upgrades have been turned off by request at compiletime"
fi
AC_SUBST(GHTTP_LIBS)

AC_CHECK_HEADERS(freetype.h freetype/freetype.h freetype1/freetype/freetype.h,[ break] , )
AC_CHECK_LIB(ttf, TT_Init_FreeType, TTF_LIBS=-lttf, [
echo "ERROR: Enlightenment needs a system with libttf.so (TrueType Font Library)"
echo "You can obtain it from:"
echo "ftp://ftp.enlightenment.org/pub/enlightenment/"
echo "ftp://www.rasterman.com/pub/enlightenment/"
echo "You can also obtain it from:"
echo "http://www.freetype.org/"
echo "You can obtain some truetype fonts from:"
echo "http://voyager.cns.ohiou.edu/~sadkins/web_library/fonts/font_archive/"
AC_MSG_ERROR([Fatal Error: no FreeType detected.])], -lm)
AC_SUBST(TTF_LIBS)

AC_CHECK_LIB(dl, dlopen, DL_LIBS=-ldl , [
echo "Warning: Enlightenment requires the dl (dynamic loader) library"
echo "to be supported on your platform for module support.  Modules"
echo "have been disabled (this will affect functionality)"
AC_MSG_WARN([Module Support Disabled (no dynamic loader)])], -lm)
AC_SUBST(DL_LIBS)

AC_CHECK_LIB(Xtst, XTestGrabControl, , , $X_LIBS)
AC_CHECK_LIB(Xtst, XTestQueryExtension, XTST_LIBS=-lXtst, , $X_LIBS)
AC_SUBST(XTST_LIBS)
AC_CHECK_LIB(Xext, XkbQueryExtension, AC_DEFINE(WITH_TARTY_WARP, 1, [Tarty Warp]), , $X_LIBS)
AC_CHECK_LIB(Xinerama, XineramaQueryExtension, AC_DEFINE(HAS_XINERAMA, 1, [Xinerama support])
		XINERAMA_LIBS=-lXinerama
		, ,$X_LIBS)

AC_ARG_ENABLE(zoom, [  --enable-zoom           compile with zoom support [default=yes]], ,enable_zoom=yes)

if test "x$enable_zoom" = "xyes"; then
AC_CHECK_LIB(Xxf86vm, XF86VidModeQueryExtension,
             AC_DEFINE(WITH_ZOOM, 1, [Zoom Support])
             XVM_LIBS=-lXxf86vm
             , , $X_LIBS)
else
echo "zoom has been turned off by request at compiletime"
fi

AC_SUBST(XVM_LIBS)
AC_SUBST(XINERAMA_LIBS)
AC_SUBST(XKB)

AC_CHECK_LIB(Fridge,mass_quantities_of_bass_ale)
AC_CHECK_LIB(Fridge,mass_quantities_of_any_ale, , [
echo "Warning: No ales were found in your refrigerator."
echo "  We highly suggest that you rectify this situation immediately."
])

edocdata=`ls -1 $srcdir/dox/E-docs | egrep -v '(Makefile|CVS|^e|^misc|\.sh$)'`
edocexec=`ls -1 $srcdir/dox/E-docs | egrep '\.sh$'`
edocdata=`echo $edocdata`
edocexec=`echo $edocexec`

AC_SUBST(edocdata)
AC_SUBST(edocexec)

AC_OUTPUT([
Makefile
src/Makefile
src/themes/Makefile
src/themes/configs/Makefile
src/themes/configs/pix/Makefile
src/themes/configs/backup/Makefile
dox/Makefile
dox/E-docs/Makefile
eesh/Makefile
epp/Makefile
man/Makefile
scripts/Makefile
scripts/enlightenment.install
po/Makefile.in
intl/Makefile
debian/Makefile
])
