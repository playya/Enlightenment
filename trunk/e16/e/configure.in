AC_INIT(configure.in)

ENLIGHTENMENT_MAJOR=0
ENLIGHTENMENT_MINOR=16
ENLIGHTENMENT_MICRO=8.5
ENLIGHTENMENT_REVISION=0.00
ENLIGHTENMENT_VERSION=$ENLIGHTENMENT_MAJOR.$ENLIGHTENMENT_MINOR.$ENLIGHTENMENT_MICRO
if test "x$ENLIGHTENMENT_REVISION" != "x"; then
  ENLIGHTENMENT_REVNAME="$ENLIGHTENMENT_VERSION-$ENLIGHTENMENT_REVISION"
  RPM_REVISION=$ENLIGHTENMENT_REVISION
else
  ENLIGHTENMENT_REVNAME="$ENLIGHTENMENT_VERSION"
  RPM_REVISION=1
fi

AM_INIT_AUTOMAKE(e16, $ENLIGHTENMENT_REVNAME)
AM_MAINTAINER_MODE

dnl reasonable guesses for where stuff is installed
if test "x$prefix" = "xNONE"; then
  prefix="/usr/local"
fi
if test "x$exec_prefix" = "xNONE"; then
  exec_prefix=$prefix
fi

AM_CONFIG_HEADER(config.h)

AC_DEFINE_UNQUOTED(ENLIGHTENMENT_VERSION, "$ENLIGHTENMENT_VERSION", [Enlightenment version])
AC_SUBST(ENLIGHTENMENT_VERSION)
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_MAJOR, "$ENLIGHTENMENT_MAJOR", [Major Version])
AC_SUBST(ENLIGHTENMENT_MAJOR)
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_MINOR, "$ENLIGHTENMENT_MINOR", [Minor Version])
AC_SUBST(ENLIGHTENMENT_MINOR)
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_MICRO, "$ENLIGHTENMENT_MICRO", [Micro Version])
AC_SUBST(ENLIGHTENMENT_MICRO)
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_REVISION, "$ENLIGHTENMENT_REVISION", [Revision])
AC_SUBST(ENLIGHTENMENT_REVISION)
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_REVNAME, "$ENLIGHTENMENT_REVNAME", [Version-Revision])
AC_SUBST(ENLIGHTENMENT_REVNAME)
AC_SUBST(RPM_REVISION)

ALL_LINGUAS="bg bs da de en_US es fr hu ko nl no ru sv pt pl pt_BR tr ja"

AC_PROG_CC
AC_PROG_MAKE_SET
AC_ISC_POSIX
AC_PROG_INSTALL
AC_PROG_LN_S

AC_HEADER_STDC

AM_ENABLE_SHARED
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL

AC_PATH_X
AC_PATH_XTRA

AC_CHECK_HEADERS(X11/SM/SMlib.h)
AC_CHECK_HEADERS(alloca.h stdarg.h wctype.h)

AC_TYPE_SIGNAL

AC_C_BIGENDIAN
AC_C___ATTRIBUTE__
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)

AC_CHECK_FUNCS(getcwd)
AC_CHECK_FUNCS(mkdir)
AC_CHECK_FUNCS(snprintf)
AM_CONDITIONAL(USE_ESNPRINTF, test "x$ac_cv_func_snprintf" != "xyes")
AC_CHECK_FUNCS(strcasecmp strcasestr)
AC_CHECK_FUNCS(setenv unsetenv)
AC_CHECK_FUNCS(strdup strndup)

AC_CHECK_FUNCS(blumfrub)
AC_CHECK_FUNCS(buckets_of_erogenous_nym)
AC_CHECK_FUNCS(buttox)

AM_GNU_GETTEXT
AM_GNU_GETTEXT_VERSION(0.12.1)

AC_ARG_ENABLE(fsstd,
  [  --enable-fsstd          install files following FSSTD @<:@default=yes@:>@],,
  enable_fsstd=yes)

AC_ARG_ENABLE(sound,
  [  --enable-sound          compile with sound support @<:@default=yes@:>@],,
  enable_sound=yes)

AC_ARG_ENABLE(hints-gnome,
  [  --enable-hints-gnome    compile with GNOME(<2.0) hints support @<:@default=no@:>@],,
  enable_hints_gnome=no)

AC_ARG_ENABLE(ecore,
  [  --enable-ecore          use ecore functions (for testing only - DO NOT USE!) @<:@default=no@:>@],,
  enable_ecore=no)

if test "x$enable_hints_gnome" = "xyes"; then
  AC_DEFINE(ENABLE_GNOME, 1, [GNOME(<2.0) Hints])
fi
AM_CONDITIONAL(ENABLE_GNOME, test "x$enable_hints_gnome" = "xyes")

dnl The following test must come after AM_GNU_GETTEXT as it relies on
dnl ${DATADIRNAME} being defined.

if test "x$enable_fsstd" = "xyes"; then
  DATADIR=${prefix}/${DATADIRNAME}
  LOCALEDIR=${prefix}/${DATADIRNAME}/locale
else
  datadir=${prefix}
  DATADIR=${datadir}
  exec_prefix=${prefix}/e16
  LOCALEDIR=${prefix}/e16/locale
fi
ENLIGHTENMENT_ROOT=`eval echo ${DATADIR}/e16`
ENLIGHTENMENT_BIN=`eval echo ${bindir}`
ENLIGHTENMENT_LIB=`eval echo ${libdir}`
AC_SUBST(ENLIGHTENMENT_ROOT)
AC_SUBST(ENLIGHTENMENT_BIN)
AC_SUBST(ENLIGHTENMENT_LIB)
AC_SUBST(LOCALEDIR)
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_ROOT, "$ENLIGHTENMENT_ROOT", [The installation root directory])
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_BIN, "$ENLIGHTENMENT_BIN", [The installation bin directory])
AC_DEFINE_UNQUOTED(ENLIGHTENMENT_LIB, "$ENLIGHTENMENT_LIB", [The installation lib directory])
AC_DEFINE_UNQUOTED(LOCALEDIR, "$LOCALEDIR",  [The installation locale directory])

if test "x$enable_sound" = "xyes"; then
  AM_PATH_ESD(0.2.17,AC_DEFINE(HAVE_LIBESD, 1, [libesd.so]),[
    enable_sound=no
    AC_MSG_WARN([Sound support was requested but not found.])
  ])
fi

LDFLAGS="$LDFLAGS -L$prefix/lib"

PKG_CHECK_MODULES(IMLIB2, imlib2 >= 1.2.0, have_good_imlib2=yes)
IMLIB_LIBS=`imlib2-config --libs`
IMLIB_CFLAGS=`imlib2-config --cflags`
AC_SUBST(IMLIB_LIBS)
AC_SUBST(IMLIB_CFLAGS)
AC_CHECK_LIB(Imlib2, imlib_create_image, dummy=1,
  AC_MSG_ERROR([Cannot find Imlib2: Is imlib2-config in path?]),
  $IMLIB_LIBS)
AC_CHECK_LIB(Imlib2, imlib_context_set_mask_alpha_threshold,
  AC_DEFINE(HAVE_IMLIB_CONTEXT_SET_MASK_ALPHA_THRESHOLD, 1,
            [Imlib2 has imlib_context_set_mask_alpha_threshold]),,
  $IMLIB_LIBS)

if test "x$enable_ecore" = "xyes"; then
  AC_CHECK_LIB(ecore_x, ecore_x_init,
    [
      AC_DEFINE(USE_ECORE, 1, [Ecore list support])
      AC_DEFINE(USE_ECORE_X, 1, [Ecore_x support])
      AC_SUBST(ecore_libs)
      AC_SUBST(ecore_cflags)
    ],[
      AC_MSG_ERROR([Cannot find ecore: Is ecore-config in path?])
    ])
  ecore_libs=`ecore-config --libs-x`
  ecore_cflags=`ecore-config --cflags`
  AC_SUBST(ecore_libs)
  AC_SUBST(ecore_cflags)
fi

AC_CHECK_LIB(Xext, XShapeQueryExtension,
  E_X_LIBS="-lXext $E_X_LIBS",
  AC_MSG_ERROR([Shape support is required but was not found]),
  $X_LIBS -lX11)

AC_ARG_ENABLE(xinerama,
  [  --enable-xinerama       compile with xinerama support @<:@default=yes@:>@],,
  enable_xinerama=yes)
if test "x$enable_xinerama" = "xyes"; then
  AC_CHECK_LIB(Xinerama, XineramaQueryExtension,
    AC_DEFINE(HAS_XINERAMA, 1, [Xinerama support])
    XINERAMA_LIBS="-lXinerama",
    enable_xinerama=no
    AC_MSG_WARN([Xinerama support was requested but not found]),
    $X_LIBS -lXext -lX11)
fi
AC_SUBST(XINERAMA_LIBS)

AC_ARG_ENABLE(zoom,
  [  --enable-zoom           compile with zoom support @<:@default=yes@:>@],,
  enable_zoom=yes)
if test "x$enable_zoom" = "xyes"; then
  AC_CHECK_LIB(Xxf86vm, XF86VidModeQueryExtension,
    AC_DEFINE(WITH_ZOOM, 1, [Zoom Support])
    E_X_LIBS="-lXxf86vm $E_X_LIBS",
    enable_zoom=no
    AC_MSG_WARN([Zoom support was requested but not found]),
    $X_LIBS -lXext -lX11)
fi

AC_ARG_ENABLE(xsync,
  [  --enable-xsync          compile with SYNC support (experimental!) @<:@default=no@:>@],,
  enable_xsync=no)
if test "x$enable_xsync" = "xyes"; then
  AC_CHECK_LIB(Xext, XSyncQueryExtension,
    AC_DEFINE(HAS_XSYNC, 1, [SYNC support]),
    enable_xsync=no
    AC_MSG_WARN([Sync support was requested but not found]),
    $X_LIBS -lX11)
fi

AC_ARG_ENABLE(xscrnsaver,
  [  --enable-xscrnsaver     compile with ScreenSaver support (experimental!) @<:@default=no@:>@],,
  enable_xscrnsaver=no)
if test "x$enable_xscrnsaver" = "xyes"; then
  AC_CHECK_LIB(Xss, XScreenSaverQueryExtension,
    AC_DEFINE(HAS_XSCREENSAVER, 1, [ScreenSaver support])
    E_X_LIBS="-lXss $E_X_LIBS",
    enable_xscrnsaver=no
    AC_MSG_WARN([ScreenSaver support was requested but not found]),
    $X_LIBS -lXss -lXext -lX11)
fi

AC_ARG_ENABLE(xrandr,
  [  --enable-xrandr         compile with RandR support @<:@default=yes@:>@],,
  enable_xrandr=yes)
if test "x$enable_xrandr" = "xyes"; then
  AC_CHECK_LIB(Xrandr, XRRQueryExtension,
    AC_DEFINE(HAS_XRANDR, 1, [RandR support])
    E_X_LIBS="-lXrandr -lXrender $E_X_LIBS",
    enable_xrandr=no
    AC_MSG_WARN([RandR support was requested but not found]),
    $X_LIBS -lXrender -lXext -lX11)
  AC_CHECK_HEADERS(X11/extensions/Xrandr.h,,,[#include <X11/Xlib.h>])
fi

# FIXME - Do this properly
AC_ARG_ENABLE(composite,
  [  --enable-composite      compile with Composite support @<:@default=yes@:>@],,
  enable_composite=yes)
if test "x$enable_composite" = "xyes"; then
  AC_CHECK_LIB(Xcomposite, XCompositeQueryExtension,
    AC_DEFINE(HAS_COMPOSITE, 1, [Composite support])
    E_X_LIBS="-lXcomposite -lXdamage -lXfixes -lXrender $E_X_LIBS",
    enable_composite=no,
    $X_LIBS -lXext -lX11)
  AC_CHECK_HEADERS(X11/extensions/Xcomposite.h ,, enable_composite=no, [#include <X11/Xlib.h>])
  AC_CHECK_HEADERS(X11/extensions/Xdamage.h    ,, enable_composite=no, [#include <X11/Xlib.h>])
  AC_CHECK_HEADERS(X11/extensions/Xfixes.h     ,, enable_composite=no, [#include <X11/Xlib.h>])
  AC_CHECK_HEADERS(X11/extensions/Xrender.h    ,, enable_composite=no, [#include <X11/Xlib.h>])
  if test "x$enable_composite" != "xyes"; then
    AC_MSG_WARN([Composite support was requested but required component was not found])
  fi
fi
AM_CONDITIONAL(HAS_COMPOSITE, test "x$enable_composite" = "xyes")

AC_CHECK_LIB(Fridge,mass_quantities_of_bass_ale)
AC_CHECK_LIB(Fridge,mass_quantities_of_any_ale,, [
  echo "Warning: No ales were found in your refrigerator."
  echo "  We highly suggest that you rectify this situation immediately."
])

AC_ARG_ENABLE(roothacklib,
  [  --enable-roothacklib    build window mode helper library @<:@default=yes@:>@],,
  enable_roothacklib=yes) 
if test "x$enable_roothacklib" = "xyes"; then
  AC_CHECK_LIB(dl, dlopen, DLOPEN_LIBS=-ldl, enable_roothacklib=no)
  AC_SUBST(DLOPEN_LIBS)
fi
if test "x$enable_roothacklib" = "xyes"; then
  AC_DEFINE(USE_ROOTHACKLIB, 1, [Use window mode helper library])
fi
AM_CONDITIONAL(BUILD_ROOTHACKLIB, test "x$enable_roothacklib" = "xyes")

AC_ARG_ENABLE(gcc-warnings,
  [  --enable-gcc-warnings   enable GCC compiler warnings @<:@default=no@:>@],,
  enable_gcc_warnings=no) 
if test "x$enable_gcc_warnings" = "xyes"; then
  CFLAGS="$CFLAGS -W -Wall -Wmissing-prototypes -Wmissing-declarations -Wstrict-prototypes -Waggregate-return -Wcast-align -Wpointer-arith -Wshadow -Wwrite-strings #-Wunreachable-code"
fi

AC_SUBST(E_X_LIBS)

AC_OUTPUT([
Makefile
src/Makefile
dox/Makefile
dox/E-docs/Makefile
eesh/Makefile
epp/Makefile
lib/Makefile
man/Makefile
config/Makefile
config/pix/Makefile
themes/Makefile
scripts/Makefile
misc/Makefile
po/Makefile.in
intl/Makefile
e16.spec
])

if test "x$have_good_imlib2" != "xyes"; then
  echo "***************************************************************"
  echo "*** WARNING: imlib2 >= 1.2.0 was not detected               ***"
  echo "*** WARNING: If you indeed do not have this, expect trouble ***"
  echo "***************************************************************"
fi

echo
echo "------------------------------------------------------------------------"
echo "$PACKAGE Version $VERSION"
echo "------------------------------------------------------------------------"
echo
echo "Configuration summary"
echo
echo "Support for"
echo "  Localisation ................. $USE_NLS"
echo "  Sound ........................ $enable_sound"
echo "  Old GNOME hints .............. $enable_hints_gnome"
echo "  Zoom ......................... $enable_zoom"
echo "  Xinerama ..................... $enable_xinerama"
echo "  RandR ........................ $enable_xrandr"
echo "  Composite .................... $enable_composite"
echo "  Window mode helper library ... $enable_roothacklib"
echo
echo "Experimental options - DO NOT USE unless you know what you are doing"
echo "  Compile with ecore/ecore_x ... $enable_ecore"
echo "  Sync ......................... $enable_xsync"
echo "  ScreenSaver .................. $enable_xscrnsaver"
echo
echo "Installation Path .............. $prefix"
echo
echo "Compilation .................... make"
echo "Installation ................... make install"
echo

echo "***************************************************************"
echo "*** NOTE: If this is your first trip with version 0.16.8    ***"
echo "*** NOTE: you may want to take a look in docs/README-0.16.8 ***"
echo "***************************************************************"
