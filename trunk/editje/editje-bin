#!/usr/bin/env python
#
# Copyright (C) 2009 Samsung Electronics.
#
# This file is part of Editje.
#
# Editje is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# Editje is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with Editje. If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import re
from optparse import OptionParser

import elementary
import edje

from editje.editje import Editje
import editje.swapfile as swapfile
from editje.popup_win import PopupWindow

version = 0.9  # remember to bump when needed
vtext = "%prog" + str(version)
usage = "usage: %prog [file[:group]]"
parser = OptionParser(usage=usage, version=vtext)


def cancel(bt, pop):
    pop.hide()
    pop.delete()


def open_swap_error(bt, data):
    pop, option, sf, group = data
    sf.open(option)
    pop.hide()
    open_editje(sf, group)
    pop.delete()


def open_editje(sf, group):
    editje = Editje(sf)
    if group and group in edje.file_collection_list(sf.workfile):
        editje.group = group
    editje.show()

if __name__ == "__main__":
    elementary.init()
    elementary.finger_size_set(15)
    elementary.policy_set(elementary.ELM_POLICY_QUIT,
                          elementary.ELM_POLICY_QUIT_LAST_WINDOW_CLOSED)

    filegrp_re = re.compile(r"(.*\.ed[cj])(?:\:(.*))?")
    options, args = parser.parse_args()

    if args:
        if len(args) != 1:
            parser.print_usage()
            sys.exit(2)

        filegrp = args[0]

        try:
            r = filegrp_re.match(filegrp)
            if r:
                file_, group = r.groups()
            else:
                file_ = filegrp
                group = None
            sf = swapfile.SwapFile()
            sf.file = os.path.realpath(file_)
            sf.open()
        except swapfile.CacheAlreadyExists, e:
            pop = PopupWindow()
            pop.title = "Editje - Swap file already exists"

            lb = elementary.Label(pop)
            lb.label_set(
                "Swap file to " + file_ + " already exists.<br>" +
                "Another program may be editing the same file<br>" +
                "or an edition session for this file crashed.")
            pop.pack_end(lb)
            lb.show()

            pop.action_add("Ignore Swap", open_swap_error,
                           data=(pop, swapfile.REPLACE, sf, group))
            pop.action_add("Recover", open_swap_error,
                           data=(pop, swapfile.RESTORE, sf, group))
            pop.action_add("Abort", cancel, data=pop)

            pop.show()
        except swapfile.CompileError, e:
            pop = PopupWindow()
            pop.title = "Editje - Compiler Error"

            lb = elementary.Label(pop)
            lb.label_set("Compile Error: " + file_ + "<br>" + e.message)
            pop.pack_end(lb)
            lb.show()

            pop.action_add("OK", cancel, data=pop)

            pop.show()
        except Exception, e:
            pop = PopupWindow()
            pop.title = "Editje - File Error"

            lb = elementary.Label(pop)
            lb.label_set("Error with file: " + file_ + "<br>" + str(e))
            pop.pack_end(lb)
            lb.show()

            pop.action_add("OK", cancel, data=pop)

            pop.show()
        else:
            open_editje(sf, group)

    else:
        sf = swapfile.SwapFile()
        sf.file = ""
        sf.new = True
        sf.open()

        editje = Editje(sf)
        editje.group = "main"
        editje.show()

    elementary.run()
    elementary.shutdown()
