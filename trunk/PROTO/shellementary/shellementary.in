#!/usr/bin/env python
# -*- coding: utf-8 -*-
# import needed modules
# elementary - provides GUI
import elementary
# evas - for image scaling on buttons
import evas
# option parser - parse arguments
from optparse import OptionParser
from optparse import OptionGroup
# regular expressions
import re
# read from stdin
import sys

### TRANSLATIONS SECTION
# set locale
import locale
locale.setlocale(locale.LC_ALL, '')
# gettext - localization
import gettext
gettext.install('shellementary', '@prefix@/share/locale')

# exit elementary
def destroy(obj, event, data):
	elementary.exit()

# TODO
def cancel_callback(obj, event, data):
	elementary.exit()
	# TODO: better way to exit with value 1 on cancel
	global cancel_clicked
	cancel_clicked = True

### VERSION
shelm_version = "0.0.1"
# TODO: better way to exit with value 1 on cancel
cancel_clicked = False

### MACROS
# window
# syntax: window = create_window("testdialog", "Window title", destroy)
def create_window(window_name, window_title, window_destroy):
	## create a window
	window = elementary.Window(window_name, elementary.ELM_WIN_DIALOG_BASIC)
	# set its title
	window.title_set(window_title)
	# destroy callback
	window.destroy = (window_destroy)
	# do not show it, it is needed to show window at the end of everything
	# return it
	return window

# background
# syntax: background = create_background(window, "@prefix@/share/shellementary/bg.png", True)
def create_background(window_name, window_background, window_resizable):
	## create a background
	background = elementary.Background(window_name)
	# apply window background from arguments if set
	if window_background != None:
		background.file_set(window_background)
	# if set, make it resizable
	if window_resizable == True:
		background.size_hint_weight_set(1.0, 1.0)
	# return it
	return background

# a box
# syntax: box = create_box(window, True)
def create_box(window_name, is_horizontal):
	## create a horizontal box
	box = elementary.Box(window_name)
	# set it horizontal if needed
	box.horizontal_set(is_horizontal)
	# return it
	return box

# a frame
# syntax: frame = create_frame(window, True)
def create_frame(window_name, window_resizable):	
	## create a frame
	frame = elementary.Frame(window_name)
	# if set, make it resizable
	if window_resizable == True:
		frame.size_hint_weight_set(1.0, 1.0)
	# return it
	return frame
	

# button
# syntax: button = create_button(window, "@prefix@/share/shellementary/bt-icon.png", "Test button")
def create_button(window_name, button_icon, label):
	# create icon
	icon = elementary.Icon(window_name)
	# set image
	icon.file_set(button_icon)
	# scale it into a button
	icon.size_hint_aspect_set(evas.EVAS_ASPECT_CONTROL_VERTICAL, 1, 1)
	# show it
	icon.show()

	# create button
	button = elementary.Button(window_name)
	# set a label
	button.label_set(label)
	# set icon
	button.icon_set(icon)
	# return it
	return button

		
# label
# syntax: label = create_label(window, "Label text")
def create_label(window_name, text):
	## create a label
	label = elementary.Label(window_name)
	# set its text
	label.label_set(text)
	# return it
	return label
			

# scroller
# syntax: scroller = create_scroller(window, True)
def create_scroller(window_name, scroller_has_one_line):
	## create a scroller
	scroller = elementary.Scroller(window_name)
	# size hints
	scroller.size_hint_weight_set(1.0, 1.0)
	scroller.size_hint_align_set(-1.0, -1.0)
	# if set, make it just one line high
	if scroller_has_one_line == True:
		scroller.content_min_limit(0, 1)
	# return it
	return scroller

# entry
# syntax: entry = create_entry(window, True, "Test entry text", True, False, True)
def create_entry(window_name, entry_has_one_line, entry_text, entry_hide_text, entry_line_wrap, entry_editable):
	## create an entry
	entry = elementary.Entry(window_name)
	# if set, disable line wrap
	entry.line_wrap_set(entry_line_wrap)
	# set entry text
	if entry_text != None:
		entry.entry_set(entry.utf8_to_markup(str(entry_text)))
	# hide text if set
	entry.password_set(entry_hide_text)
	# size hints
	entry.size_hint_weight_set(1.0, 1.0)
	entry.size_hint_align_set(-1.0, -1.0)
	# if set, make it single line
	entry.single_line_set(entry_has_one_line)
	# if set, make it not editable
	entry.editable_set(entry_editable)
	# return it
	return entry

# icon - used in a simple_dialog
# syntax: icon = create_icon(window, "@prefix@/share/shellementary/icon.png")
def create_icon(window_name, iconfile):
	## create it
	icon = elementary.Icon(window_name)
	# set file
	icon.file_set(iconfile)
	# set scale
	icon.scale_set(0, 0)
	# return it
	return icon

# list
# syntax: list = create_list(window, ["item1", "item2", "item3"])
# a callback
def list_item_clicked(obj, event, data):
	global selected_item
	selected_item = data
# main function
def create_list(window_name, listitems):
	## create a list
	elmlist = elementary.List(window_name)
	# size hints
	elmlist.size_hint_weight_set(1.0, 1.0)
	elmlist.size_hint_align_set(-1.0, -1.0)
	# append listitems
	for item in listitems:
		elmlist.item_append(item, None, None, list_item_clicked, item)
	# and return it
	return elmlist

# clock
def create_clock(window_name, show_seconds, show_am_pm, time, is_editable):
	## create a clock
	clock = elementary.Clock(window_name)
	# show seconds?
	clock.show_seconds_set(show_seconds)
	# show am/pm?
	clock.show_am_pm_set(show_am_pm)
	# set time
	if time != None:
		timelist = time.split(',')
		clock.time_set(int(timelist[0]), int(timelist[1]), int(timelist[2]))
	# editable?
	clock.edit_set(is_editable)
	# return it
	return clock

## slider
# its callback when partial set
def slider_print_value(obj, event, data):
	print data.value
# create it
def create_slider(window_name, slider_value, slider_min_value, slider_max_value, slider_step, slider_partial, slider_hide_value, slider_inverted, slider_unit_format, slider_label, slider_icon, slider_vertical):
	## create a slider
	slider = elementary.Slider(window_name)
	# size hint
	slider.size_hint_align_set(-1.0, -1.0)
	# print partial?
	if slider_partial == True:
		slider.delay_changed = (slider_print_value, slider)
	# hide value?
	if slider_hide_value != True:
		if slider_step != None:
			slider.indicator_format_set("%"+str(slider_step)+"f")
		else:
			slider.indicator_format_set("%0.0f")
	# slider minimal and maximal value
	if slider_min_value == None:
		slider_min_value = 0
	if slider_max_value == None:
		slider_max_value = 100
	# set that value
	slider.min_max_set(float(slider_min_value), float(slider_max_value))
	# is slider inverted?
	if slider_inverted == True:
		slider.inverted_set(1)
	# slider unit format
	if slider_unit_format != None:
		slider.unit_format_set(str(slider_unit_format))
	# slider label
	if slider_label != None:
		slider.label_set(str(slider_label))
	# slider icon
	if slider_icon != None:
		icon = elementary.Icon(window_name)
		# set image
		icon.file_set(slider_icon)
		# show it
		icon.show()
		# add it
		slider.icon_set(icon)
	# is slider vertical?
	if slider_vertical == True:
		slider.horizontal_set(0)
	# slider value
	if slider_value != None:
		slider.value = float(slider_value)
	# return it
	return slider

###########################
##### DIALOG :: ENTRY #####
###########################
## callback - print entry contents
def entry_dialog_callback(obj, event, data):
	# print it without <br> at the end using regular expression
	print re.sub("<br>$", "", data.entry_get())
	elementary.exit()

## create a dialog
def entry_dialog(window_title, window_text, window_width, window_height, window_background, entry_text, entry_hide_text):
	## according to that if window title is set, create a window with default or custom window title
	if window_title != None:
		window = create_window("shellementary-entrydialog", window_title, destroy)
	else:
		window = create_window("shellementary-entrydialog", _("Enter something here"), destroy)

	## create a background
	background = create_background(window, window_background, True)
	# add it
	window.resize_object_add(background)

	## create a main frame
	frame = create_frame(window, True)
	# add it
	window.resize_object_add(frame)

	## create a main box
	box = create_box(window, False)
	# add it
	frame.content_set(box)

	## create a label
	if window_text != None:
		label = create_label(window, window_text)
		# add it
		box.pack_end(label)

	## create a scroller
	scroller = create_scroller(window, True)
	# add it
	box.pack_end(scroller)

	## create an entry
	entry = create_entry(window, True, entry_text, entry_hide_text, False, True)
	# add it to a scroller
	scroller.content_set(entry)

	## create a buttonbar box
	buttonbar = create_box(window, True)
	# add it
	box.pack_end(buttonbar)

	## create a Cancel button
	button_cancel = create_button(window, "@prefix@/share/shellementary/icon-cancel.png", _("Cancel"))
	# add it to a button bar
	buttonbar.pack_start(button_cancel)
	# callback on click
	button_cancel.clicked = (cancel_callback)

	## create an OK button
	button_ok = create_button(window, "@prefix@/share/shellementary/icon-ok.png", _("OK"))
	# add it
	buttonbar.pack_end(button_ok)
	# callback on click
	button_ok.clicked = (entry_dialog_callback, entry)

	## Set window size manually from arguments if set
	if window_width == None:
		window_width = window.size_get()[0]
	if window_height == None:
		window_height = window.size_get()[1]
	
	# finally resize
	window.resize(int(window_width), int(window_height))

	## show all things
	# first label if exists
	if window_text != None:
		label.show()
	# then everything else
	for x in [background, frame, box, scroller, entry, buttonbar, button_cancel, button_ok, window]:
		x.show()

##################################
# DIALOG :: ERROR, WARNING, INFO #
##################################
def simple_dialog(window_title, window_text, window_width, window_height, window_background, window_icccm_name, window_default_title, window_default_icon):
	## according to that if window title is set, create a window with default or custom window title
	if window_title != None:
		window = create_window("shellementary-"+str(window_icccm_name), window_title, destroy)
	else:
		window = create_window("shellementary-"+str(window_icccm_name), window_default_title, destroy)

	## create a background
	background = create_background(window, window_background, False)
	# add it
	window.resize_object_add(background)

	## create a main frame
	frame = create_frame(window, False)
	# add it
	window.resize_object_add(frame)

	## create a main box
	box = create_box(window, False)
	# add it
	frame.content_set(box)

	## create a horizontal box
	hbox = create_box(window, True)
	# add it
	box.pack_end(hbox)

	## create an icon
	icon = create_icon(window, window_default_icon)
	# add it
	hbox.pack_start(icon)

	## create a label
	if window_text != None:
		label = create_label(window, window_text)
		# add it
		hbox.pack_end(label)

	## create an OK button
	button_ok = create_button(window, "@prefix@/share/shellementary/icon-ok.png", _("OK"))
	# add it
	box.pack_end(button_ok)
	# callback on click
	button_ok.clicked = (destroy)

	## Set window size manually from arguments if set
	if window_width == None:
		window_width = window.size_get()[0]
	if window_height == None:
		window_height = window.size_get()[1]
	
	# finally resize
	window.resize(int(window_width), int(window_height))

	## show all things
	# first label if exists
	if window_text != None:
		label.show()
	# then everything else
	for x in [background, frame, box, hbox, icon, button_ok, window]:
		x.show()

###########################
### DIALOG :: TEXT INFO ###
###########################
## callback - print entry contents
def textinfo_dialog_callback(obj, event, data):
	# print it without <br> at the end using regular expression
	print data.markup_to_utf8(str(data.entry_get()))
	elementary.exit()

def textinfo_dialog(window_title, window_text, window_width, window_height, window_background, textinfo_filename, textinfo_editable, textinfo_nowrap):
	## according to that if window title is set, create a window with default or custom window title
	if window_title != None:
		window = create_window("shellementary-textinfodialog", window_title, destroy)
	else:
		window = create_window("shellementary-textinfodialog", _("Text information"), destroy)

	## create a background
	background = create_background(window, window_background, True)
	# add it
	window.resize_object_add(background)

	## create a main frame
	frame = create_frame(window, True)
	# add it
	window.resize_object_add(frame)

	## create a main box
	box = create_box(window, False)
	# add it
	frame.content_set(box)

	## create a label
	if window_text != None:
		label = create_label(window, window_text)
		# add it
		box.pack_end(label)

	## create a scroller
	scroller = create_scroller(window, False)
	# add it
	box.pack_end(scroller)

	## create an entry
	# first set text to insert
	# according to arguments, open the file or read stdin
	if textinfo_filename == None:
		input = sys.stdin
	else:
		input = open(textinfo_filename, "r")
	# read it
	content = input.read()
	# add a textinfo
	textinfo = create_entry(window, False, content, False, textinfo_nowrap, textinfo_editable)
	# append it
	scroller.content_set(textinfo)

	## create an OK button
	button_ok = create_button(window, "@prefix@/share/shellementary/icon-ok.png", _("OK"))
	# add it
	box.pack_end(button_ok)
	# callback on click
	button_ok.clicked = (textinfo_dialog_callback, textinfo)

	## Set window size manually from arguments if set
	if window_width == None:
		window_width = 300
	if window_height == None:
		window_height = 400
	
	# finally resize
	window.resize(int(window_width), int(window_height))

	## show all things
	# first label if exists
	if window_text != None:
		label.show()
	# then everything else
	for x in [background, frame, box, scroller, textinfo, button_ok, window]:
		x.show()

##########################
##### DIALOG :: LIST #####
##########################
## callback - print currently selected item
def list_dialog_callback(obj, event, data):
	try:
		print selected_item
		elementary.exit()
	except:
		elementary.exit()

def list_dialog(window_title, window_text, window_width, window_height, window_background, listitems):
	## according to that if window title is set, create a window with default or custom window title
	if window_title != None:
		window = create_window("shellementary-listdialog", window_title, destroy)
	else:
		window = create_window("shellementary-listdialog", _("Select an item from the list"), destroy)

	## create a background
	background = create_background(window, window_background, True)
	# add it
	window.resize_object_add(background)

	## create a main frame
	frame = create_frame(window, True)
	# add it
	window.resize_object_add(frame)

	## create a main box
	box = create_box(window, False)
	# add it
	frame.content_set(box)

	## create a label
	if window_text != None:
		label = create_label(window, window_text)
		# add it
		box.pack_end(label)

	## create a list
	# if not set in arguments, try to load listitems from stdin
	if listitems == []:
		listitems = re.split('[\n]+', sys.stdin.read())
		listitems.remove('')
	# create a list widget with items
	mainlist = create_list(window, listitems)
	# add it to a box
	box.pack_end(mainlist)

	## create a buttonbar box
	buttonbar = create_box(window, True)
	# add it
	box.pack_end(buttonbar)

	## create a Cancel button
	button_cancel = create_button(window, "@prefix@/share/shellementary/icon-cancel.png", _("Cancel"))
	# add it to a button bar
	buttonbar.pack_start(button_cancel)
	# callback on click
	button_cancel.clicked = (cancel_callback)

	## create an OK button
	button_ok = create_button(window, "@prefix@/share/shellementary/icon-ok.png", _("OK"))
	# add it
	buttonbar.pack_end(button_ok)
	# callback on click
	button_ok.clicked = (list_dialog_callback, mainlist)

	## Set window size manually from arguments if set
	if window_width == None:
		window_width = 200
	if window_height == None:
		window_height = 300
	
	# finally resize
	window.resize(int(window_width), int(window_height))

	## show all things
	# first label if exists
	if window_text != None:
		label.show()
	# go list :)
	mainlist.go()
	# then everything else
	for x in [background, frame, box, mainlist, buttonbar, button_cancel, button_ok, window]:
		x.show()

##########################
### DIALOG :: QUESTION ###
##########################
def question_dialog(window_title, window_text, window_width, window_height, window_background):
	## according to that if window title is set, create a window with default or custom window title
	if window_title != None:
		window = create_window("shellementary-questiondialog", window_title, destroy)
	else:
		window = create_window("shellementary-questiondialog", _("I have a question"), destroy)

	## create a background
	background = create_background(window, window_background, False)
	# add it
	window.resize_object_add(background)

	## create a main frame
	frame = create_frame(window, False)
	# add it
	window.resize_object_add(frame)

	## create a main box
	box = create_box(window, False)
	# add it
	frame.content_set(box)

	## create a horizontal box
	hbox = create_box(window, True)
	# add it
	box.pack_end(hbox)

	## create an icon
	icon = create_icon(window, "@prefix@/share/shellementary/icon-question.png")
	# add it
	hbox.pack_start(icon)

	## create a label
	if window_text != None:
		label = create_label(window, window_text)
		# add it
		hbox.pack_end(label)

	## create a buttonbar box
	buttonbar = create_box(window, True)
	# add it
	box.pack_end(buttonbar)

	## create a Cancel button
	button_cancel = create_button(window, "@prefix@/share/shellementary/icon-cancel.png", _("Cancel"))
	# add it to a button bar
	buttonbar.pack_start(button_cancel)
	# callback on click
	button_cancel.clicked = (cancel_callback)

	## create an OK button
	button_ok = create_button(window, "@prefix@/share/shellementary/icon-ok.png", _("OK"))
	# add it
	buttonbar.pack_end(button_ok)
	# callback on click
	button_ok.clicked = (destroy)

	## Set window size manually from arguments if set
	if window_width == None:
		window_width = window.size_get()[0]
	if window_height == None:
		window_height = window.size_get()[1]
	
	# finally resize
	window.resize(int(window_width), int(window_height))

	## show all things
	# first label if exists
	if window_text != None:
		label.show()
	# then everything else
	for x in [background, frame, box, hbox, icon, buttonbar, button_cancel, button_ok, window]:
		x.show()

#########################
#### DIALOG :: SCALE ####
#########################
## callback - print currently selected item
def scale_dialog_callback(obj, event, data):
	# print slider value
	print data.value
	elementary.exit()

def scale_dialog(window_title, window_text, window_width, window_height, window_background, slider_value, slider_min_value, slider_max_value, slider_step, slider_partial, slider_hide_value, slider_inverted, slider_unit_format, slider_label, slider_icon, slider_vertical):
	## according to that if window title is set, create a window with default or custom window title
	if window_title != None:
		window = create_window("shellementary-scaledialog", window_title, destroy)
	else:
		window = create_window("shellementary-scaledialog", _("Set a value"), destroy)

	## create a background
	background = create_background(window, window_background, True)
	# add it
	window.resize_object_add(background)

	## create a main frame
	frame = create_frame(window, True)
	# add it
	window.resize_object_add(frame)

	## create a main box
	box = create_box(window, False)
	# add it
	frame.content_set(box)

	## create a label
	if window_text != None:
		label = create_label(window, window_text)
		# add it
		box.pack_end(label)

	## create a slider
	slider = create_slider(window, slider_value, slider_min_value, slider_max_value, slider_step, slider_partial, slider_hide_value, slider_inverted, slider_unit_format, slider_label, slider_icon, slider_vertical)
	# add it
	box.pack_end(slider)

	## create a buttonbar box
	buttonbar = create_box(window, True)
	# add it
	box.pack_end(buttonbar)

	## create a Cancel button
	button_cancel = create_button(window, "@prefix@/share/shellementary/icon-cancel.png", _("Cancel"))
	# add it to a button bar
	buttonbar.pack_start(button_cancel)
	# callback on click
	button_cancel.clicked = (cancel_callback)

	## create an OK button
	button_ok = create_button(window, "@prefix@/share/shellementary/icon-ok.png", _("OK"))
	# add it
	buttonbar.pack_end(button_ok)
	# callback on click
	button_ok.clicked = (scale_dialog_callback, slider)

	## Set window size manually from arguments if set
	if window_width == None:
		window_width = window.size_get()[0]
	if window_height == None:
		window_height = window.size_get()[1]
	
	# finally resize
	window.resize(int(window_width), int(window_height))

	## show all things
	# first label if exists
	if window_text != None:
		label.show()
	# then everything else
	for x in [background, frame, box, slider, buttonbar, button_cancel, button_ok, window]:
		x.show()

#########################
#### DIALOG :: CLOCK ####
#########################
## callback - print time
def clock_dialog_callback(obj, event, data):
	# print time
	print data.time_get()
	elementary.exit()

def clock_dialog(window_title, window_text, window_width, window_height, window_background, seconds_show, am_pm_show, time, is_editable):
	## according to that if window title is set, create a window with default or custom window title
	if window_title != None:
		window = create_window("shellementary-clockdialog", window_title, destroy)
	else:
		window = create_window("shellementary-clockdialog", _("A clock :)"), destroy)

	## create a background
	background = create_background(window, window_background, True)
	# add it
	window.resize_object_add(background)

	## create a main frame
	frame = create_frame(window, True)
	# add it
	window.resize_object_add(frame)

	## create a main box
	box = create_box(window, False)
	# add it
	frame.content_set(box)

	## create a label
	if window_text != None:
		label = create_label(window, window_text)
		# add it
		box.pack_end(label)

	## create a clock
	clock = create_clock(window, seconds_show, am_pm_show, time, is_editable)
	# add it to a box
	box.pack_end(clock)

	## create a buttonbar box
	buttonbar = create_box(window, True)
	# add it
	box.pack_end(buttonbar)

	## create a Cancel button
	button_cancel = create_button(window, "@prefix@/share/shellementary/icon-cancel.png", _("Cancel"))
	# add it to a button bar
	buttonbar.pack_start(button_cancel)
	# callback on click
	button_cancel.clicked = (cancel_callback)

	## create an OK button
	button_ok = create_button(window, "@prefix@/share/shellementary/icon-ok.png", _("OK"))
	# add it
	buttonbar.pack_end(button_ok)
	# callback on click
	button_ok.clicked = (clock_dialog_callback, clock)

	## Set window size manually from arguments if set
	if window_width == None:
		window_width = window.size_get()[0]
	if window_height == None:
		window_height = window.size_get()[1]
	
	# finally resize
	window.resize(int(window_width), int(window_height))

	## show all things
	# first label if exists
	if window_text != None:
		label.show()
	# then everything else
	for x in [background, frame, box, clock, buttonbar, button_cancel, button_ok, window]:
		x.show()

#########################
#### DIALOG :: ABOUT ####
#########################
def about_dialog():
	## according to that if window title is set, create a window with default or custom window title
	window = create_window("shellementary-about", _("About Shellementary"), destroy)

	## create a background
	background = create_background(window, None, False)
	# add it
	window.resize_object_add(background)

	## create a main frame
	frame = create_frame(window, False)
	# add it
	window.resize_object_add(frame)

	## create a main box
	box = create_box(window, False)
	# add it
	frame.content_set(box)

	## create an icon
	icon = create_icon(window, "@prefix@/share/shellementary/logo.png")
	# add it
	box.pack_start(icon)

	## create a header label
	label = create_label(window, "<b>Shellementary "+shelm_version+"</>")
	## scale it
	label.scale_set(1.6)
	# add it
	box.pack_end(label)

	## create a text label
	sublabel = create_label(window, _("<b>Display dialogs from shell scripts</><br>Written as a zenity replacement, supports the same arguments<br><b>http://svn.enlightenment.org/svn/e/trunk/PROTO/shellementary</><br>Based on great Elementary toolkit by <b>raster</> and Python.<br><b>License:</> GNU General Public License v3"))
	box.pack_end(sublabel)

	## create a scroller
	scroller = create_scroller(window, True)
	# add it
	box.pack_end(scroller)
	
	## create an entry with author, credits and license	 
	# add a textinfo
	textinfo = create_entry(window, True, None, False, False, False)
	# set content
	textinfo.entry_set(_("<b>Author:</> quaker (quaker66@gmail.com)<br>"
			"<br>"
			"<b>Credits:</><br>"
			"<b>The Rasterman (raster)</> "
			"for Enlightenment DR17, great Elementary toolkit and help with developenment<br>"
			"<b>Gustavo Sverzut Barbieri (k-s)</> "
			"for python-efl bindings and help with developenment<br>"
			"<b>Simon Busch (morphis)</> "
			"for python-elementary bindings<br>"
			"<b>Johannes Schauer (josch)</> "
			"for help with python<br>"
			"<b>Jonathan Atton (watchwolf)</> "
			"for help with elementary<br>"))
	# add it
	scroller.content_set(textinfo)

	## create a buttonbar box
	buttonbar = create_box(window, True)
	# add it
	box.pack_end(buttonbar)

	## create an OK button
	button_close = create_button(window, "@prefix@/share/shellementary/icon-cancel.png", _("Close"))
	# add it
	buttonbar.pack_end(button_close)
	# callback on click
	button_close.clicked = (destroy)

	## show all things
	for x in [background, frame, box, icon, label, sublabel, scroller, textinfo, buttonbar, button_close, window]:
		x.show()

####################################
#### LOAD COMMANDLINE ARGUMENTS ####
####################################
def process_cmdline():
	## add option parser
	## syntax: 
	## yourgroup = OptionGroup(parser, "HEADING", "description")
	## yourgroup.add_option("-f", "--foo", dest="your_variable", help="string for help", default="default value", action="store|store_true|store_false|callback.. look at docs")
	## parser.add_option_group(yourgroup)

	### CUSTOM OPTION PARSER PRINT HEL METHOD - GET RID OF ENCODING ERRORS
	def _print_help(self, file=None):
		if file is None:
			file = sys.stdout
		file.write(self.format_help())
	## Replace old print_help with custom method
	OptionParser.print_help = _print_help

	## and init optionparser.
	version = "%prog "+shelm_version
	parser = OptionParser(version=version)

	###USABLE FOR ALL DIALOGS
	all_group = OptionGroup(parser, _("OPTIONS FOR ALL DIALOGS"), _("These are options which you can use for all dialogs."))
	# add items
	all_group.add_option("-t", "--title", dest="window_title", help=_("Set window title."), default=None)
	all_group.add_option("-T", "--text", dest="window_text", help=_("Set window text."), default=None)
	all_group.add_option("-W", "--width", dest="window_width", help=_("Set window width in pixels."), default=None)
	all_group.add_option("-H", "--height", dest="window_height", help=_("Set window height in pixels."), default=None)
	all_group.add_option("-b", "--window-bg", dest="window_bg", help=_("Set image as window background."), default=None)
	all_group.add_option("-a", "--about", dest="dialog_about", action="store_true", help=_("Show About dialog."), default=None)

	## show dialogs
	dialogs_group = OptionGroup(parser, _("OPTIONS TO SHOW DIALOGS"), _("These are options with which you can show dialogs."))
	# add items
	dialogs_group.add_option("--entry", dest="dialog_entry", action="store_true", help=_("Show entry dialog."), default=False)
	dialogs_group.add_option("--error", dest="dialog_error", action="store_true", help=_("Show error dialog."), default=False)
	dialogs_group.add_option("--warning", dest="dialog_warning", action="store_true", help=_("Show warning dialog."), default=False)
	dialogs_group.add_option("--info", dest="dialog_info", action="store_true", help=_("Show information dialog."), default=False)
	dialogs_group.add_option("--text-info", dest="dialog_textinfo", action="store_true", help=_("Show text information dialog."), default=False)
	dialogs_group.add_option("--list", dest="dialog_list", action="store_true", help=_("Show list dialog."), default=False)
	dialogs_group.add_option("--question", dest="dialog_question", action="store_true", help=_("Show question dialog."), default=False)
	dialogs_group.add_option("--clock", dest="dialog_clock", action="store_true", help=_("Show clock dialog."), default=False)
	dialogs_group.add_option("--scale", dest="dialog_scale", action="store_true", help=_("Show scale dialog."), default=False)

	## entry
	entry_dialog_group = OptionGroup(parser, _("ENTRY DIALOG ARGUMENTS"), _("Arguments which can be used only with entry dialog."))
	# add items
	entry_dialog_group.add_option("--entry-text", dest="entry_text", help=_("Set entry text"), default=None)
	entry_dialog_group.add_option("--hide-text", dest="entry_hide_text", action="store_true", help=_("Password-like entry"), default=False)

	## text info
	textinfo_dialog_group = OptionGroup(parser, _("TEXT INFO DIALOG ARGUMENTS"), _("Arguments which can be used only with text info dialog."))
	# add items
	textinfo_dialog_group.add_option("--filename", dest="textinfo_filename", help=_("Set file to show in text info, if you want to show text not from file, it reads from stdin."), default=None)
	textinfo_dialog_group.add_option("--editable", dest="textinfo_editable", action="store_true", help=_("Set it editable."), default=False)
	textinfo_dialog_group.add_option("--no-wrap", dest="textinfo_nowrap", action="store_false", help=_("Disable text wrap."), default=True)

	## clock dialog
	clock_dialog_group = OptionGroup(parser, _("CLOCK DIALOG ARGUMENTS"), _("Arguments which can be used only with clock dialog."))
	# add items
	clock_dialog_group.add_option("--show-seconds", dest="show_seconds", action="store_true", help=_("Show seconds in clock."), default=False)
	clock_dialog_group.add_option("--show-am-pm", dest="show_am_pm", action="store_true", help=_("Show AM/PM switch."), default=False)
	clock_dialog_group.add_option("--time", dest="time", help=_("Set time in format \"HOURS, MINUTES, SECONDS\". Works in combination with --clock-editable."), default=None)
	clock_dialog_group.add_option("--clock-editable", dest="clock_editable", action="store_true", help=_("Set it editable."), default=False)

	## scale dialog
	scale_dialog_group = OptionGroup(parser, _("SCALE DIALOG ARGUMENTS"), _("Arguments which can be used only with scale dialog."))
	# add items
	scale_dialog_group.add_option("--value", dest="slider_value", help=_("Set slider value."), default=None)
	scale_dialog_group.add_option("--min-value", dest="slider_min_value", help=_("Set slider minimal value."), default=None)
	scale_dialog_group.add_option("--max-value", dest="slider_max_value", help=_("Set slider maximal value."), default=None)
	scale_dialog_group.add_option("--step", dest="slider_step", help=_("Set slider step."), default=None)
	scale_dialog_group.add_option("--print-partial", dest="slider_print_partial", action="store_true", help=_("Print partial values."), default=False)
	scale_dialog_group.add_option("--hide-value", dest="slider_hide_value", action="store_true", help=_("Hide value."), default=False)
	scale_dialog_group.add_option("--slider-inverted", dest="slider_inverted", action="store_true", help=_("If set, slider will be inverted."), default=False)
	scale_dialog_group.add_option("--unit-format", dest="slider_unit_format", help=_("Set slider unit format - for example \"value: %0.1f\", that will print value: 156.1 or %0.2f will print 156.12, %0.3f 156.125 etc."), default=None)
	scale_dialog_group.add_option("--slider-label", dest="slider_label", help=_("Set slider label."), default=None)
	scale_dialog_group.add_option("--slider-icon", dest="slider_icon", help=_("Set slider icon."), default=None)
	scale_dialog_group.add_option("--slider-vertical", dest="slider_vertical", action="store_true", help=_("If set, slider will be vertical."), default=False)

	## include groups
	parser.add_option_group(all_group)
	parser.add_option_group(dialogs_group)
	parser.add_option_group(entry_dialog_group)
	parser.add_option_group(textinfo_dialog_group)
	parser.add_option_group(clock_dialog_group)
	parser.add_option_group(scale_dialog_group)
	# parse and return
	return parser.parse_args()

#########################
##### MAIN FUNCTION #####
#########################
def elm_main():
	## init elementary and start :)
	elementary.init()

	## load commandline arguments
	options, args = process_cmdline()
	
	## and execute functions according to arguments
	if options.dialog_entry == True:
		entry_dialog(
		options.window_title,
		options.window_text,
		options.window_width,
		options.window_height,
		options.window_bg,
		options.entry_text,
		options.entry_hide_text)
	elif options.dialog_error == True:
		simple_dialog(
		options.window_title,
		options.window_text,
		options.window_width,
		options.window_height,
		options.window_bg,
		"errordialog",
		_("Error!"),
		"@prefix@/share/shellementary/icon-error.png")
	elif options.dialog_warning == True:
		simple_dialog(
		options.window_title,
		options.window_text,
		options.window_width,
		options.window_height,
		options.window_bg,
		"warningdialog",
		_("Warning!"),
		"@prefix@/share/shellementary/icon-warning.png")
	elif options.dialog_info == True:
		simple_dialog(
		options.window_title,
		options.window_text,
		options.window_width,
		options.window_height,
		options.window_bg,
		"infodialog",
		_("Information"),
		"@prefix@/share/shellementary/icon-info.png")
	elif options.dialog_textinfo == True:
		textinfo_dialog(
		options.window_title,
		options.window_text,
		options.window_width,
		options.window_height,
		options.window_bg,
		options.textinfo_filename,
		options.textinfo_editable,
		options.textinfo_nowrap)
	elif options.dialog_list == True:
		list_dialog(
		options.window_title,
		options.window_text,
		options.window_width,
		options.window_height,
		options.window_bg,
		args)
	elif options.dialog_question == True:
		question_dialog(
		options.window_title,
		options.window_text,
		options.window_width,
		options.window_height,
		options.window_bg)
	elif options.dialog_clock == True:
		clock_dialog(
		options.window_title,
		options.window_text,
		options.window_width,
		options.window_height,
		options.window_bg,
		options.show_seconds,
		options.show_am_pm,
		options.time,
		options.clock_editable)
	elif options.dialog_scale == True:
		scale_dialog(
		options.window_title,
		options.window_text,
		options.window_width,
		options.window_height,
		options.window_bg,
		options.slider_value,
		options.slider_min_value,
		options.slider_max_value,
		options.slider_step,
		options.slider_print_partial,
		options.slider_hide_value,
		options.slider_inverted,
		options.slider_unit_format,
		options.slider_label,
		options.slider_icon,
		options.slider_vertical)
	elif options.dialog_about == True:
		about_dialog()
	else:
		about_dialog()

	####
	elementary.run() # run the program, handle all events etc
	elementary.shutdown() # cleanup and shutdown

#########################
#### RUN THE APP ####
#########################
elm_main()

# TODO: better way to exit with value 1 on cancel
if cancel_clicked == True:
	sys.exit(1)

