# get rid of that stupid cache mechanism
rm -f config.cache

AC_INIT(image-viewer, 0.1.0.0, enlightenment-devel@lists.sourceforge.net)
AC_PREREQ(2.52)
AC_CONFIG_SRCDIR(configure.in)

AM_INIT_AUTOMAKE(1.6 dist-bzip2)
AM_CONFIG_HEADER(config.h)

AC_C_BIGENDIAN
AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST

# Find edje_cc
PKG_CHECK_MODULES(EDJE, [edje >= 0.5.0])
AC_ARG_WITH(edje-cc,
  AC_HELP_STRING([--with-edje-cc=PATH], [specify a specific path to edje_cc]),
  [
    v=$withval;
    EDJE_CC=$v
  ],[
    EDJE_CC=$(pkg-config --variable=prefix edje)/bin/edje_cc
  ]
)
AC_SUBST(EDJE_CC)
AC_MSG_CHECKING([Which edje_cc to use])
AC_MSG_RESULT(${EDJE_CC})

PKG_CHECK_MODULES([ELEMENTARY], [
                   eina-0
                   eet
                   ecore
                   ecore-file
                   elementary
])

PKG_CHECK_MODULES(E, enlightenment, [
    have_enlightenment="yes"
    AC_DEFINE(HAVE_ENLIGHTENMENT, 1, [have enlightenment support])
], [
    have_enlightenment="no"
])

AM_CONDITIONAL(BUILD_E, test $have_enlightenment = yes)

AC_DEFUN([EFL_CHECK_PTHREAD],
[

dnl configure option

AC_ARG_ENABLE([pthread],
   [AC_HELP_STRING([--disable-pthread], [enable POSIX threads code @<:@default=no@:>@])],
   [
    if test "x${enableval}" = "xyes" ; then
       _efl_enable_pthread="yes"
    else
       _efl_enable_pthread="no"
    fi
   ],
   [_efl_enable_pthread="yes"]
)
AC_MSG_CHECKING([whether to build POSIX threads code])
AC_MSG_RESULT([${_efl_enable_pthread}])

dnl check if the compiler supports pthreads

_efl_have_pthread="no"

if test "x${_efl_enable_pthread}" = "xyes" ; then

   SAVE_CFLAGS=${CFLAGS}
   CFLAGS="-pthread"
   AC_LANG_PUSH([C])

   AC_COMPILE_IFELSE(
      [AC_LANG_PROGRAM([[
#include <pthread.h>
                       ]],
                       [[]])
      ],
      [
       _efl_have_pthread="yes"
       EFL_PTHREAD_CFLAGS="-pthread"
       EFL_PTHREAD_LIBS="-pthread"
       ]
   )

   AC_LANG_POP([C])
   CFLAGS=${SAVE_CFLAGS}
fi

AC_MSG_CHECKING([whether compiler need -pthread POSIX for threads support])
AC_MSG_RESULT([${_efl_have_pthread}])

if test "x${_efl_have_pthread}" = "xno" -a "x${_efl_enable_pthread}" = "xyes" ; then
   AC_CHECK_HEADER(pthread.h,
		[
		  _efl_have_pthread="yes"
		  EFL_PTHREAD_LIBS="-lpthread"
		],
		[
		  _efl_have_pthread="no"
		])

   AC_MSG_CHECKING([whether system support POSIX threads])
   AC_MSG_RESULT([${_efl_enable_pthread}])
fi

AC_SUBST(EFL_PTHREAD_CFLAGS)
AC_SUBST(EFL_PTHREAD_LIBS)

if test "x${_efl_have_pthread}" = "xyes" ; then
   AC_DEFINE(EFL_HAVE_PTHREAD, 1, [Define to mention that POSIX threads are supported])
fi

if test "x${_efl_have_pthread}" = "xyes" ; then
   ifelse([$1], , :, [$1])
else
   ifelse([$2], , :, [$2])
fi
])
EFL_CHECK_PTHREAD([have_pthread="yes"], [have_pthread="no"])

PKG_CHECK_MODULES(ETHUMB, ethumb, [
        if test $have_pthread = yes ; then
            have_ethumb="yes"
            AC_DEFINE(HAVE_ETHUMB, 1, [have ethumb support])
        else
            have_ethumb="no"
        fi
], [
    have_ethumb="no"
])

AM_CONDITIONAL(BUILD_ETHUMB, test $have_ethumb = yes)

PKG_CHECK_MODULES(EXIF, libexif, [
    have_libexif="yes"
    AC_DEFINE(HAVE_LIBEXIF, 1, [have libexif support])
], [
    have_libexif="no"
])

AM_CONDITIONAL(BUILD_LIBEXIF, test $have_libexif = yes)

AC_OUTPUT([
Makefile
src/Makefile
src/bin/Makefile
data/Makefile
data/desktop/Makefile
data/theme/Makefile
])
