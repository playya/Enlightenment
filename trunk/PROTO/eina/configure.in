# get rid of that stupid cache mechanism
rm -f config.cache

AC_INIT(eina, 0.0.1, enlightenment-devel@lists.sourceforge.net)
AC_PREREQ(2.52)
AC_CONFIG_SRCDIR(configure.in)
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_ISC_POSIX

AM_INIT_AUTOMAKE(1.6 dist-bzip2)
AM_CONFIG_HEADER(config.h)

AC_LIBTOOL_WIN32_DLL
define([AC_LIBTOOL_LANG_CXX_CONFIG], [:])dnl
define([AC_LIBTOOL_LANG_F77_CONFIG], [:])dnl
AC_PROG_LIBTOOL

VMAJ=`echo $PACKAGE_VERSION | awk -F. '{printf("%s", $1);}'`
VMIN=`echo $PACKAGE_VERSION | awk -F. '{printf("%s", $2);}'`
VMIC=`echo $PACKAGE_VERSION | awk -F. '{printf("%s", $3);}'`
SNAP=`echo $PACKAGE_VERSION | awk -F. '{printf("%s", $4);}'`
version_info=`expr $VMAJ + $VMIN`":$VMIC:$VMIN"
AC_SUBST(VMAJ)
AC_SUBST(version_info)


### Needed information

MODULE_ARCH="$host_os-$host_cpu"
AC_SUBST(MODULE_ARCH)
AC_DEFINE_UNQUOTED(MODULE_ARCH, "${MODULE_ARCH}", "Module architecture")


### Additional options to configure

# Unit tests

AC_ARG_ENABLE([tests],
   [AC_HELP_STRING([--enable-tests], [enable tests @<:@default=no@:>@])],
   [
    if test "x${enableval}" = "xyes" ; then
       enable_tests="yes"
    else
       enable_tests="no"
    fi
   ],
   [enable_tests="no"]
)
AC_MSG_CHECKING([whether tests are built])
AC_MSG_RESULT([${enable_tests}])

# Coverage

AC_ARG_ENABLE([coverage],
   [AC_HELP_STRING([--enable-coverage], [compile with coverage profiling instrumentation @<:@default=no@:>@])],
   [
    if test "x${enableval}" = "xyes" ; then
       enable_coverage="yes"
    else
       enable_coverage="no"
    fi
   ],
   [enable_coverage="no"]
)
AC_MSG_CHECKING([whether to use profiling instrumentation])
AC_MSG_RESULT([$enable_coverage])

# Benchmarking tests

AC_ARG_ENABLE([benchmark],
   [AC_HELP_STRING([--enable-benchmark], [enable tests @<:@default=no@:>@])],
   [
    if test "x${enableval}" = "xyes" ; then
       enable_bench="yes"
    else
       enable_bench="no"
    fi
   ],
   [enable_bench="no"]
)
AC_MSG_CHECKING([whether benchmark are built])
AC_MSG_RESULT([${enable_bench}])
AM_CONDITIONAL(EINA_ENABLE_BENCH, test "x${enable_bench}" = "xyes")

# Ememoa memory pool

AC_ARG_ENABLE([ememoa],
   [AC_HELP_STRING([--enable-ememoa], [build ememoa memory pool module @<:@default=yes@:>@])],
   [
    if test "x${enableval}" = "xyes" ; then
       enable_ememoa="yes"
    else
       enable_ememoa="no"
    fi
   ],
   [enable_ememoa="yes"]
)
AC_MSG_CHECKING([whether to use ememoa for memory pool])
AC_MSG_RESULT([$enable_ememoa])

# Static linking

EINA_CHECK_STATIC([chained-pool], [chained pool])
EINA_CHECK_STATIC([ememoa-fixed], [ememoa fixed])
EINA_CHECK_STATIC([ememoa-unknown], [ememoa unknown])
EINA_CHECK_STATIC([pass-through], [pass through])


### Checks for libraries

PKG_PROG_PKG_CONFIG

# Evil library for compilation on Windows CE

case "$host_os" in
   mingw32ce* | cegcc*)
   PKG_CHECK_MODULES([EVIL], [evil])
   AC_DEFINE(HAVE_EVIL, 1, [Set to 1 if evil package is installed])
   ;;
esac

# Check library for unit tests

if test "x${enable_tests}" = "xyes" ; then
   PKG_CHECK_MODULES([CHECK],
      [check >= 0.9.5],
      [dummy="yes"],
      [enable_tests="no"]
   )
fi

AM_CONDITIONAL(EINA_ENABLE_TESTS, test "x${enable_tests}" = "xyes")

# Glib library for comparison in the benchmark

have_glib="no"
if test "x${enable_bench}" = "xyes" ; then
   PKG_CHECK_MODULES([GLIB],
      [glib-2.0],
      [have_glib="yes"],
      [have_glib="no"]
   )
fi

AM_CONDITIONAL(EINA_HAVE_GLIB, test "x${have_glib}" = "xyes")

# Evas library for comparison in the benchmark

have_evas="no"
if test "x${enable_bench}" = "xyes" ; then
   PKG_CHECK_MODULES([EVAS],
      [evas],
      [have_evas="yes"],
      [have_evas="no"]
   )
fi

AM_CONDITIONAL(EINA_HAVE_EVAS, test "x${have_evas}" = "xyes")

# Ecore library for comparison in the benchmark

have_ecore="no"
if test "x${enable_bench}" = "xyes" ; then
   PKG_CHECK_MODULES([ECORE],
      [ecore],
      [have_ecore="yes"],
      [have_ecore="no"]
   )
fi

AM_CONDITIONAL(EINA_HAVE_ECORE, test "x${have_ecore}" = "xyes")

# Check if we want to benchmark on real data
enable_bench_e17="no"
AC_ARG_ENABLE([benchmark-e17],
   [AC_HELP_STRING([--enable-benchmark-e17], [disable heavy benchmark @<:@default=no@:>@])],
   [
    if test "x${enableval}" = "xyes" ; then
       enable_bench_e17="yes"
    else
       enable_bench_e17="no"
    fi
   ],
   [enable_bench_e17="no"]
)
AC_MSG_CHECKING([whether e17 real data benchmark are built])
AC_MSG_RESULT([${enable_bench_e17}])
AM_CONDITIONAL(EINA_ENABLE_BENCH_E17, test "x${enable_bench_e17}" = "xyes")

# Check ememoa memory pool library

if test "x${enable_ememoa}" = "xyes" ; then
   PKG_CHECK_MODULES([EMEMOA],
      [ememoa >= 0.0.26 ],
      [enable_ememoa="yes"],
      [enable_ememoa="no"]
   )
fi

AM_CONDITIONAL(EINA_ENABLE_EMEMOA, test "x${enable_ememoa}" = "xyes")
if test "x${enable_ememoa}" = "xyes"; then
   AC_DEFINE(EINA_EMEMOA_SUPPORT, 1, [Use by the test suite to try ememoa mempool])
fi

### Checks for header files
AC_HEADER_ASSERT
AC_HEADER_DIRENT
AC_HEADER_TIME


### Checks for programs
AC_PROG_CC

# lcov program for coverage report

if test "x$enable_tests" = "xno" -a "x$enable_coverage" = "xyes" ; then
   AC_MSG_WARN([Coverage report requested but tests not being built. Run configure with --enable-tests])
   enable_coverage="no"
fi

if test "x$enable_coverage" = "xyes" ; then
   AC_CHECK_PROG(have_lcov, [lcov], [yes], [no])
   if test "x$have_lcov" = "xyes" ; then
      COVERAGE_CFLAGS="-fprofile-arcs -ftest-coverage"
      COVERAGE_LIBS="-lgcov"
# remove any optimisation flag and force debug symbols
      DEBUG_CFLAGS="-g -O0 -DDEBUG"
   else
      AC_MSG_WARN([lcov is not found, disable profiling instrumentation])
      enable_coverage="no"
   fi
fi
AC_SUBST(COVERAGE_CFLAGS)
AC_SUBST(COVERAGE_LIBS)

AM_CONDITIONAL(EINA_ENABLE_COVERAGE, test "x${enable_coverage}" = "xyes")

# doxygen program for documentation building

EFL_CHECK_DOXYGEN([build_doc="yes"], [build_doc="no"])

AM_CONDITIONAL(EINA_BUILD_DOC, test "x${build_doc}" = "xyes")


### Checks for types


### Checks for structures


### Checks for compiler characteristics
AC_C_CONST
AC_C_BIGENDIAN
AC_PROG_CC_STDC
AC_C___ATTRIBUTE__

EINA_CFLAGS="${COVERAGE_CFLAGS}"
case "${host_os}" in
   cegcc*)
      EINA_CFLAGS="${EINA_CFLAGS} ${EVIL_CFLAGS} -mwin32"
   ;;
   mingw*)
      EINA_CFLAGS="${EINA_CFLAGS} ${EVIL_CFLAGS}"
   ;;
esac
AC_SUBST(EINA_CFLAGS)

if test "x$enable_coverage" = "xyes" ; then
   CFLAGS="${DEBUG_CFLAGS}"
fi

if ! test "${VMIC}" = "x" ; then
   CFLAGS="${CFLAGS} -Wall -W -Wextra" # -Werror
fi


### Checks for linker characteristics
EINA_LIBS=""
lt_enable_auto_import=""
case "${host_os}" in
   mingw* | cegcc*)
      AC_DEFINE(EFL_EINA_BUILD, 1, [Define to mention that eina is built])
      EINA_LIBS="${COVERAGE_LIBS} ${EVIL_LIBS} -lm"
      lt_enable_auto_import="-Wl,--enable-auto-import"
   ;;
   *)
      EINA_LIBS="${COVERAGE_LIBS} -ldl -lrt -lm"
   ;;
esac
AC_SUBST(EINA_LIBS)
AC_SUBST(lt_enable_auto_import)


### Checks for library functions
AC_FUNC_ALLOCA


### Make the debug preprocessor configurable

AC_CONFIG_FILES([
Makefile
eina.pc
doc/Makefile
src/Makefile
src/include/Makefile
src/lib/Makefile
src/modules/Makefile
src/modules/mp/Makefile
src/modules/mp/chained_pool/Makefile
src/modules/mp/ememoa_fixed/Makefile
src/modules/mp/ememoa_unknown/Makefile
src/modules/mp/pass_through/Makefile
src/tests/Makefile
])

AC_OUTPUT

#####################################################################
## Info

echo
echo
echo
echo "------------------------------------------------------------------------"
echo "$PACKAGE $VERSION"
echo "------------------------------------------------------------------------"
echo
echo
echo "Configuration Options Summary:"
echo
echo "  Documentation........: ${build_doc}"
echo "  Tests................: ${enable_tests}"
echo "  Coverage.............: ${enable_coverage}"
echo "  Bench................: ${enable_bench}"
if test "x${enable_bench}" = "xyes" ; then
echo "    Glib...............: ${have_glib}"
echo "    Evas...............: ${have_evas}"
echo "    Ecore..............: ${have_ecore}"
echo "    E17 real data......: ${enable_bench_e17}"
fi
echo
echo "  Memory pool:"
echo "    Ememoa.............: ${enable_ememoa}"
echo
echo "  Static build of memory pools:"
echo "    Chained pool.......: ${enable_static_chained_pool}"
echo "    Ememoa fixed.......: ${enable_static_ememoa_fixed}"
echo "    Ememoa unknown.....: ${enable_static_ememoa_unknown}"
echo "    Pass through.......: ${enable_static_pass_through}"
echo
echo "  Installation.........: make install"
echo
echo "    prefix.............: $prefix"
echo
echo "Now type 'make' ('gmake' on some systems) to compile $PACKAGE,"
echo "and then afterwards as root (or the user who will install this), type"
echo "'make install'. Change users with 'su' or 'sudo' appropriately."
echo
