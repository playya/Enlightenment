group { name: "elm/layout/enjoy/page/songs-album";
	data {
		item: "homogeneous" "1";
		item: "cover_size" "128";
	}
	parts {
		part {
			name: "ejy.swallow.list";
			type: SWALLOW;
			description {
				state: "default" 0.0;
				rel1 {
					to_y: "ejy.swallow.cover";
					relative: 0.0 1.0;
					offset: 0 10;
				}
				rel2 {
					relative: 1.0 1.0;
					offset: -1 -1;
				}
			}
		}
		part {
			name: "ejy.swallow.index";
			type: SWALLOW;
			description {
				state: "default" 0.0;
				rel1.to: "ejy.swallow.list";
				rel2.to: "ejy.swallow.list";
			}
		}

		part {
			name: "ejy.swallow.cover";
			type: SWALLOW;
			description {
				aspect: 1.0 1.0;
				aspect_preference: VERTICAL;
				state: "default" 0.0;
				rel1 {
					relative: 0.0 0.0;
					offset: 8 0;
				}
				rel2 {
					relative: 0.0 0.0;
					offset: 135 127;
				}
			}
		}

		part {
			name: "infoarea";
			type: RECT;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				color: 255 255 255 255;
				rel1 {
					to: "ejy.swallow.cover";
					relative: 1.0 0.0;
					offset: 20 0;
				}
				rel2 {
					to_y: "ejy.swallow.cover";
					relative: 1.0 1.0;
					offset: -27 -1;
				}
			}
		}

		part {
			name: "ejy.text.album";
			type: TEXT;
			effect: TEXT_EFFECT_BOLD;
			scale: 1;
			mouse_events: 0;
			clip_to: "infoarea";
			description {
				state: "default" 0.0;
				TEXT_COLOR;
				align: 0.0 1.0;
				fixed: 1 1;
				rel1 {
					to: "infoarea";
					relative: 0.0 0.0;
					offset: 0 0;
				}
				rel2 {
					to: "infoarea";
					relative: 1.0 0.6;
					offset: -1 -1;
				}
				text {
					font: FONT_BOLD;
					align: 0.0 1.0;
					size: 18;
					size_range: 14 72;
					fit: 1 1;
					text: "";
				}
			}
		}

		part {
			name: "ejy.text.artist";
			type: TEXT;
			effect: TEXT_EFFECT;
			scale: 1;
			mouse_events: 0;
			clip_to: "infoarea";
			description {
				state: "default" 0.0;
				TEXT_COLOR_UNIMPORTANT;
				align: 0.0 0.0;
				fixed: 1 1;
				rel1 {
					to: "infoarea";
					relative: 0.0 0.6;
					offset: 0 1;
				}
				rel2 {
					to: "infoarea";
					relative: 1.0 1.0;
					offset: -1 -1;
				}
				text {
					font: FONT;
					align: 0.0 0.0;
					size: 14;
					min: 0 1;
					text: "";
				}
			}
		}
	}
}

#define RATING_STARS_WIDTH 480
#define RATING_STARS_HEIGHT 60
#define RATING_STARS_STEP 55
#define RATING_STARS_COUNT 5

#define MSG_VOLUME 1
#define MSG_POSITION 2
#define MSG_RATING 3
#define MSG_MUTE 4
#define MSG_LOOP 5
#define MSG_SHUFFLE 6

group {
	name: "elm/layout/enjoy/nowplaying";

	script {
		public cur_length;
		public mute;
		public minimal;

		public get_time_str(Float:time, time_str[6])
		{
			if (round(time) % 60 < 10)
				snprintf(time_str, 6, "%d:0%d", round(time) / 60, round(time) % 60);
			else
				snprintf(time_str, 6, "%d:%d", round(time) / 60, round(time) % 60);
		}
		public message(Msg_Type:type, id, ...){
			if (type == MSG_FLOAT_SET && id == MSG_POSITION) {
				new Float:position = getfarg(2);
				new Float:length = getfarg(3);
				if (length > 0)
					external_param_set_float(PART:"progress.slider", "value", position / length * 100);
				else
					external_param_set_float(PART:"progress.slider", "value", 0);

				new time_str[6];
				get_time_str(position, time_str);
				set_text(PART:"ejy.text.current_time", time_str);
				get_time_str(length, time_str);
				set_text(PART:"ejy.text.total_time", time_str);
				set_float(cur_length, length);
			} else if (type == MSG_INT && id == MSG_SHUFFLE) {
				external_param_set_bool(PART:"buttons.shuffle", "state", getarg(2));
			} else if (type == MSG_INT && id == MSG_LOOP) {
				external_param_set_bool(PART:"buttons.repeat", "state", getarg(2));
			}
		}
	}
	parts {
		images {
			image: "enjoy/sound_max.png" COMP;
			image: "enjoy/sound_min.png" COMP;
			image: "enjoy/sound_mute.png" COMP;
		}

		part {
			name: "area";
			type: RECT;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				color: 0 0 0 0;
			}
		}

		part {
			name: "title.bg";
			type: RECT;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				color: 0 0 0 0;
				rel2 {
					to_y: "stars.slider";
					offset: -1 5;
				}
			}
		}
		part {
			name: "buttons.bg";
			type: RECT;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				color: 0 0 0 0;
				align: 0.5 0.0;
				min: 0 50;
				rel1 {
					to_y: "title.bg";
					relative: 0.0 1.0;
					offset: 0 0;
				}
				rel2 {
					to_y: "buttons.shuffle";
					relative: 1.0 1.0;
					offset: 0 5;
				}
			}
			description {
				state: "minimal" 0.0;
				inherit: "default" 0.0;
				min: 0 0;
				visible: 0;
				rel2 {
					to_y: "title.bg";
					relative: 1.0 1.0;
					offset: -1 -1;
				}
			}
		}
		part {
			name: "cover.bg";
			type: RECT;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				color: 0 0 0 255;
				min: 130 130;
				rel1 {
					to_y: "buttons.bg";
					to_x: "ejy.text.title";
					relative: 0.0 1.0;
				}
				rel2 {
					to_y: "volume.bg";
					to_x: "ejy.text.title";
					relative: 1.0 0.0;
				}
			}
		}
		part {
			name: "volume.bg";
			type: RECT;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				color: 0 0 0 0;
				align: 0.5 1.0;
				min: 0 50;
				rel1 {
					to_y: "volume.slider";
					offset: 0 -4;
				}
			}
		}

		part {
			name: "ejy.text.title";
			type: TEXT;
			effect: TEXT_EFFECT_BOLD;
			scale: 1;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				align: 0.5 0.0;
				fixed: 1 1;
				rel1.offset: 26 8;
				rel2 {
					relative: 1.0 0.0;
					offset: -27 25;
				}
				TEXT_COLOR;
				text {
					font: FONT_BOLD;
					size: 14;
					min: 0 1;
					text: "title";
				}
			}
		}

		part {
			name: "ejy.text.current_time";
			type: TEXT;
			effect: TEXT_EFFECT_BOLD;
			scale: 1;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				TEXT_COLOR_UNIMPORTANT;
				align: 0.0 0.0;
				fixed: 1 0;
				rel1 {
					to_x: "ejy.text.title";
					to_y: "progress.slider";
					relative: 0.0 1.0;
					offset: 0 -11;
				}
				rel2 {
					to_x: "ejy.text.title";
					to_y: "progress.slider";
					relative: 0.0 1.0;
					offset: 0 -11;
				}
				text {
					font: FONT_BOLD;
					size: 12;
					min: 1 1;
					align: 0.0 0.0;
					text: "0:00";
				}
			}
			description {
				state: "minimal" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 0;
				color3: 255 255 255 0;
				visible: 0;
			}
		}
		part {
			name: "ejy.text.total_time";
			type: TEXT;
			effect: TEXT_EFFECT_BOLD;
			scale: 1;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				TEXT_COLOR_UNIMPORTANT;
				align: 1.0 0.0;
				fixed: 1 0;
				rel1 {
					to_x: "ejy.text.title";
					to_y: "progress.slider";
					relative: 1.0 1.0;
					offset: -1 -11;
				}
				rel2 {
					to_x: "ejy.text.title";
					to_y: "progress.slider";
					relative: 1.0 1.0;
					offset: -1 -11;
				}
				text {
					font: FONT_BOLD;
					size: 12;
					min: 1 1;
					align: 0.0 0.0;
					text: "0:00";
				}
			}
			description {
				state: "minimal" 0.0;
				inherit: "default" 0.0;
				align: 1.0 0.5;
				rel1 {
					to_x: "ejy.text.title";
					to_y: "progress.slider";
					relative: 1.0 0.5;
					offset: -1 0;
				}
				rel2 {
					to_x: "ejy.text.title";
					to_y: "progress.slider";
					relative: 1.0 0.5;
					offset: -1 0;
				}
			}
		}
		part {
			name: "progress.slider";
			type: EXTERNAL;
			source: "elm/slider";
			description {
				state: "default" 0.0;
				fixed: 1 1;
				rel1 {
					to_y: "ejy.text.title";
					relative: 0.0 1.0;
					offset: 6 20;
				}
				rel2 {
					to_y: "ejy.text.title";
					relative: 1.0 1.0;
					offset: -7 20;
				}
				params.double: "min" 0.0;
				params.double: "max" 100.0;
				params.double: "value" 0.0;
			}
			description {
				state: "minimal" 0.0;
				inherit: "default" 0.0;
				rel2 {
					to_x: "ejy.text.total_time";
					to_y: "ejy.text.title";
					relative: 0.0 1.0;
					offset: -7 20;
				}
			}
		}

		part {
			name: "stars.clipper";
			type: RECT;
			description {
				state: "default" 0.0;
			}
			description {
				state: "minimal" 0.0;
				color: 255 255 255 0;
				visible: 0;
			}
		}
		part { /* TODO: make slider able to do this rating */
			name: "stars.slider";
			type: GROUP;
			source: "group_rating_stars";
			clip_to: "stars.clipper";
			description {
				state: "default" 0.0;
				align: 0.5 0.0;
				rel1 {
					to_y: "progress.slider";
					relative: 0.0 1.0;
					offset: 0 0;
				}
				rel2 {
					to_y: "progress.slider";
					relative: 1.0 1.0;
					offset: 0 RATING_STARS_HEIGHT;
				}
			}
			description {
				state: "minimal" 0.0;
				inherit: "default" 0.0;
				rel2.offset: -1 -1;
				visible: 0;
			}
		}

		part {
			name: "buttons.clipper";
			type: RECT;
			description {
				state: "default" 0.0;
			}
			description {
				state: "minimal" 0.0;
				color: 255 255 255 0;
				visible: 0;
			}
		}

		part {
			name: "buttons.repeat";
			type: EXTERNAL;
			source: "elm/toggle";
			clip_to: "buttons.clipper";
			description {
				state: "default" 0.0;
				align: 0.0 0.0;
				fixed: 1 1;
				rel1 {
					to_x: "ejy.text.current_time";
					to_y: "title.bg";
					relative: 0.0 1.0;
					offset: -5 0; /* XXX TODO FIXME -5 due toggle offset! */
				}
				rel2 {
					to_x: "ejy.text.current_time";
					to_y: "title.bg";
					relative: 0.0 1.0;
					offset: -5 0; /* XXX TODO FIXME -5 due toggle offset! */
				}
				params.string: "label on" "Repeat ON";
				params.string: "label off" "Repeat OFF";
			}
			description {
				state: "minimal" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
		}
		part {
			name: "buttons.shuffle";
			type: EXTERNAL;
			source: "elm/toggle";
			clip_to: "buttons.clipper";
			description {
				state: "default" 0.0;
				align: 1.0 0.0;
				fixed: 1 1;
				rel1 {
					to_x: "ejy.text.total_time";
					to_y: "title.bg";
					relative: 1.0 1.0;
					offset: -1 0;
				}
				rel2 {
					to_x: "ejy.text.total_time";
					to_y: "title.bg";
					relative: 1.0 1.0;
					offset: -1 0;
				}
				params.string: "label on" "Shuffle ON";
				params.string: "label off" "Shuffle OFF";
			}
			description {
				state: "minimal" 0.0;
				inherit: "default" 0.0;
				visible: 0;
			}
		}

		part {
			name: "ejy.swallow.cover";
			type: SWALLOW;
			mouse_events: 0;
			description {
				state: "default" 0.0;
				aspect_preference: BOTH;
				rel1 {
					to: "cover.bg";
					offset: 1 1;
				}
				rel2 {
					to: "cover.bg";
					offset: -2 -2;
				}
			}
		}

		part {
			name: "volume.min";
			type: IMAGE;
			description {
				image.normal: "enjoy/sound_min.png";
				aspect_preference: BOTH;
				aspect: 1.133 1.0;
				min: 34 30;
				fixed: 1 1;
				align: 0.0 0.5;
				rel1 {
					to_y: "volume.bg";
					offset: 10 10;
				}
				rel2 {
					relative: 0.0 1.0;
					offset: 75 -11;
				}
			}
		}
		part {
			name: "volume.mute";
			type: IMAGE;
			description {
				image.normal: "enjoy/sound_mute.png";
				color: 255 255 255 0;
				fixed: 1 1;
				visible: 0;
				rel1.to: "volume.min";
				rel2.to: "volume.min";
			}
			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255;
				visible: 1;
			}
		}

		part {
			name: "volume.slider";
			type: EXTERNAL;
			source: "elm/slider";
			description {
				align: 0.5 1.0;
				fixed: 1 1;
				rel1 {
					to_x: "volume.min";
					relative: 1.0 1.0;
					offset: 5 -1;
				}
				rel2 {
					to_x: "volume.max";
					relative: 0.0 1.0;
					offset: -6 -5;
				}
				params.double: "min" 0.0;
				params.double: "max" 100.0;
				params.double: "value" 80.0;
			}
		}

		part {
			name: "volume.max";
			type: IMAGE;
			mouse_events: 0;
			description {
				image.normal: "enjoy/sound_max.png";
				aspect_preference: BOTH;
				aspect: 1.133 1.0;
				fixed: 1 1;
				min: 34 30;
				align: 1.0 0.5;
				rel1 {
					to_y: "volume.bg";
					relative: 1.0 0.0;
					offset: -76 10;
				}
				rel2.offset: -11 -11;
			}
			description {
				state: "minimal" 0.0;
				inherit: "default" 0.0;
				min: 0 0;
				rel1 {
					relative: 1.0 1.0;
					offset: -11 -11;
				}
				visible: 0;
			}
		}
	}
	programs {
		program {
			signal: "resize";
			script {
				new x, y, w, h;
				get_geometry(PART:"area", x, y, w, h);
				if ((h <= 420) || (w <= 320)) {
					if (!get_int(minimal)) {
						set_int(minimal, 1);
						run_program(PROGRAM:"go_minimal");
					}
				} else {
					if (get_int(minimal)) {
						set_int(minimal, 0);
						run_program(PROGRAM:"go_default");
					}
				}
			}
		}

		program {
			name: "go_minimal";
			action: ACTION_STOP;
			target: "go_default";
			target: "go_default_2";
			target: "go_default_3";
			after: "go_minimal_2";
		}
		program {
			name: "go_minimal_2";
			action: STATE_SET "minimal" 0.0;
			transition: LINEAR 0.2;
			target: "stars.clipper";
			target: "stars.slider";
			target: "buttons.clipper";
			target: "buttons.repeat";
			target: "buttons.shuffle";
			after: "go_minimal_3";
		}
		program {
			name: "go_minimal_3";
			action: STATE_SET "minimal" 0.0;
			transition: LINEAR 0.2;
			target: "ejy.text.current_time";
			target: "ejy.text.total_time";
			target: "progress.slider";
			target: "buttons.bg";
			target: "volume.max";
		}

		program {
			name: "go_default";
			action: ACTION_STOP;
			target: "go_minimal";
			target: "go_minimal_2";
			target: "go_minimal_3";
			after: "go_default_2";
		}
		program {
			name: "go_default_2";
			action: STATE_SET "default" 0.0;
			transition: LINEAR 0.2;
			target: "ejy.text.current_time";
			target: "ejy.text.total_time";
			target: "progress.slider";
			target: "buttons.bg";
			target: "volume.max";
			after: "go_default_3";
		}
		program {
			name: "go_default_3";
			action: STATE_SET "default" 0.0;
			transition: LINEAR 0.2;
			target: "stars.clipper";
			target: "stars.slider";
			target: "buttons.clipper";
			target: "buttons.repeat";
			target: "buttons.shuffle";
		}

		program {
			name: "buttons.shuffle,changed";
			source: "buttons.shuffle";
			signal: "changed";
			script {
				if (external_param_get_bool(PART:"buttons.shuffle", "state"))
					emit("ejy,shuffle,on", "ejy");
				else
					emit("ejy,shuffle,off", "ejy");
			}
		}
		program {
			name: "buttons.repeat,changed";
			source: "buttons.repeat";
			signal: "changed";
			script {
				if (external_param_get_bool(PART:"buttons.repeat", "state"))
					emit("ejy,repeat,on", "ejy");
				else
					emit("ejy,repeat,off", "ejy");
			}
		}
		program {
			name: "ejy,progress,changed";
			source: "progress.slider";
			signal: "changed";
			script {
				send_message(MSG_FLOAT, MSG_POSITION, (external_param_get_float(PART:"progress.slider", "value") * get_float(cur_length) / 100));
			}
		}
		program {
			name: "volume.slider,changed";
			source: "volume.slider";
			signal: "changed";
			script {
				send_message(MSG_FLOAT, MSG_VOLUME, (external_param_get_float(PART:"volume.slider", "value") / 100));
			}
		}
		program {
			name: "volume.slider,drag,stop";
			source: "volume.slider";
			signal: "slider,drag,stop";
			script {
				run_program(PROGRAM:"volume,unmute");
			}
		}
		program {
			name: "volume,mute";
			source: "volume.min";
			signal: "mouse,clicked,1";
			action: STATE_SET "visible" 0.0;
			transition: LINEAR 0.1;
			target: "volume.mute";
			after: "volume,mute,2";
		}
		program {
			name: "volume,mute,2";
			script {
				send_message(MSG_INT, MSG_MUTE, 1);
				external_param_set_str(PART:"volume.slider", "style", "disabled");
			}
		}

		program {
			name: "volume,unmute";
			source: "volume.mute";
			signal: "mouse,clicked,1";
			action: STATE_SET "default" 0.0;
			transition: LINEAR 0.1;
			target: "volume.mute";
			after: "volume,unmute,2";
		}
		program {
			name: "volume,unmute,2";
			script {
				send_message(MSG_INT, MSG_MUTE, 0);
				external_param_set_str(PART:"volume.slider", "style", "default");
			}
		}
	}
}

group {
	name: "group_rating_stars";
	min: RATING_STARS_WIDTH RATING_STARS_HEIGHT;
	max: RATING_STARS_WIDTH RATING_STARS_HEIGHT;

	images {
		image: "enjoy/rating_stars.png" COMP;
		image: "enjoy/rating_stars_highlight.png" COMP;
	}
	script {
		public is_mouse_down = 0;
		public current_rating = -1;

		public recalc(part_name, knob) {
			new mx, my, ox, oy, ow, oh, res;
			new Float:p;

			get_mouse(mx, my);
			get_geometry(part_name, ox, oy, ow, oh);

			res = mx - ox;
			if (res > 0) {
				p = Float:res / Float:ow;
				set_drag(knob, p, 0.0);
			}
			else
				set_drag(knob, 0.0, 0.0);
		}
		public send_drag_signal() {
			new Float:dx;
			new Float:dy;
			new rating;
			get_drag(PART:"rect_rating_stars_knob", dx, dy);
			rating = round(dx * (RATING_STARS_COUNT + 1), FLOOR);
			if (rating > 5)
				rating = 5;
			if (get_int(current_rating) != rating)
				{
					send_message(MSG_INT, MSG_RATING, rating);
					set_int(current_rating, rating);
				}
		}
		public message(Msg_Type:type, id, ...){
			if (type == MSG_INT && id == MSG_RATING)
				{
					new rating = getarg(2);
					new Float:position;
					position = float_div(rating, RATING_STARS_COUNT);
					set_drag(PART:"rect_rating_stars_knob", position, 0.0);
				}
		}
	}
	parts {
		part {
			name: "img_rating_stars";
			type: IMAGE;
			mouse_events: 0;
			description {
				min: RATING_STARS_WIDTH RATING_STARS_HEIGHT;
				max: RATING_STARS_WIDTH RATING_STARS_HEIGHT;
				image.normal: "enjoy/rating_stars.png";
			}
		}
		part {
			name: "img_rating_stars_highlight";
			type: IMAGE;
			clip_to: "rect_img_rating_stars_highlight";
			mouse_events: 0;

			description {
				image.normal: "enjoy/rating_stars_highlight.png";
				min: RATING_STARS_WIDTH RATING_STARS_HEIGHT;
				max: RATING_STARS_WIDTH RATING_STARS_HEIGHT;
			}
			description {
				state: "hidden" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 0;
			}
		}
		part {
			name: "rect_img_rating_stars_highlight";
			type: RECT;
			mouse_events: 0;

			description {
				step: RATING_STARS_STEP 0;
				rel1{
					to: "img_rating_stars";
					offset: 0 -1;
				}
				rel2 {
					to: "rect_rating_stars_knob";
					relative: 0.0 1.0;
					offset: (RATING_STARS_STEP-5) 0;
				}
			}

			description {
				state: "hidden" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 0;
			}
		}
		part {
			name: "rect_rating_stars_knob_confine";
			type: RECT;
			mouse_events: 0;

			description {
				color: 255 255 255 0;
				rel1 {
					to: "img_rating_stars";
					offset: 60 0;
				}
				rel2 {
					to: "img_rating_stars";
					offset: -100 -1;
				}
			}
		}
		part {
			name: "rect_rating_stars_knob";
			type: RECT;
			mouse_events: 1;

			dragable {
				confine: "rect_rating_stars_knob_confine";
				x: 1 RATING_STARS_STEP 1;
				y: 0 0 0 ;
			}

			description {
				min: 10 RATING_STARS_HEIGHT;
				max: 10 RATING_STARS_HEIGHT;
				color: 255 255 0 0;
			}
		}
		part {
			name: "rect_rating_stars_knob_confine_area";
			type: RECT;
			mouse_events: 1;
			description {
				state: "default" 0.0;
				color: 255 255 255 0;
				rel1.to: "rect_rating_stars_knob_confine";
				rel2.to: "rect_rating_stars_knob_confine";
			}
		}
		programs {
			program {
				name: "rect_rating_stars_knob_confine_show";
				signal: "show";
				source: "*";
				script {
					set_int(is_mouse_down, 0);
				}
			}
			program {
				name: "rect_rating_stars_knob_confine_clicked";
				signal: "mouse,clicked,1";
				source: "rect_rating_stars_knob_confine_area";
				script {
					recalc(PART:"rect_rating_stars_knob_confine_area", PART:"rect_rating_stars_knob");
				}
			}
			program {
				name: "rect_rating_stars_knob_confine_down";
				signal: "mouse,down,1";
				source: "rect_rating_stars_knob_confine_area";
				script {
					set_int(is_mouse_down, 1);
				}
			}
			program {
				name: "rect_rating_stars_knob_confine_up";
				signal: "mouse,up,1";
				source: "rect_rating_stars_knob_confine_area";
				script {
					set_int(is_mouse_down, 0);
					recalc(PART:"rect_rating_stars_knob_confine_area", PART:"rect_rating_stars_knob");
					send_drag_signal()
						}
			}
			program {
				name: "rect_rating_stars_knob_confine_move";
				signal: "mouse,move";
				source: "rect_rating_stars_knob_confine_area";
				script {
					if (get_int(is_mouse_down) == 1) {
						recalc(PART:"rect_rating_stars_knob_confine_area", PART:"rect_rating_stars_knob");
						send_drag_signal()
							}
				}
			}
			program {
				name: knob"_drag_stop";
				signal: "drag,stop";
				source: "knob";
				script {
					send_drag_signal()
						}
			}
		}
	}
}
