
group {
	name: "e/modules/clock/main";
	/* min: 64 64;
	 * max: 170 170; */

	script {
		public clock_cb(val) {
		new buf[11];
		new year, month, day, yearday, weekday, hour, minute;
		new Float:second;
		new v;

		date(year, month, day, yearday, weekday, hour, minute, second);
		v = round(second);
		timer(1.0 - (second - v), "clock_cb", 1);
		buf[0] = 0; 
		if (v < 10) {snprintf(buf, 10, "0%i", v);}
		else {snprintf(buf, 10, "%i", v);}
		set_state(PART:"seconds", buf, 0.0);
		v = minute;
		buf[0] = 0; 
		if (v < 10) {snprintf(buf, 10, "0%i", v);}
		else {snprintf(buf, 10, "%i", v);}
		set_state(PART:"minutes", buf, 0.0);
		v = ((hour % 12) * 5) + ((minute * 5) / 60);
		buf[0] = 0; 
		if (v < 10) {snprintf(buf, 10, "0%i", v);}
		else {snprintf(buf, 10, "%i", v);}
		set_state(PART:"hour", buf, 0.0);
		}
	}

	parts {
		part {
			name: "center";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 255 0 0 0;

				rel1 { 
					offset: 0 0; 
				}

				rel2 { 
					offset: -1 -1; 
				}
			}
		}

		part {
			name: "clock";
			type: IMAGE;

			description {
				state: "default" 0.0;
				image.normal: "clock/clock_bg.png";
				aspect: 1.0 1.0;
				aspect_preference: BOTH;

				rel1 { 
					to: "center"; 
					relative: 0.1 0.1; 
				}

				rel2 { 
					to: "center"; 
					relative: 0.9 0.9; 
				}
			}
		}

		# ifdef HAND_DESC
		#  undef HAND_DESC
		# endif
		# define HAND_DESC(IND,num) \
			description { \
				state: num 0.0; \
				inherit: "default" 0.0; \
				image { \
					normal: "clock/"IND"."cursor"."num".png"; \
				} \
			}

		#define HAND_PART(IND, COLOR) \
		part { \
			name: IND; \
			type: IMAGE; \
			mouse_events: 0; \
			description { \
				state: "default" 0.0; \
				align: 0.5 0.5; \
				aspect: 1.0 1.0; \
				aspect_preference: BOTH; \
				visible: 1; \
				color: COLOR; \
				rel1 { \
					to: "center"; \
					relative: 0.0 0.0; \
				} \
				rel2 { \
					to: "center"; \
					relative: 1.0 1.0; \
				} \
				image { \
					normal: "clock/"IND"."cursor".00.png"; \
				} \
			} \
			HAND_DESC(IND,"00") \
			HAND_DESC(IND,"01") \
			HAND_DESC(IND,"02") \
			HAND_DESC(IND,"03") \
			HAND_DESC(IND,"04") \
			HAND_DESC(IND,"05") \
			HAND_DESC(IND,"06") \
			HAND_DESC(IND,"07") \
			HAND_DESC(IND,"08") \
			HAND_DESC(IND,"09") \
			HAND_DESC(IND,"10") \
			HAND_DESC(IND,"11") \
			HAND_DESC(IND,"12") \
			HAND_DESC(IND,"13") \
			HAND_DESC(IND,"14") \
			HAND_DESC(IND,"15") \
			HAND_DESC(IND,"16") \
			HAND_DESC(IND,"17") \
			HAND_DESC(IND,"18") \
			HAND_DESC(IND,"19") \
			HAND_DESC(IND,"20") \
			HAND_DESC(IND,"21") \
			HAND_DESC(IND,"22") \
			HAND_DESC(IND,"23") \
			HAND_DESC(IND,"24") \
			HAND_DESC(IND,"25") \
			HAND_DESC(IND,"26") \
			HAND_DESC(IND,"27") \
			HAND_DESC(IND,"28") \
			HAND_DESC(IND,"29") \
			HAND_DESC(IND,"30") \
			HAND_DESC(IND,"31") \
			HAND_DESC(IND,"32") \
			HAND_DESC(IND,"33") \
			HAND_DESC(IND,"34") \
			HAND_DESC(IND,"35") \
			HAND_DESC(IND,"36") \
			HAND_DESC(IND,"37") \
			HAND_DESC(IND,"38") \
			HAND_DESC(IND,"39") \
			HAND_DESC(IND,"40") \
			HAND_DESC(IND,"41") \
			HAND_DESC(IND,"42") \
			HAND_DESC(IND,"43") \
			HAND_DESC(IND,"44") \
			HAND_DESC(IND,"45") \
			HAND_DESC(IND,"46") \
			HAND_DESC(IND,"47") \
			HAND_DESC(IND,"48") \
			HAND_DESC(IND,"49") \
			HAND_DESC(IND,"50") \
			HAND_DESC(IND,"51") \
			HAND_DESC(IND,"52") \
			HAND_DESC(IND,"53") \
			HAND_DESC(IND,"54") \
			HAND_DESC(IND,"55") \
			HAND_DESC(IND,"56") \
			HAND_DESC(IND,"57") \
			HAND_DESC(IND,"58") \
			HAND_DESC(IND,"59") \
		}

		HAND_PART("seconds", 255 255 255 255)
		HAND_PART("minutes", 255 255 255 255)
		HAND_PART("hour", 255 255 255 255)
	}

	programs {
		program {
			name: "init";
			signal: "load";
			source: "";
			script {
				clock_cb(0);
			}
		}
	}
}

group { name: "e/modules/clock/digital";
	min: 56 16;

	script {
		public do_seconds, do_24h, tick_timer;

		public clock_cb(val) {
			new year, month, day, yearday, weekday, hour, minute;
			new Float:second;
			new v, dosec, do24h, tim;
			new buf[32], bhour[3], bminute[3], bsecond[4], bampm[3];

			date(year, month, day, yearday, weekday, hour, minute, second);

			dosec = get_int(do_seconds);
			do24h = get_int(do_24h);

			if (do24h) {
				strcat(bampm, "");
				if (hour < 10)
					snprintf(bhour, sizeof(bhour), "0%d", hour);
				else
					snprintf(bhour, sizeof(bhour), "%d", hour);

			} else {
				v = hour % 12;

				if (hour >= 12)
					strcat(bampm, "pm");
				else
					strcat(bampm, "am");

				if (v == 0)
					v = 12;

				if (v < 10)
					snprintf(bhour, sizeof(bhour), "0%d", v);
				else
					snprintf(bhour, sizeof(bhour), "%d", v);
			}

			if (minute < 10)
				snprintf(bminute, sizeof(bminute), "0%d", minute);
			else
				snprintf(bminute, sizeof(bminute), "%d", minute);

			if (dosec) {
				v = round(second);
				if (v < 10)
					snprintf(bsecond, sizeof(bsecond), ":0%d", v);
				else
					snprintf(bsecond, sizeof(bsecond), ":%d", v);
			} else
				strcat(bsecond, "");

			snprintf(buf, sizeof(buf), "%s:%s%s%s",
			         bhour, bminute, bsecond, bampm);
			set_text(PART:"time", buf);

			if (dosec) {
				v = round(second);
				tim = timer(1.0 - (second - v), "clock_cb", 1);
			} else {
				tim = timer(60.0 - (second), "clock_cb", 1);
			}
			set_int(tick_timer, tim);
		}

		public restart_clock() {
			new tim;
			tim = get_int(tick_timer);
			if (tim) {
				cancel_timer(tim);
				set_int(tick_timer, 0);
			}
			clock_cb(0);
		}
	}

	parts {
		part { name: "time";
			type: TEXT;
			effect: SHADOW;
			description { state: "default" 0.0;
				TEXT_COLOR
				text {
					text_class: "clock";
					font: FONT;
					size: 14;
					fit: 1 1;
					min: 1 1;
					size_range: 9 72;
					text: "--:--";
				}
			}
		}

		part { name: "event";
			type: RECT;
			mouse_events: 1;
			description { state: "default" 0.0;
				color: 0 0 0 0;
			}
		}
	}

	programs {
		program { name: "init";
			signal: "load";
			source: "";
			script {
				clock_cb(0);
			}
		}
		program { name: "secon";
			signal: "e,state,seconds,on";
			source: "e";
			script {
				set_int(do_seconds, 1);
				restart_clock();
			}
		}
		program { name: "secoff";
			signal: "e,state,seconds,off";
			source: "e";
			script {
				set_int(do_seconds, 0);
				restart_clock();
			}
		}
		program { name: "24h";
			signal: "e,state,24h,on";
			source: "e";
			script {
				set_int(do_24h, 1);
				restart_clock();
			}
		}
		program { name: "12h";
			signal: "e,state,24h,off";
			source: "e";
			script {
				set_int(do_24h, 0);
				restart_clock();
			}
		}
	}
   }
