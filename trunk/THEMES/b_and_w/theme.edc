// TODO (immediate other than finish)
// frame
// preview (done)
// fileman (list mode)
// slider (done - review)
// 
// fileman (icon mode etc.)
// tlist
// label
// textblock
// entry (done)
// about
// theme_about
// resize (done - review)
// move (done - review)
// slider (done - review)
// slidesel
// exebuf
// toolbar
// transition
// deskpreview (done)
// color_well (done)
// cslider (done)
// fontpreview
// gadman
// spectrum (done)
// wizard (just placeholder and basics - wizard code not complete)


/*
 * So how do themes work? 
 * 
 * Themes DECLARE objects (groups of parts) inside a 'collections' section.
 * Each of these groups are an element of a theme - much like an image in a
 * web page with <img src=blah.jpg>, but MUCH more powerful. They can scale
 * without just being stretched or tiled, they can react to all sorts of events
 * from the user (mouse for example) or other logical events (like being shown
 * or hidden, etc.) or synthetic signals from enlightenment itself indicating
 * some new state.
 * 
 * Each group is split into a parts section that contains all the elements
 * that make up that group, and how they are laid out. Each part can have
 * multiple states - described in description sections. There must always be
 * at least a default description of value 0.0. After this there may possibly
 * be a programs section. This defines behavior and how the group will react
 * to events/signals.
 * 
 * A theme is simply made up of a LOT of these. If a group is not provided in
 * the theme you are using, it will fall back to the default theme to get the
 * element. It is assumed the default theme is 100% complete and provides
 * everything E needs. If this is not the case, there will be problems, so
 * replace the default theme with great care. As long as the theme you make is
 * just a normal "overlay" (and falls back to the default where things are
 * missing) Things will be fairly safe. If you want to make a full default
 * replacement you will need to methodically go through all of this file
 * and make sure you have replaced/provided everything here.
 */

/*
 * this section defined all the theme elements (a collection of groupings of
 * parts (images, text, rects etc.))
 */
collections { /* begin the collection of edje groups that are in this file */

/////////////////////////////////////////////////////////////////////////////
   /*** DEFAULT WALLPAPER ***/
   group { name: "e/desktop/background"; /* the name of the group */
      /* this section defines that images are to be included and how to
       * encode them */
      images {
	 image: "vgrad_dark.png" COMP; /* the encoding method is "COMP". this
					* is lossless, but compressed */
	 image: "grill_dark_tiny_pattern.png" COMP;
//	 image: "circle_shade.png" COMP;
      }
      /* this section actually contains the list of parts from bottom to top
       * (defining the layering/stacking order) */
      parts {
	 part { name: "background_image"; /* this is the base background */
	    description { state: "default" 0.0; /* its default state */
	       /* note a part has 1 or more states described here. Each state
		* has a name AND a value. If the value is not useful then set
		* it to 0.0. The names do not need to be unique within a part
		* but the name + value combination needs to be unique. At some
		* points edje is able to select a state given a value other
		* other than 0.0 - in that case Edje will find the state with
		* the same name but closest value to the one being asked for.
		* This allows you to create many states that act as a
		* meticulously defined series of states from 0.0 to 1.0
		* (example - a "fuel guage") where the theme may provide as many
		* or few as the designer wants, and edje will just chose the
		* closest match to what it wants. In almost all cases you will
		* not use this feature, but this explains the "0.0" you see
		* everywhere */
	       /* nb - i am using a shortcut notation. you can use this
		* parent.child: blah; in a key to avoid doing
		* parent { child: blah; }
		*/
	       image.normal: "vgrad_dark.png";  /* use the vgrad_dark.png im */
	       fill { /* now specify how the image is to fill the part */
		  smooth: 0; /* set smooth swcaling off */
		  size { 
		     relative: 0 1.0; /* X and Y point relative to the part
				       * as a whole for the size (dont scale
				       * in X but scale 100% in Y */
		     offset: 36 0; /* offsets from the relative scale point
				    * so here offset is 36 to the right in
				    * X and at the Y relative point. this
				    * means tile horizontally, but scale
				    * vertically */
		  }
	       }
	    }
	 }
	 part { name: "grill"; /* this is the overlay to look like a grill */
	    description { state: "default" 0.0;
	       image.normal: "grill_dark_tiny_pattern.png"; /* use the grill */
	       fill { /* set the fill to only tile - never scale at all */
		  size {
		     relative: 0 0; /* relative 0 0 so it never scales */
		     offset: 144 144; /* we know the grill image is 144x144
				       * so set the offset to this so it
				       * tiles perfectly */
		  }
	       }
	    }
	 }
/*	 part { name: "shade";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       image.normal: "circle_shade.png";
               fill.smooth: 0;
	    }
	 } */
      }
   }
   
/////////////////////////////////////////////////////////////////////////////
   /*** DEFAULT WINDOW BORDER ***/
   group { name: "e/widgets/border/default/border";
      /* more images - for the border specifically. remember each images {}
       * section fills a global images namespace, so if you re-use an image
       * between sections, only 1 copy is kept, so names here are unique. if
       * different image {} sections specify the same image but use different
       * compression specifications, the compression scheme is undefined and
       * may use any one of the schemes requested, so make sure you use the
       * same compression scheme */
      images {
	 image: "bd_top.png" COMP;
	 image: "bd_top_hilight.png" COMP;
	 image: "bd_bottom.png" COMP;
	 image: "bd_title_bg.png" COMP;
	 image: "bd_title_over.png" COMP;
	 image: "bd_resize_b.png" COMP;
	 image: "busy-1.png" COMP;
         image: "busy-2.png" COMP;
         image: "busy-3.png" COMP;
         image: "busy-4.png" COMP;
         image: "busy-5.png" COMP;
         image: "busy-6.png" COMP;
         image: "busy-7.png" COMP;
         image: "busy-8.png" COMP;
         image: "busy-9.png" COMP;
         image: "exclam.png" COMP;
	 image: "bd_button_close_shadow.png" COMP;
	 image: "bd_button_close_focused.png" COMP;
	 image: "bd_button_close_unfocused.png" COMP;
	 image: "bd_button_max_shadow.png" COMP;
	 image: "bd_button_max_focused.png" COMP;
	 image: "bd_button_max_unfocused.png" COMP;
	 image: "bd_button_min_shadow.png" COMP;
	 image: "bd_button_min_focused.png" COMP;
	 image: "bd_button_min_unfocused.png" COMP;
      }
      /* this would tell E that the border is not a solid rectanle, but is
       * shaped (has transparent sections) and so would follow a different
       * code path for such borders. the default is not shaped, so this is 
       * not enabled here, but left commented out for illustration purposes */
//      data.item: "shaped" "1";
      parts {
	 part { name: "top";
	    mouse_events: 0; /* accept no mouse events here */
	    description { state: "default" 0.0;
	       rel1 { /* this defines the top-left (rel1) point of the part
		       * and where it is placed. the below values are
		       * actually the default values, so there is no need
		       * to actually declare them. */
		  relative: 0.0 0.0; /* make this point relative to the top
				      * left of the whole eje object (there
				      * is no to: section so it's the whole
				      * object). note that the point is
				      * calculated as:
				      *   p.x = obj.width * relative.x
				      *   p.y = obj.height * relative.y
				      * (as the to item is the whole object)
				      */
		  offset: 0 0; /* and from the relative point, have an offset
				* of 0 pixels - i.e. - none */
	       }
	       rel2 {
		  relative: 1.0 1.0; /* the bottom-right is relative to the
				      * base of the title - this way the
				      * title region will scale based on font
				      * size */
		  offset: -1 -1; /* relative to the bottom right */
		  to_y: "title_base"; /* only y is relative to title_base. the
				       * rest is relative to the whole object
				       * (because its not specified) */
	       }
	       image { /* defin e the image to use */
		  normal: "bd_top.png"; /* the image */
		  border: 2 2 2 2; /* border scaling attributes. this is the
				    * number of pixels NOT to scale on the
				    * left, right, top and bottom edges of the
				    * image. this allows "bevelled" effects
				    * or anything similar to look correct and
				    * not scale/blur etc. along with the image
				    * when it needs resizing */
	       }
	    }
	 }
	 part { name: "bottom"; /* this is the bottom of the window */
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0; /* relative to the bottom-left of the edje
				      * but 4 pixels up */
		  offset: 0 -4;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	       image {
		  normal: "bd_bottom.png";
		  border: 2 2 0 0; /* the left and right pixels are not to
				    * be scaled when stretching */
	       }
	    }
	    description { state: "shaded" 0.0; /* when in a shaded state then
						* don't display this part */
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	    description { state: "max" 0.0; /* whem maximised too */
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "icon_area"; /* this is an invisible rectangle that we
				    * use to place icons within. we use this
				    * to keep it fixed as the "icone area" so
				    * the actual swallow part that swallows
				    * the icon can be moved/resized for
				    * animations */
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       align: 0.0 0.5; /* alignt to the left, but center vertically */
	       aspect: 1.0 1.0; /* prefer ans aspect of 1.0 (ie width / height
				 * is 1.0 - i.e. - square. aspect here is
				 * min and max aspect that will be "allowed"
				 * (since both min and max are 1.0 respectively
				 * in order). */
	       aspect_preference: VERTICAL; /* this means that the vertical
					     * axis controls aspect and the
					     * icon_area part size will be
					     * governed by the height of the
					     * part (the width simply following
					     * along behind) */
	       rel1 { /* rel1 - top-left corner of this part */
		  relative: 0.0 0.0;
		  offset: 2 2; /* 2 pixels in from the top-left of the border
				* corner */
	       }
	       rel2 {
		  relative: 0.0 1.0; /* bottom-right of this part is also 2
				      * pixels in from the left (but align will
				      * mean it goes to the right) and be 2
				      * pixels in from the bottom edge of
				      * "title_base" (remember rel2 is the
				      * pixel immediately OUTSIDE the part.
				      * i.e. x + width & y + height). */
		  offset: 2 -3;
		  to_y: "title_base";
	       }
	    }
	    description { state: "active" 0.0; /* and an active state */
	       inherit: "default" 0.0;
	       rel1 {
		  offset: 2 3; /* 1 pixel down from default so it looks like it
				* is pressed down a bit */
	       }
	       rel2 {
		  offset: 2 -2; /* same here - down 1 pixel from "default" */
	       }
	    }
	 }
	 part { name: "icon_area2"; /* this area is another invisible rect
				     * that is used for shuffling around parts
				     * that are relative to it. the states
				     * below are just a few "random" offsets
				     * to make it look like whatever is
				     * relative to icon_area2 is "jiggling"
				     * around */
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	    }
	    description { state: "uw0" 0.0; /* jiggle */
	       inherit: "default" 0.0;
	       rel1.offset: -3 -2;
	       rel2.offset: -4 -3;
	    }
	    description { state: "uw1" 0.0; /* jiggle some more */
	       inherit: "default" 0.0;
	       rel1.offset: 5 -2;
	       rel2.offset: 4 -3;
	    }
	    description { state: "uw2" 0.0; /* look at me - jiggling! */
	       inherit: "default" 0.0;
	       rel1.offset: -1 4;
	       rel2.offset: -2 3;
	    }
	    description { state: "uw3" 0.0; /* jiggling about */
	       inherit: "default" 0.0;
	       rel1.offset: -2 -1;
	       rel2.offset: -3 -2;
	    }
	    description { state: "uw4" 0.0; /* one more jiggle for the dummies */
	       inherit: "default" 0.0;
	       rel1.offset: -4 1;
	       rel2.offset: -5 0;
	    }
	 }
         part {
	    name: "busy"; /* this is an animation to spin a wheel when the app
			   * seems too busy to respond to pings */
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0; /* nomrally the busy part is not visible */
	       color: 255 255 255 0; /* and its alpha is 0 - se will fade it
				      * inm later so alpha to 0 (but 255 255
				      * 255 for white so we dont also go from
				      * dark to white while fading) */
	       max: 32 32; /* no bigger than 32x32 - but allow it to be
			    * smaller if needed */
	       aspect: 1.0 1.0; /* square aspect */
	       aspect_preference: BOTH; /* both axes determine aspect. that
					 * means that the icon area may
					 * be 100x50, but the aspect is 1.0
					 * so therefore it will be 50x50 as the
					 * max size. if the area is 50x100 it
					 * will still be 50x50 as it must fit
					 * WITHIN the bounds of BOTH axes */
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image {
		  tween:  "busy-1.png";
		  tween:  "busy-2.png";
		  tween:  "busy-3.png";
		  tween:  "busy-4.png";
		  tween:  "busy-5.png";
		  tween:  "busy-6.png";
		  tween:  "busy-7.png";
		  tween:  "busy-8.png";
		  normal: "busy-9.png"; /* and we use image tweening. that
					 * means that we flip through a series
					 * of images when moving TO this state
					 * over the transition time. it's like
					 * specifiying multiple frames of an
					 * animatin sequence. the "final"
					 * state is "normal". the images
					 * inbetween are the "tween" images
					 * listed in order working towards
					 * the "normal" image */
	       }
	    }
	    description {
	       state: "visible" 0.0; /* the visible state - inherit the
				      * default one as its all the same, but
				      * its visible and faded in */
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "e.swallow.icon"; /* finally a swallow part - this is
					 * just a placeholder to SWALLOW
					 * other external evas objects into
					 * this region and edje will control
					 * any object swallowed as if it were
					 * this part itself (move, resize,
					 * etc.) */
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area2";
	       rel2.to: "icon_area2";
	    }
	    description { state: "shrunk" 0.0;
	       inherit: "default" 0.0;
	       rel1.relative: 0.3 0.3;
	       rel2.relative: 0.7 0.7;
	    }
	 }
         part {
	    name: "urgent"; /* this is the urgnt part it is normally not
			     * visible, but when the window is in an
			     * urgent state (the app has set the urgency
			     * hint) then we go to the visible state */
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image.normal: "exclam.png";
	    }
	    description {
	       state: "visible" 0.0; /* and in the visible state put the
				      * exlamation image on top of the icon */
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
         part {
	    name: "urgent2"; /* this is another urgent element. it is actually
			      * zoomed out to be larger and faded out at the
			      * same time to give a "pulsating" look to the
			      * exclamation mark to bring attention to it */
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image.normal: "exclam.png";
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	    description {
	       state: "faded" 0.0;
	       inherit: "default" 0.0;
	       rel1.relative: -1.0 -1.0;
	       rel2.relative: 2.0 2.0;
	       visible: 1;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "e.text.title"; /* this is a text part - the black
				       * text on the white title top image */
	    type: TEXT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 1;
	       align: 0.0 0.0; /* align top and left */
	       rel1 {
		  relative: 1.0 0.0;
		  offset: 9 2;
		  to_x: "icon_area"; /* relative to the right side of the icon
				      * area but 9 pixels away */
	       }
	       rel2 {
		  relative: 1.0 0.0; /* and the bottom right is inset by 8
				      * pxiels from the right of "title_base"
				      * but as its aligned to the top we can
				      * keep this at 2 pixels from the top of
				      * the whole edje object and let alignment
				      * make it extend downward from that point
				      * with the text size defining the min size
				      * vertically below */
		  offset: -8 2;
		  to_x: "title_base";
	       }
	       color: 0 0 0 255; /* black */
	       color_class: "border_title"; /* give it a color class so people
					     * can re-color it if they want */
	       text {
		  font: "Sans:style=Bold,Edje-Vera-Bold"; /* the font is now
							   * complex. use the
							   * system sans font
							   * in a bold style,
							   * if possible, if
							   * not use the
							   * built-in vera
							   * bold font */
		  size: 10; /* size in pixels - 10 */
		  min: 0 1; /* the text will not determine minimum horizontal
			     * size but WILL determine minimal vertical size
			     * (thus 0 1 - horiz then vert flags) */
		  align: 0.0 0.0; /* align text to top-left of the region
				   * given */
		  text_class: "title_bar"; /* text class - so font and size
					    * can be changed by users */
	       }
	    }
	    description { state: "focused" 0.0; /* when the border is focused
						 * then make the text fade out
						 * and vanish */
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 0 0 0 0;
	    }
	 }
	 
	 part { name: "bt_close"; /* the close button shadow */
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       align: 1.0 0.5;
	       min: 22 22; /* min and max size are the same, so never
			    * resize this */
	       max: 22 22;
	       aspect: 1.0 1.0; /* square - always */
	       aspect_preference: VERTICAL; /* the vetical axis controls size
					     * when applying the aspect ratio
					     * hint above */
	       rel1 {
		  relative: 1.0 0.0;
		  offset: -2 1;
		  to_x: "top";
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -2 -2;
		  to_x: "top";
		  to_y: "top";
	       }
	       image.normal: "bd_button_close_shadow.png";
	    }
	 }	 
	 part { name: "bt_max"; /* maximize button shadow */
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       align: 1.0 0.5;
	       min: 22 22;
	       max: 22 22;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -2 1;
		  to_x: "bt_close"; /* left of the close button */
		  to_y: "top";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: -2 -2;
		  to_x: "bt_close"; /* left of the close button */
		  to_y: "top";
	       }
	       image.normal: "bd_button_max_shadow.png";
	    }
	 }	 
	 part { name: "bt_min"; /* minimize button shadow */
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       align: 1.0 0.5;
	       min: 22 22;
	       max: 22 22;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -2 1;
		  to_x: "bt_max"; /* left of the maximize button */
		  to_y: "top";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: -2 -2;
		  to_x: "bt_max"; /* left of the maximize button */
		  to_y: "top";
	       }
	       image.normal: "bd_button_min_shadow.png";
	    }
	 }
	 
	 part { name: "top_hilight"; /* an overlayed image to give the top of
				      * a border a shiny look - very subtle */
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
		  to: "top";
	       }
	       rel2 {
		  relative: 1.0 0.5;
		  offset: -1 0;
		  to: "top";
	       }
	       image {
		  normal: "bd_top_hilight.png";
	       }
               fill.smooth: 0;
	    }
	 }
	 
	 part { name: "buttons_unfoc"; /* this is a rect part used to clip &
					* thus control the visibility of a group
					* of other parts (the images for the
					* buttons themselves) with just 1 part
					* doing the control as it acts as a
					* master switch for all things clipped
					* to this part */
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255; /* visible and solid */
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0; /* invisible and transparent */
	    }
	 }
	 part { name: "bt_close_unfoc";
	    mouse_events: 0;
	    clip_to: "buttons_unfoc"; /* clipping (thus visible region and
				       * color + alpah is controlled by the
				       * clip object */
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       image.normal: "bd_button_close_unfocused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 part { name: "bt_max_unfoc";
	    mouse_events: 0;
	    clip_to: "buttons_unfoc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_max";
	       rel2.to: "bt_max";
	       image.normal: "bd_button_max_unfocused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 part { name: "bt_min_unfoc";
	    mouse_events: 0;
	    clip_to: "buttons_unfoc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_min";
	       rel2.to: "bt_min";
	       image.normal: "bd_button_min_unfocused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }

	 part { name: "buttons_foc"; /* another rect object for clipping */
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "bt_close_foc";
	    mouse_events: 0;
	    clip_to: "buttons_foc"; /* controlled by the other clip object */
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       image.normal: "bd_button_close_focused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 part { name: "bt_max_foc";
	    mouse_events: 0;
	    clip_to: "buttons_foc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_max";
	       rel2.to: "bt_max";
	       image.normal: "bd_button_max_focused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 part { name: "bt_min_foc";
	    mouse_events: 0;
	    clip_to: "buttons_foc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_min";
	       rel2.to: "bt_min";
	       image.normal: "bd_button_min_focused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 
	 part { name: "title_base"; /* an invisible rect part/object used for
				     * layout purposes */
	    type: RECT;
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: 0 0;
		  to_x: "icon_area";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: -3 4;
		  to_y: "e.text.title";
		  to_x: "bt_min";
	       }
	    }
	 }
	 part { name: "title_back";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  to: "title_base";
	       }
	       rel2 {
		  to: "title_base";
		  relative: 1.0 0.0;
	       }
	       image {
		  normal: "bd_title_bg.png";
		  border: 7 7 2 7;
	       }
               fill.smooth: 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       rel2 {
		  to: "title_base";
		  relative: 1.0 1.0;
	       }
	    }
	 }
	 
	 part { name: "title2"; /* this is interesting. it's another text part
				 * that also displays the title text, but
				 * normally is not visible. it is only made
				 * visibile when the window becomes focused.
				 * what is interesting is we tell it to source
				 * the text content from another part - i.e.
				 * the master "title" part which E sets the
				 * text of. when that changes this part also
				 * changes its text. this is a good way to
				 * use multiple text objects for effects and
				 * other things that can copy/mimic the content
				 * of another part */
	    type: TEXT;
	    mouse_events: 0;
	    effect: SOFT_SHADOW; /* different style to before - because its
				  * focused */
	    description { state: "default" 0.0;
	       visible: 0;
	       align: 0.0 1.0;
	       rel1 {
		  to_x: "e.text.title";
		  to_y: "title_back";
		  relative: 0.0 1.0;
		  offset: -1 0;
	       }
	       rel2 {
		  to_x: "e.text.title";
		  to_y: "title_back";
		  relative: 1.0 1.0;
		  offset: 0 0;
	       }
	       color: 224 224 224 255;
	       color3: 0 0 0 64;
	       color_class: "border_title";
	       text {
		  text_source: "e.text.title"; /* and here is the magic. tell
						* the text to be sourced from
						* another part */
                  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
                  align: 0.0 0.0;
		  min: 0 1;
		  text_class: "title_bar";
	       }
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 
	 part { name: "title_over";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to: "title_back";
	       rel2.to: "title_back";
	       image {
		  normal: "bd_title_over.png";
		  border: 7 7 2 7;
	       }
	       fill.smooth: 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 
	 part { name: "bottom_clip";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bottom";
	       rel2.to: "bottom";
	       color: 255 255 255 255;
	    }
	 }	 
	 part { name: "resize_b";
	    mouse_events:  0;
	    clip_to: "bottom_clip";
	    description { state: "default" 0.0;
	       min: 20 10;
	       max: 20 10;
	       rel1 {
		  to: "bottom";
		  relative: 0.5 0.0;
		  offset: 0 -10;
	       }
	       rel2 {
		  to: "bottom";
		  relative: 0.5 0.0;
		  offset: 0 -1;
	       }
	       image {
		  normal: "bd_resize_b.png";
	       }
	    }
	    description { state: "past" 0.0;
	       inherit: "default" 0.0;
	       rel1 {
		  relative: 0.5 1.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 0.5 1.0;
		  offset: 0 9;
	       }
	    }
	 }
	 
	 
	 part { name: "e.swallow.client"; /* this determines where the actual
					   * client window will be placed in
					   * the border design */
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 0;
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 -1;
		  to_y: "bottom";
	       }
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
		  to_y: "bottom";
	       }
	    }
	    description { state: "max" 0.0;
	       inherit: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 0;
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
		  to_y: "bottom";
	       }
	    }
	 }

	 /* these transparent rect parts are used for catching events in a way
	  * here objects for design don't affect the events. these parts
	  * are named speciifcally because E has config listening for specific
	  * signals (events) coming from these named parts and based on those
	  * will perform certain actions. these are actually all configurable
	  * by the user, so if they want, clicking the logical "titlebar" could
	  * close the window, not move it, and so on. the user decides this.
	  * the theme designer simply indicates the "logcal" use of the theme
	  * elements they have created */
	 part { name: "e.event.titlebar";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "title_base";
	       rel2.to: "title_base";
	       color: 0 0 0 0;
	    }
	 }
	 
	 part { name: "e.event.resize.t";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 3;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "e.event.resize.b";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 -4;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }

	 part { name: "e.event.resize.tl";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 0.0 0.0;
		  offset: 15 15;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "e.event.resize.tr";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: -16 0;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 15;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "e.event.resize.bl";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 -16;
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: 15 -1;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "e.event.resize.br";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 1.0 1.0;
		  offset: -16 -16;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 
	 part { name: "e.event.icon";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       color: 0 0 0 0;
	    }
	 }

	 part { name: "e.event.close";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       color: 0 0 0 0;
	    }
	 }
	 part { name: "e.event.minimize";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bt_min";
	       rel2.to: "bt_min";
	       color: 0 0 0 0;
	    }
	 }
	 part { name: "e.event.maximize";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bt_max";
	       rel2.to: "bt_max";
	       color: 0 0 0 0;
	    }
	 }
      }
      /* programs - these are basically snippets of simple logic to respond to
       * incoming signals (generated by signal emisions by code or events) */
      programs {
	 program { name: "focus_in"; /* name of the program. must be unique
				      * within the list of programs attached
				      * to a group of parts */
	    signal: "e,state,focused"; /* what signal triggers this program,
					* if any. this can also be a glob like
					* "mouse,down,*" for example. note
					* that globs are slower to match
					* and empty strings are literal matches
					* too */
	    source: "e"; /* the source of the signal - this must also match for
			  * the program to be run */
	    action: STATE_SET "focused" 0.0; /* the action the program will
					      * perform. in this case
					      * it will set the state to
					      * "focused" @ value 0.0 */
	    transition: LINEAR 0.2; /* the time for the transition of the
				     * action - it's a linear interpolation
				     * of states here over 0.2 seconds */
	    target: "title_back"; /* these are the targets for the action.
				   * i.e. which parts will have their state
				   * set to "focused" over 0.2 seconds */
	    target: "title2";
	    target: "title_over";
	    target: "buttons_foc";
	    target: "buttons_unfoc";
	    target: "e.text.title";
	 }
	 program { name: "focus_out"; /* this program is run when focus is
				       * removed from a window border */
	    signal: "e,state,unfocused";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.2;
	    target: "title_back";
	    target: "title2";
	    target: "title_over";
	    target: "buttons_foc";
	    target: "buttons_unfoc";
	    target: "e.text.title";
	 }
	 
	 program { name: "urgent"; /* this program is run when the border is
				    * meant to display an "urgent" state
				    * (the application has something
				    * important to show the user) */
	    signal: "e,state,urgent";
	    source: "e";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.5; /* instead of a linear transition
					 * this will vary from state A to B
					 * but slow down towards the end */
	    target: "urgent";
	    target: "urgent2";
	    after: "urgent2"; /* when this program and its transition are
			       * finished then chain (run) the "urgent2"
			       * program below. this way a series of actions
			       * and trnasitions can be chained together one
			       * after the other */
	 }
	 program { name: "urgent2";
            action: STATE_SET "faded" 0.0;
            transition: LINEAR 0.5;
	    target: "urgent2";
	    after: "urgent3";
	 }
	 program { name: "urgent3";
            action: STATE_SET "visible" 0.0;
	    target: "urgent2"; /* notice - no transition. when not specified
				* it is assumed that the action should happen
				* immediately with no transition over time */
	    after: "urgent2";
	 }
	 program { name: "urgentw0"; /* these ae a list of icon "wobble"
				      * programs to indicate urgency */
	    signal: "e,state,urgent";
	    source: "e";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.1;
	    target: "icon_area2";
	    after: "urgentw1";
	 }
	 program { name: "urgentw1";
            action: STATE_SET "uw1" 0.0;
            transition: DECELERATE 0.1;
	    target: "icon_area2";
	    after: "urgentw2";
	 }
	 program { name: "urgentw2";
            action: STATE_SET "uw2" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw3";
	 }
	 program { name: "urgentw3";
            action: STATE_SET "uw3" 0.0;
            transition: DECELERATE 0.1;
	    target: "icon_area2";
	    after: "urgentw4";
	 }
	 program { name: "urgentw4";
            action: STATE_SET "uw4" 0.0;
            transition: DECELERATE 0.1;
	    target: "icon_area2";
	    after: "urgentw0";
	 }
	 program { name: "not_urgent"; /* run when the window stops being
					* urgent */
	    signal: "e,state,not_urgent";
	    source: "e";
            action: ACTION_STOP; /* this action will stop other running programs
				  * that are currently active. the programs to
				  * stop are named in the targets below */
	    target: "urgentw0";
	    target: "urgentw1";
	    target: "urgentw2";
	    target: "urgentw3";
	    target: "urgentw4";
	    target: "urgent";
	    target: "urgent2";
	    target: "urgent3";
	    after: "not_urgent2";
	 }
	 program { name: "not_urgent2";
            action: STATE_SET "default" 0.0;
	    target: "urgent";
	    target: "urgent2";
	    target: "icon_area2";
	 }

	 program { name: "hung"; /* run when an app is known to be hung/not
				  * responding to ping requests */
	    signal: "e,state,hung";
	    source: "e";
            action: STATE_SET "shrunk" 0.0;
	    target: "e.swallow.icon";
            transition: DECELERATE 0.5;
	 }
	 program { name: "unhung"; /* when an app was hung but has started to
				    * respond again, this is run */
	    signal: "e,state,unhung";
	    source: "e";
            action: ACTION_STOP;
	    target: "busy_anim";
	 }
	 program { name: "unhung2";
	    signal: "e,state,unhung";
	    source: "e";
            action: STATE_SET "default" 0.0;
	    target: "e.swallow.icon";
	    target: "busy";
            transition: ACCELERATE 0.5;
	 }
         program { name: "busy_anim"; /* multiple programs can be triggered
				       * from the same signals so this is
				       * also run when an app becomes "hung" */
	    signal: "e,state,hung";
	    source: "e";
	    action: STATE_SET "visible" 0.0;
	    transition: LINEAR 0.3333;
	    target: "busy";
	    after: "busy_anim";
	 }
	 
// don't have states/anim for a generic iconify action
//	 program { name: "xx";
//	    signal: "e,action,iconify";
//	    source: "e";
//	 }
// don't have states/anim for a generic uniconify action
//	 program { name: "xx";
//	    signal: "e,action,uniconify";
//	    source: "e";
//	 }

// don't have states/anim for a generic maximize action
//	 program { name: "xx";
//	    signal: "e,action,maximize";
//	    source: "e";
//	 }
// don't have states/anim for a generic unmaximize action
//	 program { name: "xx";
//	    signal: "e,action,unmaximize";
//	    source: "e";
//	 }

	 program { name: "max_full"; /* run on fullscreen maximize */
	    signal: "e,action,maximize,fullscreen";
	    source: "e";
	    action: STATE_SET "max" 0.0;
	    target: "bottom";
	    target: "e.swallow.client";
	 }
	 program { name: "unmax_full"; /* run on unmaximize from fullscreen */
	    signal: "e,action,unmaximize,fullscreen";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "bottom";
	    target: "e.swallow.client";
	 }
	 
// don't have any animation or stat change to do at the start of shading
//	 program { name: "xx";
//	    signal: "e,state,shading";
//	    source: "e";
//	 }
	 program { name: "shade_end"; /* run when the window finishes its
				       * shading animation */
	    signal: "e,state,shaded";
	    source: "e";
	    action: STATE_SET "shaded" 0.0;
	    target: "bottom";
	    target: "e.swallow.client";
	    target: "e.event.resize.tl";
	    target: "e.event.resize.tr";
	    target: "e.event.resize.bl";
	    target: "e.event.resize.br";
	    target: "e.event.resize.t";
	    target: "e.event.resize.b";
	 }
	 program { name: "unshade_start"; /* run when the window starts
					   * unshading itself */
	    signal: "e,state,unshading";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "bottom";
	    target: "e.swallow.client";
	    target: "e.event.resize.tl";
	    target: "e.event.resize.tr";
	    target: "e.event.resize.bl";
	    target: "e.event.resize.br";
	    target: "e.event.resize.t";
	    target: "e.event.resize.b";
	 }
// don't have any animation or stat change to do at the end of unshading
//	 program { name: "xx";
//	    signal: "e,state,unshaded";
//	    source: "e";
//	 }
	 program { name: "resize_b_on";
	    signal: "mouse,in"; /* on mouse enter... */
	    source: "e.event.resize.b"; /* in this named part */
	    action: ACTION_STOP; /* stop the following programs */
	    target: "resize_b_on2";
	    target: "resize_b_on3";
	    after: "resize_b_on2"; /* then run... */
	 }
	 program { name: "resize_b_on2";
	    action: STATE_SET "default" 0.0;
	    target: "resize_b";
	    after: "resize_b_on3";
	 }
	 program { name: "resize_b_on3";
	    action: STATE_SET "past" 0.0;
	    transition: LINEAR 0.5;
	    target: "resize_b";
	    after: "resize_b_on2";
	 }
	 program { name: "resize_b_off";
	    signal: "mouse,out"; /* on mouse leave... */
	    source: "e.event.resize.b";
	    action: ACTION_STOP;
	    target: "resize_b_on";
	    target: "resize_b_on2";
	    target: "resize_b_on3";
	 }
	 
	 program { name: "icon_down";
	    signal: "mouse,down,*"; /* if any mouse button is pressed... */
	    source: "e.event.icon";
	    action: STATE_SET "active" 0.0;
	    target: "icon_area";
	 }
	 program { name: "icon_up";
	    signal: "mouse,up,*"; /* if any mouse button is released... */
	    source: "e.event.icon";
	    action: STATE_SET "default" 0.0;
	    target: "icon_area";
	 }
	 program { name: "bt_close_down";
	    signal: "mouse,down,*";
	    source: "e.event.close";
	    action: STATE_SET "active" 0.0;
	    target: "bt_close_unfoc";
	    target: "bt_close_foc";
	 }
	 program { name: "bt_close_up";
	    signal: "mouse,up,*";
	    source: "e.event.close";
	    action: STATE_SET "default" 0.0;
	    target: "bt_close_unfoc";
	    target: "bt_close_foc";
	 }
	 program { name: "bt_max_down";
	    signal: "mouse,down,*";
	    source: "e.event.maximize";
	    action: STATE_SET "active" 0.0;
	    target: "bt_max_unfoc";
	    target: "bt_max_foc";
	 }
	 program { name: "bt_max_up";
	    signal: "mouse,up,*";
	    source: "e.event.maximize";
	    action: STATE_SET "default" 0.0;
	    target: "bt_max_unfoc";
	    target: "bt_max_foc";
	 }
	 program { name: "bt_min_down";
	    signal: "mouse,down,*";
	    source: "e.event.minimize";
	    action: STATE_SET "active" 0.0;
	    target: "bt_min_unfoc";
	    target: "bt_min_foc";
	 }
	 program { name: "bt_min_up";
	    signal: "mouse,up,*";
	    source: "e.event.minimize";
	    action: STATE_SET "default" 0.0;
	    target: "bt_min_unfoc";
	    target: "bt_min_foc";
	 }
      }
   }

   /* more border types - see comments in the default border for information */
   /*** SHAPED WINDOW BORDER ***/
   group { name: "e/widgets/border/shaped/border";
      images {
	 image: "bd_top.png" COMP;
	 image: "bd_top_hilight.png" COMP;
	 image: "bd_bottom.png" COMP;
	 image: "bd_title_bg.png" COMP;
	 image: "bd_title_over.png" COMP;
	 image: "bd_resize_b.png" COMP;
	 image: "busy-1.png" COMP;
         image: "busy-2.png" COMP;
         image: "busy-3.png" COMP;
         image: "busy-4.png" COMP;
         image: "busy-5.png" COMP;
         image: "busy-6.png" COMP;
         image: "busy-7.png" COMP;
         image: "busy-8.png" COMP;
         image: "busy-9.png" COMP;
         image: "exclam.png" COMP;
	 image: "bd_button_close_shadow.png" COMP;
	 image: "bd_button_close_focused.png" COMP;
	 image: "bd_button_close_unfocused.png" COMP;
	 image: "bd_button_max_shadow.png" COMP;
	 image: "bd_button_max_focused.png" COMP;
	 image: "bd_button_max_unfocused.png" COMP;
	 image: "bd_button_min_shadow.png" COMP;
	 image: "bd_button_min_focused.png" COMP;
	 image: "bd_button_min_unfocused.png" COMP;
      }
      data.item: "shaped" "1";
      parts {
	 part { name: "top";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
		  to_y: "title_base";
	       }
	       image {
		  normal: "bd_top.png";
		  border: 2 2 2 2;
	       }
	    }
	 }
	 part { name: "bottom";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 -4;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	       image {
		  normal: "bd_bottom.png";
		  border: 2 2 0 0;
	       }
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	    description { state: "max" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "icon_area";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       align: 0.0 0.5;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 2 2;
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: 2 -3;
		  to_y: "title_base";
	       }
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1 {
		  offset: 2 3;
	       }
	       rel2 {
		  offset: 2 -2;
	       }
	    }
	 }
	 part { name: "icon_area2";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	    }
	    description { state: "uw0" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -3 -2;
	       rel2.offset: -4 -3;
	    }
	    description { state: "uw1" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 5 -2;
	       rel2.offset: 4 -3;
	    }
	    description { state: "uw2" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -1 4;
	       rel2.offset: -2 3;
	    }
	    description { state: "uw3" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -2 -1;
	       rel2.offset: -3 -2;
	    }
	    description { state: "uw4" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -4 1;
	       rel2.offset: -5 0;
	    }
	 }
         part {
	    name: "busy";
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       max: 32 32;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image {
		  tween:  "busy-1.png";
		  tween:  "busy-2.png";
		  tween:  "busy-3.png";
		  tween:  "busy-4.png";
		  tween:  "busy-5.png";
		  tween:  "busy-6.png";
		  tween:  "busy-7.png";
		  tween:  "busy-8.png";
		  normal: "busy-9.png";
	       }
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "e.swallow.icon";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area2";
	       rel2.to: "icon_area2";
	    }
	    description { state: "shrunk" 0.0;
	       inherit: "default" 0.0;
	       rel1.relative: 0.3 0.3;
	       rel2.relative: 0.7 0.7;
	    }
	 }
         part {
	    name: "urgent";
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image.normal: "exclam.png";
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
         part {
	    name: "urgent2";
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image.normal: "exclam.png";
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	    description {
	       state: "faded" 0.0;
	       inherit: "default" 0.0;
	       rel1.relative: -1.0 -1.0;
	       rel2.relative: 2.0 2.0;
	       visible: 1;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "e.text.title";
	    type: TEXT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 1;
	       align: 0.0 0.0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: 9 2;
		  to_x: "icon_area";
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -8 2;
		  to_x: "title_base";
	       }
	       color: 0 0 0 255;
	       color_class: "border_title";
	       text {
		  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
		  min: 0 1;
		  align: 0.0 0.0;
		  text_class: "title_bar";
	       }
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 0 0 0 0;
	    }
	 }
	 
	 part { name: "bt_close";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       align: 1.0 0.5;
	       min: 22 22;
	       max: 22 22;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: -2 1;
		  to_x: "top";
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -2 -2;
		  to_x: "top";
		  to_y: "top";
	       }
	       image.normal: "bd_button_close_shadow.png";
	    }
	 }	 
	 part { name: "bt_max";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       align: 1.0 0.5;
	       min: 22 22;
	       max: 22 22;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -2 1;
		  to_x: "bt_close";
		  to_y: "top";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: -2 -2;
		  to_x: "bt_close";
		  to_y: "top";
	       }
	       image.normal: "bd_button_max_shadow.png";
	    }
	 }	 
	 part { name: "bt_min";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       align: 1.0 0.5;
	       min: 22 22;
	       max: 22 22;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -2 1;
		  to_x: "bt_max";
		  to_y: "top";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: -2 -2;
		  to_x: "bt_max";
		  to_y: "top";
	       }
	       image.normal: "bd_button_min_shadow.png";
	    }
	 }
	 
	 part { name: "top_hilight";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
		  to: "top";
	       }
	       rel2 {
		  relative: 1.0 0.5;
		  offset: -1 0;
		  to: "top";
	       }
	       image {
		  normal: "bd_top_hilight.png";
	       }
               fill.smooth: 0;
	    }
	 }
	 
	 part { name: "buttons_unfoc";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "bt_close_unfoc";
	    mouse_events: 0;
	    clip_to: "buttons_unfoc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       image.normal: "bd_button_close_unfocused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 part { name: "bt_max_unfoc";
	    mouse_events: 0;
	    clip_to: "buttons_unfoc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_max";
	       rel2.to: "bt_max";
	       image.normal: "bd_button_max_unfocused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 part { name: "bt_min_unfoc";
	    mouse_events: 0;
	    clip_to: "buttons_unfoc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_min";
	       rel2.to: "bt_min";
	       image.normal: "bd_button_min_unfocused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }

	 part { name: "buttons_foc";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "bt_close_foc";
	    mouse_events: 0;
	    clip_to: "buttons_foc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       image.normal: "bd_button_close_focused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 part { name: "bt_max_foc";
	    mouse_events: 0;
	    clip_to: "buttons_foc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_max";
	       rel2.to: "bt_max";
	       image.normal: "bd_button_max_focused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 part { name: "bt_min_foc";
	    mouse_events: 0;
	    clip_to: "buttons_foc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_min";
	       rel2.to: "bt_min";
	       image.normal: "bd_button_min_focused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 
	 part { name: "title_base";
	    type: RECT;
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: 0 0;
		  to_x: "icon_area";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: -3 4;
		  to_y: "e.text.title";
		  to_x: "bt_min";
	       }
	    }
	 }
	 part { name: "title_back";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  to: "title_base";
	       }
	       rel2 {
		  to: "title_base";
		  relative: 1.0 0.0;
	       }
	       image {
		  normal: "bd_title_bg.png";
		  border: 7 7 2 7;
	       }
               fill.smooth: 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       rel2 {
		  to: "title_base";
		  relative: 1.0 1.0;
	       }
	    }
	 }
	 
	 part { name: "title2";
	    type: TEXT;
	    mouse_events: 0;
	    effect: SOFT_SHADOW;
	    description { state: "default" 0.0;
	       visible: 0;
	       align: 0.0 1.0;
	       rel1 {
		  to_x: "e.text.title";
		  to_y: "title_back";
		  relative: 0.0 1.0;
		  offset: -1 0;
	       }
	       rel2 {
		  to_x: "e.text.title";
		  to_y: "title_back";
		  relative: 1.0 1.0;
		  offset: 0 1;
	       }
	       color: 224 224 224 255;
	       color3: 0 0 0 64;
	       color_class: "border_title";
	       text {
		  text_source: "e.text.title";
                  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
                  align: 0.0 0.0;
		  min: 0 1;
		  text_class: "title_bar";
	       }
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 
	 part { name: "title_over";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to: "title_back";
	       rel2.to: "title_back";
	       image {
		  normal: "bd_title_over.png";
		  border: 7 7 2 7;
	       }
	       fill.smooth: 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 
	 part { name: "bottom_clip";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bottom";
	       rel2.to: "bottom";
	       color: 255 255 255 255;
	    }
	 }	 
	 part { name: "resize_b";
	    mouse_events:  0;
	    clip_to: "bottom_clip";
	    description { state: "default" 0.0;
	       min: 20 10;
	       max: 20 10;
	       rel1 {
		  to: "bottom";
		  relative: 0.5 0.0;
		  offset: 0 -10;
	       }
	       rel2 {
		  to: "bottom";
		  relative: 0.5 0.0;
		  offset: 0 -1;
	       }
	       image {
		  normal: "bd_resize_b.png";
	       }
	    }
	    description { state: "past" 0.0;
	       inherit: "default" 0.0;
	       rel1 {
		  relative: 0.5 1.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 0.5 1.0;
		  offset: 0 9;
	       }
	    }
	 }
	 
	 
	 part { name: "e.swallow.client";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 0;
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 -1;
		  to_y: "bottom";
	       }
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
		  to_y: "bottom";
	       }
	    }
	    description { state: "max" 0.0;
	       inherit: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 0;
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
		  to_y: "bottom";
	       }
	    }
	 }

	 part { name: "e.event.titlebar";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "title_base";
	       rel2.to: "title_base";
	       color: 0 0 0 0;
	    }
	 }
	 
	 part { name: "e.event.resize.t";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 3;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "e.event.resize.b";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 -4;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }

	 part { name: "e.event.resize.tl";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 0.0 0.0;
		  offset: 15 15;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "e.event.resize.tr";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: -16 0;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 15;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "e.event.resize.bl";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 -16;
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: 15 -1;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "e.event.resize.br";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 1.0 1.0;
		  offset: -16 -16;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 
	 part { name: "e.event.icon";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       color: 0 0 0 0;
	    }
	 }

	 part { name: "e.event.close";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       color: 0 0 0 0;
	    }
	 }
	 part { name: "e.event.minimize";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bt_min";
	       rel2.to: "bt_min";
	       color: 0 0 0 0;
	    }
	 }
	 part { name: "e.event.maximize";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bt_max";
	       rel2.to: "bt_max";
	       color: 0 0 0 0;
	    }
	 }
      }
      programs {
	 program {
	    name: "focus_in";
	    signal: "e,state,focused";
	    source: "e";
	    action: STATE_SET "focused" 0.0;
	    transition: LINEAR 0.2;
	    target: "title_back";
	    target: "title2";
	    target: "title_over";
	    target: "buttons_foc";
	    target: "buttons_unfoc";
	    target: "e.text.title";
	 }
	 program {
	    name: "focus_out";
	    signal: "e,state,unfocused";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.2;
	    target: "title_back";
	    target: "title2";
	    target: "title_over";
	    target: "buttons_foc";
	    target: "buttons_unfoc";
	    target: "e.text.title";
	 }
	 
	 program {
	    name:    "urgent";
	    signal:  "e,state,urgent";
	    source:  "e";
            action: STATE_SET "visible" 0.0;
	    target: "urgent";
	    target: "urgent2";
            transition: DECELERATE 0.5;
	    after: "urgent2";
	 }
	 program {
	    name:    "urgent2";
            action: STATE_SET "faded" 0.0;
	    target: "urgent2";
            transition: LINEAR 0.5;
	    after: "urgent3";
	 }
	 program {
	    name:    "urgent3";
            action: STATE_SET "visible" 0.0;
	    target: "urgent2";
	    after: "urgent2";
	 }
	 program {
	    name:    "urgentw0";
	    signal:  "e,state,urgent";
	    source:  "e";
            action: STATE_SET "default" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw1";
	 }
	 program {
	    name:    "urgentw1";
            action: STATE_SET "uw1" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw2";
	 }
	 program {
	    name:    "urgentw2";
            action: STATE_SET "uw2" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw3";
	 }
	 program {
	    name:    "urgentw3";
            action: STATE_SET "uw3" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw4";
	 }
	 program {
	    name:    "urgentw4";
            action: STATE_SET "uw4" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw0";
	 }
	 program {
	    name:    "not_urgent";
	    signal:  "e,state,not_urgent";
	    source:  "e";
            action: ACTION_STOP;
	    target: "urgentw0";
	    target: "urgentw1";
	    target: "urgentw2";
	    target: "urgentw3";
	    target: "urgentw4";
	    target: "urgent";
	    target: "urgent2";
	    target: "urgent3";
	    after: "not_urgent2";
	 }
	 program {
	    name:    "not_urgent2";
            action: STATE_SET "default" 0.0;
	    target: "urgent";
	    target: "urgent2";
	    target: "icon_area2";
	 }

	 program {
	    name:    "hung";
	    signal:  "e,state,hung";
	    source:  "e";
	    /* FIXME: */
            action: STATE_SET "shrunk" 0.0;
	    target: "e.swallow.icon";
            transition: DECELERATE 0.5;
	 }
	 program {
	    name:    "unhung";
	    signal:  "e,state,unhung";
	    source:  "e";
	    /* FIXME: */
            action:  ACTION_STOP;
	    target: "busy_anim";
	 }
	 program {
	    name:    "unhung2";
	    signal:  "e,state,unhung";
	    source:  "e";
	    /* FIXME: */
            action: STATE_SET "default" 0.0;
	    target: "e.swallow.icon";
	    target: "busy";
            transition: ACCELERATE 0.5;
	 }
         program {	 
	    name: "busy_anim";
	    signal:  "e,state,hung";
	    source:  "e";
	    action: STATE_SET "visible" 0.0;
	    transition: LINEAR 0.3333;
	    target: "busy";
	    after:  "busy_anim";
	 }
	 program {
	    name:    "max_full";
	    signal:  "e,action,maximize,fullscreen";
	    source:  "e";
	    action: STATE_SET "max" 0.0;
	    target: "bottom";
	    target: "e.swallow.client";
	 }
	 program {
	    name:    "unmax_full";
	    signal:  "e,action,unmaximize,fullscreen";
	    source:  "e";
	    action: STATE_SET "default" 0.0;
	    target: "bottom";
	    target: "e.swallow.client";
	 }
	 
	 program {
	    name: "shade_end";
	    signal: "e,state,shaded";
	    source: "e";
	    action: STATE_SET "shaded" 0.0;
	    target: "bottom";
	    target: "e.swallow.client";
	    target: "e.event.resize.tl";
	    target: "e.event.resize.tr";
	    target: "e.event.resize.bl";
	    target: "e.event.resize.br";
	    target: "e.event.resize.t";
	    target: "e.event.resize.b";
	 }
	 program {
	    name:    "unshade_start";
	    signal:  "e,state,unshading";
	    source:  "e";
	    action: STATE_SET "default" 0.0;
	    target: "bottom";
	    target: "e.swallow.client";
	    target: "e.event.resize.tl";
	    target: "e.event.resize.tr";
	    target: "e.event.resize.bl";
	    target: "e.event.resize.br";
	    target: "e.event.resize.t";
	    target: "e.event.resize.b";
	 }
	 program {
	    name: "resize_b_on";
	    signal: "mouse,in";
	    source: "e.event.resize.b";
	    action:  ACTION_STOP;
	    target: "resize_b_on2";
	    target: "resize_b_on3";
	    after: "resize_b_on2";
	 }
	 program {
	    name: "resize_b_on2";
	    action: STATE_SET "default" 0.0;
	    target: "resize_b";
	    after: "resize_b_on3";
	 }
	 program {
	    name: "resize_b_on3";
	    action: STATE_SET "past" 0.0;
	    transition: LINEAR 0.5;
	    target: "resize_b";
	    after: "resize_b_on2";
	 }
	 program {
	    name: "resize_b_off";
	    signal: "mouse,out";
	    source: "e.event.resize.b";
	    action:  ACTION_STOP;
	    target: "resize_b_on";
	    target: "resize_b_on2";
	    target: "resize_b_on3";
	 }
	 
	 program {
	    name: "icon_down";
	    signal: "mouse,down,*";
	    source: "e.event.icon";
	    action:  STATE_SET "active" 0.0;
	    target: "icon_area";
	 }
	 program {
	    name: "icon_up";
	    signal: "mouse,up,*";
	    source: "e.event.icon";
	    action:  STATE_SET "default" 0.0;
	    target: "icon_area";
	 }
	 program {
	    name: "bt_close_down";
	    signal: "mouse,down,*";
	    source: "e.event.close";
	    action:  STATE_SET "active" 0.0;
	    target: "bt_close_unfoc";
	    target: "bt_close_foc";
	 }
	 program {
	    name: "bt_close_up";
	    signal: "mouse,up,*";
	    source: "e.event.close";
	    action:  STATE_SET "default" 0.0;
	    target: "bt_close_unfoc";
	    target: "bt_close_foc";
	 }
	 program {
	    name: "bt_max_down";
	    signal: "mouse,down,*";
	    source: "e.event.maximize";
	    action:  STATE_SET "active" 0.0;
	    target: "bt_max_unfoc";
	    target: "bt_max_foc";
	 }
	 program {
	    name: "bt_max_up";
	    signal: "mouse,up,*";
	    source: "e.event.maximize";
	    action:  STATE_SET "default" 0.0;
	    target: "bt_max_unfoc";
	    target: "bt_max_foc";
	 }
	 program {
	    name: "bt_min_down";
	    signal: "mouse,down,*";
	    source: "e.event.minimize";
	    action:  STATE_SET "active" 0.0;
	    target: "bt_min_unfoc";
	    target: "bt_min_foc";
	 }
	 program {
	    name: "bt_min_up";
	    signal: "mouse,up,*";
	    source: "e.event.minimize";
	    action:  STATE_SET "default" 0.0;
	    target: "bt_min_unfoc";
	    target: "bt_min_foc";
	 }
      }
   }

   /*** NORESIZE WINDOW BORDER ***/
   group { name: "e/widgets/border/noresize/border";
      images {
	 image: "bd_top.png" COMP;
	 image: "bd_top_hilight.png" COMP;
	 image: "bd_title_bg.png" COMP;
	 image: "bd_title_over.png" COMP;
	 image: "busy-1.png" COMP;
         image: "busy-2.png" COMP;
         image: "busy-3.png" COMP;
         image: "busy-4.png" COMP;
         image: "busy-5.png" COMP;
         image: "busy-6.png" COMP;
         image: "busy-7.png" COMP;
         image: "busy-8.png" COMP;
         image: "busy-9.png" COMP;
         image: "exclam.png" COMP;
	 image: "bd_button_close_shadow.png" COMP;
	 image: "bd_button_close_focused.png" COMP;
	 image: "bd_button_close_unfocused.png" COMP;
	 image: "bd_button_max_shadow.png" COMP;
	 image: "bd_button_max_focused.png" COMP;
	 image: "bd_button_max_unfocused.png" COMP;
	 image: "bd_button_min_shadow.png" COMP;
	 image: "bd_button_min_focused.png" COMP;
	 image: "bd_button_min_unfocused.png" COMP;
      }
      parts {
	 part { name: "top";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
		  to_y: "title_base";
	       }
	       image {
		  normal: "bd_top.png";
		  border: 2 2 2 2;
	       }
	    }
	 }
	 part { name: "icon_area";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       align: 0.0 0.5;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 2 2;
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: 2 -3;
		  to_y: "title_base";
	       }
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1 {
		  offset: 2 3;
	       }
	       rel2 {
		  offset: 2 -2;
	       }
	    }
	 }
	 part { name: "icon_area2";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	    }
	    description { state: "uw0" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -3 -2;
	       rel2.offset: -4 -3;
	    }
	    description { state: "uw1" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 5 -2;
	       rel2.offset: 4 -3;
	    }
	    description { state: "uw2" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -1 4;
	       rel2.offset: -2 3;
	    }
	    description { state: "uw3" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -2 -1;
	       rel2.offset: -3 -2;
	    }
	    description { state: "uw4" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -4 1;
	       rel2.offset: -5 0;
	    }
	 }
         part {
	    name: "busy";
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       max: 32 32;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image {
		  tween:  "busy-1.png";
		  tween:  "busy-2.png";
		  tween:  "busy-3.png";
		  tween:  "busy-4.png";
		  tween:  "busy-5.png";
		  tween:  "busy-6.png";
		  tween:  "busy-7.png";
		  tween:  "busy-8.png";
		  normal: "busy-9.png";
	       }
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "e.swallow.icon";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area2";
	       rel2.to: "icon_area2";
	    }
	    description { state: "shrunk" 0.0;
	       inherit: "default" 0.0;
	       rel1.relative: 0.3 0.3;
	       rel2.relative: 0.7 0.7;
	    }
	 }
         part {
	    name: "urgent";
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image.normal: "exclam.png";
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
         part {
	    name: "urgent2";
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image.normal: "exclam.png";
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	    description {
	       state: "faded" 0.0;
	       inherit: "default" 0.0;
	       rel1.relative: -1.0 -1.0;
	       rel2.relative: 2.0 2.0;
	       visible: 1;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "e.text.title";
	    type: TEXT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 1;
	       align: 0.0 0.0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: 9 2;
		  to_x: "icon_area";
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -8 2;
		  to_x: "title_base";
	       }
	       color: 0 0 0 255;
	       color_class: "border_title";
	       text {
		  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
		  min: 0 1;
		  align: 0.0 0.0;
		  text_class: "title_bar";
	       }
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 0 0 0 0;
	    }
	 }
	 
	 part { name: "bt_close";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       align: 1.0 0.5;
	       min: 22 22;
	       max: 22 22;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: -2 1;
		  to_x: "top";
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -2 -2;
		  to_x: "top";
		  to_y: "top";
	       }
	       image.normal: "bd_button_close_shadow.png";
	    }
	 }	 
	 part { name: "bt_max";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       align: 1.0 0.5;
	       min: 22 22;
	       max: 22 22;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -2 1;
		  to_x: "bt_close";
		  to_y: "top";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: -2 -2;
		  to_x: "bt_close";
		  to_y: "top";
	       }
	       image.normal: "bd_button_max_shadow.png";
	    }
	 }	 
	 part { name: "bt_min";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       align: 1.0 0.5;
	       min: 22 22;
	       max: 22 22;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -2 1;
		  to_x: "bt_max";
		  to_y: "top";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: -2 -2;
		  to_x: "bt_max";
		  to_y: "top";
	       }
	       image.normal: "bd_button_min_shadow.png";
	    }
	 }
	 
	 part { name: "top_hilight";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
		  to: "top";
	       }
	       rel2 {
		  relative: 1.0 0.5;
		  offset: -1 0;
		  to: "top";
	       }
	       image {
		  normal: "bd_top_hilight.png";
	       }
               fill.smooth: 0;
	    }
	 }
	 
	 part { name: "buttons_unfoc";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "bt_close_unfoc";
	    mouse_events: 0;
	    clip_to: "buttons_unfoc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       image.normal: "bd_button_close_unfocused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 part { name: "bt_max_unfoc";
	    mouse_events: 0;
	    clip_to: "buttons_unfoc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_max";
	       rel2.to: "bt_max";
	       image.normal: "bd_button_max_unfocused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 part { name: "bt_min_unfoc";
	    mouse_events: 0;
	    clip_to: "buttons_unfoc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_min";
	       rel2.to: "bt_min";
	       image.normal: "bd_button_min_unfocused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }

	 part { name: "buttons_foc";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "bt_close_foc";
	    mouse_events: 0;
	    clip_to: "buttons_foc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       image.normal: "bd_button_close_focused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 part { name: "bt_max_foc";
	    mouse_events: 0;
	    clip_to: "buttons_foc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_max";
	       rel2.to: "bt_max";
	       image.normal: "bd_button_max_focused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 part { name: "bt_min_foc";
	    mouse_events: 0;
	    clip_to: "buttons_foc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_min";
	       rel2.to: "bt_min";
	       image.normal: "bd_button_min_focused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 
	 part { name: "title_base";
	    type: RECT;
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: 0 0;
		  to_x: "icon_area";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: -3 4;
		  to_y: "e.text.title";
		  to_x: "bt_min";
	       }
	    }
	 }
	 part { name: "title_back";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  to: "title_base";
	       }
	       rel2 {
		  to: "title_base";
		  relative: 1.0 0.0;
	       }
	       image {
		  normal: "bd_title_bg.png";
		  border: 7 7 2 7;
	       }
               fill.smooth: 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       rel2 {
		  to: "title_base";
		  relative: 1.0 1.0;
	       }
	    }
	 }
	 
	 part { name: "title2";
	    type: TEXT;
	    mouse_events: 0;
	    effect: SOFT_SHADOW;
	    description { state: "default" 0.0;
	       visible: 0;
	       align: 0.0 1.0;
	       rel1 {
		  to_x: "e.text.title";
		  to_y: "title_back";
		  relative: 0.0 1.0;
		  offset: -1 0;
	       }
	       rel2 {
		  to_x: "e.text.title";
		  to_y: "title_back";
		  relative: 1.0 1.0;
		  offset: 0 1;
	       }
	       color: 224 224 224 255;
	       color3: 0 0 0 64;
	       color_class: "border_title";
	       text {
		  text_source: "e.text.title";
                  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
                  align: 0.0 0.0;
		  min: 0 1;
		  text_class: "title_bar";
	       }
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 
	 part { name: "title_over";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to: "title_back";
	       rel2.to: "title_back";
	       image {
		  normal: "bd_title_over.png";
		  border: 7 7 2 7;
	       }
	       fill.smooth: 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 
	 part { name: "e.swallow.client";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 0;
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	    }
	    description { state: "max" 0.0;
	       inherit: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 0;
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	    }
	 }

	 part { name: "e.event.titlebar";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "title_base";
	       rel2.to: "title_base";
	       color: 0 0 0 0;
	    }
	 }
	 
	 part { name: "e.event.icon";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       color: 0 0 0 0;
	    }
	 }

	 part { name: "e.event.close";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       color: 0 0 0 0;
	    }
	 }
	 part { name: "e.event.minimize";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bt_min";
	       rel2.to: "bt_min";
	       color: 0 0 0 0;
	    }
	 }
	 part { name: "e.event.maximize";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bt_max";
	       rel2.to: "bt_max";
	       color: 0 0 0 0;
	    }
	 }
      }
      programs {
	 program {
	    name: "focus_in";
	    signal: "e,state,focused";
	    source: "e";
	    action: STATE_SET "focused" 0.0;
	    transition: LINEAR 0.2;
	    target: "title_back";
	    target: "title2";
	    target: "title_over";
	    target: "buttons_foc";
	    target: "buttons_unfoc";
	    target: "e.text.title";
	 }
	 program {
	    name: "focus_out";
	    signal: "e,state,unfocused";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.2;
	    target: "title_back";
	    target: "title2";
	    target: "title_over";
	    target: "buttons_foc";
	    target: "buttons_unfoc";
	    target: "e.text.title";
	 }
	 
	 program {
	    name:    "urgent";
	    signal:  "e,state,urgent";
	    source:  "e";
            action: STATE_SET "visible" 0.0;
	    target: "urgent";
	    target: "urgent2";
            transition: DECELERATE 0.5;
	    after: "urgent2";
	 }
	 program {
	    name:    "urgent2";
            action: STATE_SET "faded" 0.0;
	    target: "urgent2";
            transition: LINEAR 0.5;
	    after: "urgent3";
	 }
	 program {
	    name:    "urgent3";
            action: STATE_SET "visible" 0.0;
	    target: "urgent2";
	    after: "urgent2";
	 }
	 program {
	    name:    "urgentw0";
	    signal:  "e,state,urgent";
	    source:  "e";
            action: STATE_SET "default" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw1";
	 }
	 program {
	    name:    "urgentw1";
            action: STATE_SET "uw1" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw2";
	 }
	 program {
	    name:    "urgentw2";
            action: STATE_SET "uw2" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw3";
	 }
	 program {
	    name:    "urgentw3";
            action: STATE_SET "uw3" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw4";
	 }
	 program {
	    name:    "urgentw4";
            action: STATE_SET "uw4" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw0";
	 }
	 program {
	    name:    "not_urgent";
	    signal:  "e,state,not_urgent";
	    source:  "e";
            action: ACTION_STOP;
	    target: "urgentw0";
	    target: "urgentw1";
	    target: "urgentw2";
	    target: "urgentw3";
	    target: "urgentw4";
	    target: "urgent";
	    target: "urgent2";
	    target: "urgent3";
	    after: "not_urgent2";
	 }
	 program {
	    name:    "not_urgent2";
            action: STATE_SET "default" 0.0;
	    target: "urgent";
	    target: "urgent2";
	    target: "icon_area2";
	 }

	 program {
	    name:    "hung";
	    signal:  "e,state,hung";
	    source:  "e";
	    /* FIXME: */
            action: STATE_SET "shrunk" 0.0;
	    target: "e.swallow.icon";
            transition: DECELERATE 0.5;
	 }
	 program {
	    name:    "unhung";
	    signal:  "e,state,unhung";
	    source:  "e";
	    /* FIXME: */
            action:  ACTION_STOP;
	    target: "busy_anim";
	 }
	 program {
	    name:    "unhung2";
	    signal:  "e,state,unhung";
	    source:  "e";
	    /* FIXME: */
            action: STATE_SET "default" 0.0;
	    target: "e.swallow.icon";
	    target: "busy";
            transition: ACCELERATE 0.5;
	 }
         program {	 
	    name: "busy_anim";
	    signal:  "e,state,hung";
	    source:  "e";
	    action: STATE_SET "visible" 0.0;
	    transition: LINEAR 0.3333;
	    target: "busy";
	    after:  "busy_anim";
	 }
	 program {
	    name: "max_full";
	    signal: "e,action,maximize,fullscreen";
	    source: "e";
	    action: STATE_SET "max" 0.0;
	    target: "e.swallow.client";
	 }
	 program {
	    name: "unmax_full";
	    signal: "e,action,unmaximize,fullscreen";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "e.swallow.client";
	 }
	 
	 program {
	    name: "shade_end";
	    signal: "e,state,shaded";
	    source: "e";
	    action: STATE_SET "shaded" 0.0;
	    target: "e.swallow.client";
	 }
	 program {
	    name: "unshade_start";
	    signal: "e,state,unshading";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "e.swallow.client";
	 }
	 
	 program {
	    name: "icon_down";
	    signal: "mouse,down,*";
	    source: "e.event.icon";
	    action:  STATE_SET "active" 0.0;
	    target: "icon_area";
	 }
	 program {
	    name: "icon_up";
	    signal: "mouse,up,*";
	    source: "e.event.icon";
	    action:  STATE_SET "default" 0.0;
	    target: "icon_area";
	 }
	 program {
	    name: "bt_close_down";
	    signal: "mouse,down,*";
	    source: "e.event.close";
	    action:  STATE_SET "active" 0.0;
	    target: "bt_close_unfoc";
	    target: "bt_close_foc";
	 }
	 program {
	    name: "bt_close_up";
	    signal: "mouse,up,*";
	    source: "e.event.close";
	    action:  STATE_SET "default" 0.0;
	    target: "bt_close_unfoc";
	    target: "bt_close_foc";
	 }
	 program {
	    name: "bt_max_down";
	    signal: "mouse,down,*";
	    source: "e.event.maximize";
	    action:  STATE_SET "active" 0.0;
	    target: "bt_max_unfoc";
	    target: "bt_max_foc";
	 }
	 program {
	    name: "bt_max_up";
	    signal: "mouse,up,*";
	    source: "e.event.maximize";
	    action:  STATE_SET "default" 0.0;
	    target: "bt_max_unfoc";
	    target: "bt_max_foc";
	 }
	 program {
	    name: "bt_min_down";
	    signal: "mouse,down,*";
	    source: "e.event.minimize";
	    action:  STATE_SET "active" 0.0;
	    target: "bt_min_unfoc";
	    target: "bt_min_foc";
	 }
	 program {
	    name: "bt_min_up";
	    signal: "mouse,up,*";
	    source: "e.event.minimize";
	    action:  STATE_SET "default" 0.0;
	    target: "bt_min_unfoc";
	    target: "bt_min_foc";
	 }
      }
   }
   
   /*** DIALOG WINDOW BORDER ***/
   group { name: "e/widgets/border/dialog/border";
      images {
	 image: "bd_top.png" COMP;
	 image: "bd_top_hilight.png" COMP;
	 image: "bd_bottom.png" COMP;
	 image: "bd_title_bg.png" COMP;
	 image: "bd_title_over.png" COMP;
	 image: "bd_resize_b.png" COMP;
	 image: "busy-1.png" COMP;
         image: "busy-2.png" COMP;
         image: "busy-3.png" COMP;
         image: "busy-4.png" COMP;
         image: "busy-5.png" COMP;
         image: "busy-6.png" COMP;
         image: "busy-7.png" COMP;
         image: "busy-8.png" COMP;
         image: "busy-9.png" COMP;
         image: "exclam.png" COMP;
	 image: "bd_button_close_shadow.png" COMP;
	 image: "bd_button_close_focused.png" COMP;
	 image: "bd_button_close_unfocused.png" COMP;
      }
      parts {
	 part { name: "top";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
		  to_y: "title_base";
	       }
	       image {
		  normal: "bd_top.png";
		  border: 2 2 2 2;
	       }
	    }
	 }
	 part { name: "bottom";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 -4;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	       image {
		  normal: "bd_bottom.png";
		  border: 2 2 0 0;
	       }
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	    description { state: "max" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "icon_area";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       align: 0.0 0.5;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 2 2;
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: 2 -3;
		  to_y: "title_base";
	       }
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1 {
		  offset: 2 3;
	       }
	       rel2 {
		  offset: 2 -2;
	       }
	    }
	 }
	 part { name: "icon_area2";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	    }
	    description { state: "uw0" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -3 -2;
	       rel2.offset: -4 -3;
	    }
	    description { state: "uw1" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 5 -2;
	       rel2.offset: 4 -3;
	    }
	    description { state: "uw2" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -1 4;
	       rel2.offset: -2 3;
	    }
	    description { state: "uw3" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -2 -1;
	       rel2.offset: -3 -2;
	    }
	    description { state: "uw4" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -4 1;
	       rel2.offset: -5 0;
	    }
	 }
         part {
	    name: "busy";
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       max: 32 32;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image {
		  tween:  "busy-1.png";
		  tween:  "busy-2.png";
		  tween:  "busy-3.png";
		  tween:  "busy-4.png";
		  tween:  "busy-5.png";
		  tween:  "busy-6.png";
		  tween:  "busy-7.png";
		  tween:  "busy-8.png";
		  normal: "busy-9.png";
	       }
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "e.swallow.icon";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area2";
	       rel2.to: "icon_area2";
	    }
	    description { state: "shrunk" 0.0;
	       inherit: "default" 0.0;
	       rel1.relative: 0.3 0.3;
	       rel2.relative: 0.7 0.7;
	    }
	 }
         part {
	    name: "urgent";
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image.normal: "exclam.png";
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
         part {
	    name: "urgent2";
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image.normal: "exclam.png";
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	    description {
	       state: "faded" 0.0;
	       inherit: "default" 0.0;
	       rel1.relative: -1.0 -1.0;
	       rel2.relative: 2.0 2.0;
	       visible: 1;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "e.text.title";
	    type: TEXT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 1;
	       align: 0.0 0.0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: 9 2;
		  to_x: "icon_area";
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -8 2;
		  to_x: "title_base";
	       }
	       color: 0 0 0 255;
	       color_class: "border_title";
	       text {
		  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
		  min: 0 1;
		  align: 0.0 0.0;
		  text_class: "title_bar";
	       }
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 0 0 0 0;
	    }
	 }
	 
	 part { name: "bt_close";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       align: 1.0 0.5;
	       min: 22 22;
	       max: 22 22;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: -2 1;
		  to_x: "top";
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -2 -2;
		  to_x: "top";
		  to_y: "top";
	       }
	       image.normal: "bd_button_close_shadow.png";
	    }
	 }	 
	 
	 part { name: "top_hilight";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
		  to: "top";
	       }
	       rel2 {
		  relative: 1.0 0.5;
		  offset: -1 0;
		  to: "top";
	       }
	       image {
		  normal: "bd_top_hilight.png";
	       }
               fill.smooth: 0;
	    }
	 }
	 
	 part { name: "buttons_unfoc";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "bt_close_unfoc";
	    mouse_events: 0;
	    clip_to: "buttons_unfoc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       image.normal: "bd_button_close_unfocused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }

	 part { name: "buttons_foc";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "bt_close_foc";
	    mouse_events: 0;
	    clip_to: "buttons_foc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       image.normal: "bd_button_close_focused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 
	 part { name: "title_base";
	    type: RECT;
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: 0 0;
		  to_x: "icon_area";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: -3 4;
		  to_y: "e.text.title";
		  to_x: "bt_close";
	       }
	    }
	 }
	 part { name: "title_back";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  to: "title_base";
	       }
	       rel2 {
		  to: "title_base";
		  relative: 1.0 0.0;
	       }
	       image {
		  normal: "bd_title_bg.png";
		  border: 7 7 2 7;
	       }
               fill.smooth: 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       rel2 {
		  to: "title_base";
		  relative: 1.0 1.0;
	       }
	    }
	 }
	 
	 part { name: "title2";
	    type: TEXT;
	    mouse_events: 0;
	    effect: SOFT_SHADOW;
	    description { state: "default" 0.0;
	       visible: 0;
	       align: 0.0 1.0;
	       rel1 {
		  to_x: "e.text.title";
		  to_y: "title_back";
		  relative: 0.0 1.0;
		  offset: -1 0;
	       }
	       rel2 {
		  to_x: "e.text.title";
		  to_y: "title_back";
		  relative: 1.0 1.0;
		  offset: 0 1;
	       }
	       color: 224 224 224 255;
	       color3: 0 0 0 64;
	       color_class: "border_title";
	       text {
		  text_source: "e.text.title";
                  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
                  align: 0.0 0.0;
		  min: 0 1;
		  text_class: "title_bar";
	       }
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 
	 part { name: "title_over";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to: "title_back";
	       rel2.to: "title_back";
	       image {
		  normal: "bd_title_over.png";
		  border: 7 7 2 7;
	       }
	       fill.smooth: 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 
	 part { name: "bottom_clip";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bottom";
	       rel2.to: "bottom";
	       color: 255 255 255 255;
	    }
	 }	 
	 part { name: "resize_b";
	    mouse_events:  0;
	    clip_to: "bottom_clip";
	    description { state: "default" 0.0;
	       min: 20 10;
	       max: 20 10;
	       rel1 {
		  to: "bottom";
		  relative: 0.5 0.0;
		  offset: 0 -10;
	       }
	       rel2 {
		  to: "bottom";
		  relative: 0.5 0.0;
		  offset: 0 -1;
	       }
	       image {
		  normal: "bd_resize_b.png";
	       }
	    }
	    description { state: "past" 0.0;
	       inherit: "default" 0.0;
	       rel1 {
		  relative: 0.5 1.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 0.5 1.0;
		  offset: 0 9;
	       }
	    }
	 }
	 
	 
	 part { name: "e.swallow.client";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 0;
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 -1;
		  to_y: "bottom";
	       }
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
		  to_y: "bottom";
	       }
	    }
	    description { state: "max" 0.0;
	       inherit: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 0;
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
		  to_y: "bottom";
	       }
	    }
	 }

	 part { name: "e.event.titlebar";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "title_base";
	       rel2.to: "title_base";
	       color: 0 0 0 0;
	    }
	 }
	 
	 part { name: "e.event.resize.t";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 3;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "e.event.resize.b";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 -4;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }

	 part { name: "e.event.resize.tl";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 0.0 0.0;
		  offset: 15 15;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "e.event.resize.tr";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: -16 0;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 15;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "e.event.resize.bl";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 -16;
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: 15 -1;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "e.event.resize.br";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 1.0 1.0;
		  offset: -16 -16;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	       color: 0 0 0 0;
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 
	 part { name: "e.event.icon";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       color: 0 0 0 0;
	    }
	 }

	 part { name: "e.event.close";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       color: 0 0 0 0;
	    }
	 }
      }
      programs {
	 program {
	    name: "focus_in";
	    signal: "e,state,focused";
	    source: "e";
	    action: STATE_SET "focused" 0.0;
	    transition: LINEAR 0.2;
	    target: "title_back";
	    target: "title2";
	    target: "title_over";
	    target: "buttons_foc";
	    target: "buttons_unfoc";
	    target: "e.text.title";
	 }
	 program {
	    name: "focus_out";
	    signal: "e,state,unfocused";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.2;
	    target: "title_back";
	    target: "title2";
	    target: "title_over";
	    target: "buttons_foc";
	    target: "buttons_unfoc";
	    target: "e.text.title";
	 }
	 
	 program {
	    name:    "urgent";
	    signal:  "e,state,urgent";
	    source:  "e";
            action: STATE_SET "visible" 0.0;
	    target: "urgent";
	    target: "urgent2";
            transition: DECELERATE 0.5;
	    after: "urgent2";
	 }
	 program {
	    name:    "urgent2";
            action: STATE_SET "faded" 0.0;
	    target: "urgent2";
            transition: LINEAR 0.5;
	    after: "urgent3";
	 }
	 program {
	    name:    "urgent3";
            action: STATE_SET "visible" 0.0;
	    target: "urgent2";
	    after: "urgent2";
	 }
	 program {
	    name:    "urgentw0";
	    signal:  "e,state,urgent";
	    source:  "e";
            action: STATE_SET "default" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw1";
	 }
	 program {
	    name:    "urgentw1";
            action: STATE_SET "uw1" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw2";
	 }
	 program {
	    name:    "urgentw2";
            action: STATE_SET "uw2" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw3";
	 }
	 program {
	    name:    "urgentw3";
            action: STATE_SET "uw3" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw4";
	 }
	 program {
	    name:    "urgentw4";
            action: STATE_SET "uw4" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw0";
	 }
	 program {
	    name:    "not_urgent";
	    signal:  "e,state,not_urgent";
	    source:  "e";
            action: ACTION_STOP;
	    target: "urgentw0";
	    target: "urgentw1";
	    target: "urgentw2";
	    target: "urgentw3";
	    target: "urgentw4";
	    target: "urgent";
	    target: "urgent2";
	    target: "urgent3";
	    after: "not_urgent2";
	 }
	 program {
	    name:    "not_urgent2";
            action: STATE_SET "default" 0.0;
	    target: "urgent";
	    target: "urgent2";
	    target: "icon_area2";
	 }

	 program {
	    name:    "hung";
	    signal:  "e,state,hung";
	    source:  "e";
	    /* FIXME: */
            action: STATE_SET "shrunk" 0.0;
	    target: "e.swallow.icon";
            transition: DECELERATE 0.5;
	 }
	 program {
	    name:    "unhung";
	    signal:  "e,state,unhung";
	    source:  "e";
	    /* FIXME: */
            action:  ACTION_STOP;
	    target: "busy_anim";
	 }
	 program {
	    name:    "unhung2";
	    signal:  "e,state,unhung";
	    source:  "e";
	    /* FIXME: */
            action: STATE_SET "default" 0.0;
	    target: "e.swallow.icon";
	    target: "busy";
            transition: ACCELERATE 0.5;
	 }
         program {	 
	    name: "busy_anim";
	    signal:  "e,state,hung";
	    source:  "e";
	    action: STATE_SET "visible" 0.0;
	    transition: LINEAR 0.3333;
	    target: "busy";
	    after:  "busy_anim";
	 }
	 program {
	    name:    "max_full";
	    signal:  "e,action,maximize,fullscreen";
	    source:  "e";
	    action: STATE_SET "max" 0.0;
	    target: "bottom";
	    target: "e.swallow.client";
	 }
	 program {
	    name:    "unmax_full";
	    signal:  "e,action,unmaximize,fullscreen";
	    source:  "e";
	    action: STATE_SET "default" 0.0;
	    target: "bottom";
	    target: "e.swallow.client";
	 }
	 
	 program {
	    name: "shade_end";
	    signal: "e,state,shaded";
	    source: "e";
	    action: STATE_SET "shaded" 0.0;
	    target: "bottom";
	    target: "e.swallow.client";
	    target: "e.event.resize.tl";
	    target: "e.event.resize.tr";
	    target: "e.event.resize.bl";
	    target: "e.event.resize.br";
	    target: "e.event.resize.t";
	    target: "e.event.resize.b";
	 }
	 program {
	    name:    "unshade_start";
	    signal:  "e,state,unshading";
	    source:  "e";
	    action: STATE_SET "default" 0.0;
	    target: "bottom";
	    target: "e.swallow.client";
	    target: "e.event.resize.tl";
	    target: "e.event.resize.tr";
	    target: "e.event.resize.bl";
	    target: "e.event.resize.br";
	    target: "e.event.resize.t";
	    target: "e.event.resize.b";
	 }
	 program {
	    name: "resize_b_on";
	    signal: "mouse,in";
	    source: "e.event.resize.b";
	    action:  ACTION_STOP;
	    target: "resize_b_on2";
	    target: "resize_b_on3";
	    after: "resize_b_on2";
	 }
	 program {
	    name: "resize_b_on2";
	    action: STATE_SET "default" 0.0;
	    target: "resize_b";
	    after: "resize_b_on3";
	 }
	 program {
	    name: "resize_b_on3";
	    action: STATE_SET "past" 0.0;
	    transition: LINEAR 0.5;
	    target: "resize_b";
	    after: "resize_b_on2";
	 }
	 program {
	    name: "resize_b_off";
	    signal: "mouse,out";
	    source: "e.event.resize.b";
	    action:  ACTION_STOP;
	    target: "resize_b_on";
	    target: "resize_b_on2";
	    target: "resize_b_on3";
	 }
	 
	 program {
	    name: "icon_down";
	    signal: "mouse,down,*";
	    source: "e.event.icon";
	    action:  STATE_SET "active" 0.0;
	    target: "icon_area";
	 }
	 program {
	    name: "icon_up";
	    signal: "mouse,up,*";
	    source: "e.event.icon";
	    action:  STATE_SET "default" 0.0;
	    target: "icon_area";
	 }
	 program {
	    name: "bt_close_down";
	    signal: "mouse,down,*";
	    source: "e.event.close";
	    action:  STATE_SET "active" 0.0;
	    target: "bt_close_unfoc";
	    target: "bt_close_foc";
	 }
	 program {
	    name: "bt_close_up";
	    signal: "mouse,up,*";
	    source: "e.event.close";
	    action:  STATE_SET "default" 0.0;
	    target: "bt_close_unfoc";
	    target: "bt_close_foc";
	 }
      }
   }
   
   /*** NORESIZE DIALOG WINDOW BORDER ***/
   group { name: "e/widgets/border/noresize_dialog/border";
      images {
	 image: "bd_top.png" COMP;
	 image: "bd_top_hilight.png" COMP;
	 image: "bd_title_bg.png" COMP;
	 image: "bd_title_over.png" COMP;
	 image: "busy-1.png" COMP;
         image: "busy-2.png" COMP;
         image: "busy-3.png" COMP;
         image: "busy-4.png" COMP;
         image: "busy-5.png" COMP;
         image: "busy-6.png" COMP;
         image: "busy-7.png" COMP;
         image: "busy-8.png" COMP;
         image: "busy-9.png" COMP;
         image: "exclam.png" COMP;
	 image: "bd_button_close_shadow.png" COMP;
	 image: "bd_button_close_focused.png" COMP;
	 image: "bd_button_close_unfocused.png" COMP;
      }
      parts {
	 part { name: "top";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
		  to_y: "title_base";
	       }
	       image {
		  normal: "bd_top.png";
		  border: 2 2 2 2;
	       }
	    }
	 }
	 part { name: "icon_area";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       align: 0.0 0.5;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 2 2;
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: 2 -3;
		  to_y: "title_base";
	       }
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1 {
		  offset: 2 3;
	       }
	       rel2 {
		  offset: 2 -2;
	       }
	    }
	 }
	 part { name: "icon_area2";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	    }
	    description { state: "uw0" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -3 -2;
	       rel2.offset: -4 -3;
	    }
	    description { state: "uw1" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 5 -2;
	       rel2.offset: 4 -3;
	    }
	    description { state: "uw2" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -1 4;
	       rel2.offset: -2 3;
	    }
	    description { state: "uw3" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -2 -1;
	       rel2.offset: -3 -2;
	    }
	    description { state: "uw4" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -4 1;
	       rel2.offset: -5 0;
	    }
	 }
         part {
	    name: "busy";
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       max: 32 32;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image {
		  tween:  "busy-1.png";
		  tween:  "busy-2.png";
		  tween:  "busy-3.png";
		  tween:  "busy-4.png";
		  tween:  "busy-5.png";
		  tween:  "busy-6.png";
		  tween:  "busy-7.png";
		  tween:  "busy-8.png";
		  normal: "busy-9.png";
	       }
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "e.swallow.icon";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area2";
	       rel2.to: "icon_area2";
	    }
	    description { state: "shrunk" 0.0;
	       inherit: "default" 0.0;
	       rel1.relative: 0.3 0.3;
	       rel2.relative: 0.7 0.7;
	    }
	 }
         part {
	    name: "urgent";
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image.normal: "exclam.png";
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
         part {
	    name: "urgent2";
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       image.normal: "exclam.png";
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	    description {
	       state: "faded" 0.0;
	       inherit: "default" 0.0;
	       rel1.relative: -1.0 -1.0;
	       rel2.relative: 2.0 2.0;
	       visible: 1;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "e.text.title";
	    type: TEXT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 1;
	       align: 0.0 0.0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: 9 2;
		  to_x: "icon_area";
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -8 2;
		  to_x: "title_base";
	       }
	       color: 0 0 0 255;
	       color_class: "border_title";
	       text {
		  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
		  min: 0 1;
		  align: 0.0 0.0;
		  text_class: "title_bar";
	       }
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 0 0 0 0;
	    }
	 }
	 
	 part { name: "bt_close";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       align: 1.0 0.5;
	       min: 22 22;
	       max: 22 22;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: -2 1;
		  to_x: "top";
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -2 -2;
		  to_x: "top";
		  to_y: "top";
	       }
	       image.normal: "bd_button_close_shadow.png";
	    }
	 }	 
	 
	 part { name: "top_hilight";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
		  to: "top";
	       }
	       rel2 {
		  relative: 1.0 0.5;
		  offset: -1 0;
		  to: "top";
	       }
	       image {
		  normal: "bd_top_hilight.png";
	       }
               fill.smooth: 0;
	    }
	 }
	 
	 part { name: "buttons_unfoc";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "bt_close_unfoc";
	    mouse_events: 0;
	    clip_to: "buttons_unfoc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       image.normal: "bd_button_close_unfocused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }

	 part { name: "buttons_foc";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "bt_close_foc";
	    mouse_events: 0;
	    clip_to: "buttons_foc";
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       image.normal: "bd_button_close_focused.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }
	 
	 part { name: "title_base";
	    type: RECT;
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: 0 0;
		  to_x: "icon_area";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: -3 4;
		  to_y: "e.text.title";
		  to_x: "bt_close";
	       }
	    }
	 }
	 part { name: "title_back";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  to: "title_base";
	       }
	       rel2 {
		  to: "title_base";
		  relative: 1.0 0.0;
	       }
	       image {
		  normal: "bd_title_bg.png";
		  border: 7 7 2 7;
	       }
               fill.smooth: 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       rel2 {
		  to: "title_base";
		  relative: 1.0 1.0;
	       }
	    }
	 }
	 
	 part { name: "title2";
	    type: TEXT;
	    mouse_events: 0;
	    effect: SOFT_SHADOW;
	    description { state: "default" 0.0;
	       visible: 0;
	       align: 0.0 1.0;
	       rel1 {
		  to_x: "e.text.title";
		  to_y: "title_back";
		  relative: 0.0 1.0;
		  offset: -1 0;
	       }
	       rel2 {
		  to_x: "e.text.title";
		  to_y: "title_back";
		  relative: 1.0 1.0;
		  offset: 0 1;
	       }
	       color: 224 224 224 255;
	       color3: 0 0 0 64;
	       color_class: "border_title";
	       text {
		  text_source: "e.text.title";
                  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
                  align: 0.0 0.0;
		  min: 0 1;
		  text_class: "title_bar";
	       }
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 
	 part { name: "title_over";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to: "title_back";
	       rel2.to: "title_back";
	       image {
		  normal: "bd_title_over.png";
		  border: 7 7 2 7;
	       }
	       fill.smooth: 0;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 
	 part { name: "e.swallow.client";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 0;
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 1.0;
	       }
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	    }
	    description { state: "max" 0.0;
	       inherit: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset: 0 0;
		  to_y: "top";
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	    }
	 }

	 part { name: "e.event.titlebar";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "title_base";
	       rel2.to: "title_base";
	       color: 0 0 0 0;
	    }
	 }
	 
	 part { name: "e.event.icon";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "icon_area";
	       rel2.to: "icon_area";
	       color: 0 0 0 0;
	    }
	 }

	 part { name: "e.event.close";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "bt_close";
	       rel2.to: "bt_close";
	       color: 0 0 0 0;
	    }
	 }
      }
      programs {
	 program {
	    name: "focus_in";
	    signal: "e,state,focused";
	    source: "e";
	    action: STATE_SET "focused" 0.0;
	    transition: LINEAR 0.2;
	    target: "title_back";
	    target: "title2";
	    target: "title_over";
	    target: "buttons_foc";
	    target: "buttons_unfoc";
	    target: "e.text.title";
	 }
	 program {
	    name: "focus_out";
	    signal: "e,state,unfocused";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.2;
	    target: "title_back";
	    target: "title2";
	    target: "title_over";
	    target: "buttons_foc";
	    target: "buttons_unfoc";
	    target: "e.text.title";
	 }
	 
	 program {
	    name:    "urgent";
	    signal:  "e,state,urgent";
	    source:  "e";
            action: STATE_SET "visible" 0.0;
	    target: "urgent";
	    target: "urgent2";
            transition: DECELERATE 0.5;
	    after: "urgent2";
	 }
	 program {
	    name:    "urgent2";
            action: STATE_SET "faded" 0.0;
	    target: "urgent2";
            transition: LINEAR 0.5;
	    after: "urgent3";
	 }
	 program {
	    name:    "urgent3";
            action: STATE_SET "visible" 0.0;
	    target: "urgent2";
	    after: "urgent2";
	 }
	 program {
	    name:    "urgentw0";
	    signal:  "e,state,urgent";
	    source:  "e";
            action: STATE_SET "default" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw1";
	 }
	 program {
	    name:    "urgentw1";
            action: STATE_SET "uw1" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw2";
	 }
	 program {
	    name:    "urgentw2";
            action: STATE_SET "uw2" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw3";
	 }
	 program {
	    name:    "urgentw3";
            action: STATE_SET "uw3" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw4";
	 }
	 program {
	    name:    "urgentw4";
            action: STATE_SET "uw4" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw0";
	 }
	 program {
	    name:    "not_urgent";
	    signal:  "e,state,not_urgent";
	    source:  "e";
            action: ACTION_STOP;
	    target: "urgentw0";
	    target: "urgentw1";
	    target: "urgentw2";
	    target: "urgentw3";
	    target: "urgentw4";
	    target: "urgent";
	    target: "urgent2";
	    target: "urgent3";
	    after: "not_urgent2";
	 }
	 program {
	    name:    "not_urgent2";
            action: STATE_SET "default" 0.0;
	    target: "urgent";
	    target: "urgent2";
	    target: "icon_area2";
	 }

	 program {
	    name:    "hung";
	    signal:  "e,state,hung";
	    source:  "e";
	    /* FIXME: */
            action: STATE_SET "shrunk" 0.0;
	    target: "e.swallow.icon";
            transition: DECELERATE 0.5;
	 }
	 program {
	    name:    "unhung";
	    signal:  "e,state,unhung";
	    source:  "e";
	    /* FIXME: */
            action:  ACTION_STOP;
	    target: "busy_anim";
	 }
	 program {
	    name:    "unhung2";
	    signal:  "e,state,unhung";
	    source:  "e";
	    /* FIXME: */
            action: STATE_SET "default" 0.0;
	    target: "e.swallow.icon";
	    target: "busy";
            transition: ACCELERATE 0.5;
	 }
         program {	 
	    name: "busy_anim";
	    signal:  "e,state,hung";
	    source:  "e";
	    action: STATE_SET "visible" 0.0;
	    transition: LINEAR 0.3333;
	    target: "busy";
	    after:  "busy_anim";
	 }
	 program {
	    name:    "max_full";
	    signal:  "e,action,maximize,fullscreen";
	    source:  "e";
	    action: STATE_SET "max" 0.0;
	    target: "e.swallow.client";
	 }
	 program {
	    name:    "unmax_full";
	    signal:  "e,action,unmaximize,fullscreen";
	    source:  "e";
	    action: STATE_SET "default" 0.0;
	    target: "e.swallow.client";
	 }
	 
	 program {
	    name: "shade_end";
	    signal: "e,state,shaded";
	    source: "e";
	    action: STATE_SET "shaded" 0.0;
	    target: "e.swallow.client";
	 }
	 program {
	    name:    "unshade_start";
	    signal:  "e,state,unshading";
	    source:  "e";
	    action: STATE_SET "default" 0.0;
	    target: "e.swallow.client";
	 }
	 
	 program {
	    name: "icon_down";
	    signal: "mouse,down,*";
	    source: "e.event.icon";
	    action:  STATE_SET "active" 0.0;
	    target: "icon_area";
	 }
	 program {
	    name: "icon_up";
	    signal: "mouse,up,*";
	    source: "e.event.icon";
	    action:  STATE_SET "default" 0.0;
	    target: "icon_area";
	 }
	 program {
	    name: "bt_close_down";
	    signal: "mouse,down,*";
	    source: "e.event.close";
	    action:  STATE_SET "active" 0.0;
	    target: "bt_close_unfoc";
	    target: "bt_close_foc";
	 }
	 program {
	    name: "bt_close_up";
	    signal: "mouse,up,*";
	    source: "e.event.close";
	    action:  STATE_SET "default" 0.0;
	    target: "bt_close_unfoc";
	    target: "bt_close_foc";
	 }
      }
   }
   
  /*** BONUS BORDERS TO CHOOSE FROM ***/
  group { name: "e/widgets/border/pixel/border";
     parts {
	part { name: "px1";
	   type: RECT;
	   description { state: "default" 0.0;
	      rel1 {
		 relative: 0.0 0.0;
		 offset: 0 0;
	      }
	      rel2 {
		 relative: 1.0 0.0;
		 offset: -1 0;
	      }
	      color: 0 0 0 255;
	   }
	}
	part { name: "px2";
	   type: RECT;
	   description { state: "default" 0.0;
	      rel1 {
		 relative: 0.0 1.0;
		 offset: 0 -1;
	      }
	      rel2 {
		 relative: 1.0 1.0;
		 offset: -1 -1;
	      }
	      color: 0 0 0 255;
	   }
	}
	part { name: "px3";
	   type: RECT;
	   description { state: "default" 0.0;
	      rel1 {
		 relative: 0.0 0.0;
		 offset: 0 1;
	      }
	      rel2 {
		 relative: 0.0 1.0;
		 offset: 0 -2;
	      }
	      color: 0 0 0 255;
	   }
	}
	part { name: "px4";
	   type: RECT;
	   description { state: "default" 0.0;
	      rel1 {
		 relative: 1.0 0.0;
		 offset: -1 1;
	      }
	      rel2 {
		 relative: 1.0 1.0;
		 offset: -1 -2;
	      }
	      color: 0 0 0 255;
	   }
	}
	part { name: "e.swallow.client";
	   type: SWALLOW;
	   description { state: "default" 0.0;
	      rel1 {
		 relative: 0.0 0.0;
		 offset: 1 1;
	      }
	      rel2 {
		 relative: 1.0 1.0;
		 offset: -2 -2;
	      }
	   }
	}
     }
  }

/////////////////////////////////////////////////////////////////////////////
   /*** THE DEFAULT MOUSE CURSOR - COLOR ***/
   group { name: "e/pointer/enlightenment/default/color";
      images {
	 image: "pointer.png" COMP;
	 image: "pointer_glow.png" COMP;
	 image: "pointer_glint_01.png" COMP;
	 image: "pointer_glint_02.png" COMP;
	 image: "pointer_glint_03.png" COMP;
	 image: "pointer_glint_04.png" COMP;
	 image: "pointer_glint_05.png" COMP;
	 image: "pointer_glint_06.png" COMP;
	 image: "pointer_glint_07.png" COMP;
	 image: "pointer_glint_08.png" COMP;
	 image: "pointer_glint_09.png" COMP;
	 image: "pointer_glint_10.png" COMP;
	 image: "pointer_glint_11.png" COMP;
	 image: "pointer_glint_12.png" COMP;
      }

      parts {
	 part { name: "base";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       aspect: 0.71875 0.71875; /* force a specific aspect ratio so
					 * when it gets scaled it wont squash
					 * or stretch */
	       aspect_preference: BOTH; /* both axes control aspect - thus it
					 * will be WITHIN the bounds the axes
					 * of thre part describe */
	       image {
		  normal: "pointer.png";
	       }
	    }
	 }
	 part { name: "glow"; /* this overlay is used to put a white glow
			       * around the pointer, so when the pointer is
			       * idle every now and again it will pulsate
			       * with this glow to just remind you where the
			       * pointer is (if you lose a black-ish
			       * pointer on a black background) */
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "base";
	       rel2.to: "base";
	       visible: 0;
	       color: 255 255 255 0;
	       image.normal: "pointer_glow.png";
	    }
	    description { state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "glint"; /* this overlay flips a series of small images
				* over the pointer. they look like a white
				* light/refelection when put over the pointer
				* base image - and produce a "glinting" effect
				* when played back fast */
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "base";
	       rel2.to: "base";
	       visible: 0;
	       image.normal: "pointer_glint_12.png";
	    }
	    description { state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       image.tween: "pointer_glint_01.png";
	       image.tween: "pointer_glint_02.png";
	       image.tween: "pointer_glint_03.png";
	       image.tween: "pointer_glint_04.png";
	       image.tween: "pointer_glint_05.png";
	       image.tween: "pointer_glint_06.png";
	       image.tween: "pointer_glint_07.png";
	       image.tween: "pointer_glint_08.png";
	       image.tween: "pointer_glint_09.png";
	       image.tween: "pointer_glint_10.png";
	       image.tween: "pointer_glint_11.png";
	       image.normal: "pointer_glint_12.png";
	    }
	 }
	 part { name: "e.swallow.hotspot"; /* this is a "fake" swallow part
					    * that is used by e to determine
					    * the pointer hotspot - or where
					    * the actual mouse events get
					    * reported from on the cursor */
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 { /* the hotspot will scale with the cursor here */
		  to: "base";
		  relative: 0.27 0.125;
		  offset: 0 0;
	       }
	       rel2 {
		  to: "base";
		  relative: 0.27 0.125;
		  offset: 0 0;
	       }
	    }
	 }
      }
      programs {
         program { name: "mouse_down"; /* called every time e detects a mouse 
					* press */
	    signal: "e,action,mouse,down";
	    source: "e";
	    action: STATE_SET "visible" 0.0;
            transition: LINEAR 0.3;
	    target: "glint";
	    after: "mouse_down2";
	 }
         program { name: "mouse_down2";
	    action: STATE_SET "default" 0.0;
	    target: "glint";
	 }
         program { name: "mouse_idle"; /* called when e thinks the mouse went
					* idle and isn't moving */
	    signal: "e,state,mouse,idle";
	    source: "e";
	    action: STATE_SET "visible" 0.0;
	    in: 5.0 0.0;
            transition: SINUSOIDAL 1.0;
	    target: "glow";
	    after: "mouse_idle2";
	 }
         program { name: "mouse_idle2";
	    action: STATE_SET "default" 0.0;
            transition: SINUSOIDAL 2.0;
	    target: "glow";
	    after: "mouse_idle";
	 }
         program { name: "mouse_active"; /* called when e sees the mouse become
					  * active again */
	    signal: "e,state,mouse,active";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "glow";
	    after: "mouse_active2";
	 }
         program { name: "mouse_active2";
	    action: ACTION_STOP;
	    target: "mouse_idle";
	    target: "mouse_idle2";
	 }
// when mouse button is released. not used here	 
//         program { name: "xx";
//	    signal: "e,action,mouse,up";
//	    source: "e";
//	 }
// when mouse button is moved. not used here	 
//         program { name: "xx";
//	    signal: "e,action,mouse,move";
//	    source: "e";
//	 }
// when mouse wheel is scrolled. not used here	 
//         program { name: "xx";
//	    signal: "e,action,mouse,wheel";
//	    source: "e";
//	 }
      }
   }
   
/////////////////////////////////////////////////////////////////////////////
   /*** THE DEFAULT MOUSE CURSOR - MONOCHROME. REALLY BORING ***/
   /* This pointer is used if the Xserver does not support full ARGB color
    * pointers. This can happen if X is old or the driver or libxcursor did
    * not exist when ecore was compiled. since the cursor will be literally
    * reduced down to black and white whith a single transparency mask,
    * colors other than black and whigte will be lost (and be approximated
    * with dithering) and any translucency other than completely opaque or
    * completely transparent pixels will also be lost. it then makes sense
    * to have a special black and white only image with no semi-transparency
    * so when this is displayed it will look directly as intended by the
    * artist */
   group { name: "e/pointer/enlightenment/default/mono";
      images {
	 image: "pointer_mono.png" COMP; /* a simple mono cursor image */
      }
      parts {
         part { name: "e/pointer";
	    mouse_events:  0;
	    description {
	       state:  "default" 0.0;
	       image {
		  normal: "pointer_mono.png";
	       }
	    }
	 }
         part { name: "hotspot"; /* this cursor also has a hotspot */
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 1 1;
	       }
	       rel2 {
		  relative: 0.0 0.0;
		  offset: 1 1;
	       }
	    }
	 }
      }
   }

/////////////////////////////////////////////////////////////////////////////
   /*** MENUS ***/
   /* this is the background for all menus. it also may optionally display a
    * title for the menu. this is wrapped around all the menu items that are
    * laid out in a vertical list from top to bottom */
   group { name: "e/widgets/menu/default/background";
      images {
	 image: "menu_bg.png" COMP;
	 image: "bd_top_hilight.png" COMP;
	 image: "bd_title_bg.png" COMP;
	 image: "bd_title_over.png" COMP;
      }
      parts {
	 part { name: "base";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       align: 0.5 0.0;
	       image {
		  normal: "menu_bg.png";
		  border: 2 2 2 2;
	       }
	       fill.smooth: 0; /* note - a shortcut for avoiding doing
				* fill { smooth: 0; } */
	    }
	 }
	 part { name: "top_hilight";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 15;
	       }
	       image.normal: "bd_top_hilight.png";
               fill.smooth: 0;
	    }
	 }
	 part { name: "title_back";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 4 0;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -5 0;
	       }
	       image {
		  normal: "bd_title_bg.png";
		  border: 7 7 2 7;
	       }
               fill.smooth: 0;
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 4 0;
	       }
	       rel2 {
		  to_y: "e.text.title";
		  relative: 1.0 1.0;
		  offset: -5 -4;
	       }
	    }
	 }
	 part { name: "e.text.title"; /* e sets the text of this to the title
				       * if there is any */
	    type: TEXT;
	    mouse_events: 0;
	    effect: SOFT_SHADOW;
	    description { state: "default" 0.0;
	       fixed: 1 1;
	       visible: 0;
	       align: 0.5 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 0;
	       }
	       color: 224 224 224 255;
	       color3: 0 0 0 64;
	       color_class: "menu_title";
	       text {
		  text_source: "e.text.title";
                  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
                  align: 0.5 0.0;
		  min: 0 0;
		  text_class: "menu_title";
	       }
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color_class: "menu_title_active";
	       text.min: 1 1;
	    }
	 }
	 part { name: "title_over";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to: "title_back";
	       rel2.to: "title_back";
	       image {
		  normal: "bd_title_over.png";
		  border: 7 7 2 7;
	       }
	       fill.smooth: 0;
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 part { name: "e.swallow.content"; /* this swallow part determines
					    * where in the menu the vertical
					    * list of menu items is put */
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  to_y: "e.text.title";
		  relative: 0.0 1.0;
		  offset: 2 1;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -3 -3;
	       }
	    }
	 }
      }
      programs {
	 program { name: "on"; /* this program is run when e emits a signal
				* to display a title. e will also set the
				* title text */
	    signal: "e,action,show,title";
	    source: "e";
	    action: STATE_SET "active" 0.0;
	    target: "title_back";
	    target: "e.text.title";
	    target: "title_over";
	 }
	 program { name: "off"; /* run when the title is removed */
	    signal: "e,action,hide,title";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "title_back";
	    target: "e.text.title";
	    target: "title_over";
	 }
      }
   }

   /* this is placed as a horizontal separator between menu items in the
    * vertical menu item list. it has no functionality other than being
    * a visual separator */
   group { name: "e/widgets/menu/default/separator";
      images {
	 image: "menu_sep.png" COMP;
      }
      parts {
	 part { name: "separator";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 16 2;
	       rel1.offset: 2 2;
	       rel2.offset: -3 -3;
	       image {
		  normal: "menu_sep.png";
		  border: 2 2 0 0;
	       }
	       fill.smooth: 0;
	    }
	 }
      }
   }

   /* this is used for regular menu items. this is what swallows/holds the
    * whole line of the menu item, icon, check/radio mark, label and submenu
    * indicator, where applicable */
   group { name: "e/widgets/menu/default/item_bg";
      /* this is idential to the regular menu item above, but used only for
       * items that have a submenu. this is to allow for a possible different
       * look for submenu holding items. here this is identical to to the
       * normal menu item, thus we are making use of the alias directive that
       * gives a group the ability to go by manu names */
      alias: "e/widgets/menu/default/submenu_bg";
      images {
	 image: "menu_sel_bg.png" COMP;
	 image: "menu_sel_fg.png" COMP;
      }
      parts {
	 part { name: "bg";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -5 -3;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 4 5;
	       }
	       image {
		  normal: "menu_sel_bg.png";
		  border: 8 8 5 9;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -2 0;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 1 2;
	       }
	    }
	 }
	 part { name: "e.swallow.content"; /* all item content will go here */
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       align: 0.0 0.0;
	       rel1.offset: 2 1;
	       rel2.offset: -3 -2;
	    }
	 }
	 part { name: "fg";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1.to: "bg";
	       rel2.to: "bg";
	       image {
		  normal: "menu_sel_fg.png";
		  border: 8 8 5 9;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
      }
      programs {
	 program { name: "sel"; /* when the menu item is selected (hilighted)
				 * this program is run to give the whole item
				 * an overall selected look */
	    signal: "e,state,selected";
	    source: "e";
	    action: STATE_SET "selected" 0.0;
	    transition: LINEAR 0.2;
	    target: "bg";
	    target: "fg";
	 }
	 program { name: "unsel"; /* when selection is removed from the menu
				   * item */
	    signal: "e,state,unselected";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.1;
	    target: "bg";
	    target: "fg";
	 }
      }
   }

   /* this group holds a menu icon. here we just use it to add padding around
    * the icon */
   group { name: "e/widgets/menu/default/icon";
      parts {
         part { name: "e.swallow.content"; /* icon is swallowed here */
	    type: SWALLOW;
	    description {
	       state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 2 2;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -3 -3;
	       }
	    }
	 }
      }
   }

   /* this is the actual text label for the menu item */
   group { name: "e/widgets/menu/default/label";
      parts {
         part { name: "e.text.label"; /* e sets the text of this */
	    type: TEXT;
	    effect: SOFT_SHADOW;
            mouse_events: 0;
	    description {
	       state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 1 -1;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 3 1;
	       }
	       color: 0 0 0 255;
	       color3: 0 0 0 0;
	       color_class: "menu_item";
	       text {
		  font: "Sans,Edje-Vera";
		  size: 10;
		  min: 1 1;
		  align: 0.0 0.5;
		  text_class: "menu_item";
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 255;
	       color3: 0 0 0 64;
	       color_class: "menu_item";
	    }
	 }
      }
      programs {
	 program { name: "sel"; /* when the menu item is actually selected */
	    signal: "e,state,selected";
	    source: "e";
	    action: STATE_SET "selected" 0.0;
	    transition: LINEAR 0.2;
	    target: "e.text.label";
	 }
	 program { name: "unsel"; /* on de-select */
	    signal: "e,state,unselected";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.3;
	    target: "e.text.label";
	 }
      }
   }

   /* this is a small arrow on the right of the menu item to indicate that it
    * has a submenu after it */
   group { name: "e/widgets/menu/default/submenu";
      images {
	 image: "menu_arrow_normal.png" COMP;
	 image: "menu_arrow_sel.png" COMP;
      }
      parts {
	 part { name: "arrow";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 9 12;
	       max: 9 12;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 1;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -3 -1;
	       }
	       image.normal: "menu_arrow_normal.png";
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "menu_arrow_sel.png";
	    }
	 }
      }
      programs {
	 program { name: "sel";
	    signal: "e,state,selected";
	    source: "e";
	    action: STATE_SET "selected" 0.0;
	    target: "arrow";
	 }
	 program { name: "unsel";
	    signal: "e,state,unselected";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "arrow";
	 }
      }
   }

   /* this is placed left of the icon in a menu item (if any icon) or left
    * of the label if no icon is present. this is a checkbox to indicate if
    * the menu item is enabled or disabled */
   group { name: "e/widgets/menu/default/check";
      images {
	 image: "check_base.png" COMP;
	 image: "check_on.png" COMP;
	 image: "check_sel.png" COMP;
      }
      parts {
	 part { name: "base";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 16 16;
	       max: 16 16;
	       image.normal: "check_base.png";
	    }
	 }
	 part { name: "mark";
	    mouse_events: 0;
	    clip_to: "mark_hold";
	    description { state: "default" 0.0;
	       rel1.to: "mark_hold";
	       rel2.to: "mark_hold";
	       image.normal: "check_on.png";
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "check_sel.png";
	    }
	 }
	 part { name: "mark_hold";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  to: "base";
		  offset: -5 -5;
	       }
	       rel2 {
		  to: "base";
		  offset: 4 4;
	       }
	    }
	    description { state: "on" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1.offset: 0 0;
	       rel2.offset: -1 -1;
	    }
	 }
      }
      programs {
	 program { name: "sel"; /* on selection of the menu item */
	    signal: "e,state,selected";
	    source: "e";
	    action: STATE_SET "selected" 0.0;
	    target: "mark";
	 }
	 program { name: "unsel"; /* de-select */
	    signal: "e,state,unselected";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "mark";
	 }
	 program { name: "on"; /* if the checkmark is to be displayed */
	    signal: "e,state,on";
	    source: "e";
	    action: STATE_SET "on" 0.0;
	    transition: LINEAR 0.15;
	    target: "mark_hold";
	 }
	 program { name: "off"; /* check mark is not to be displayed */
	    signal: "e,state,off";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.2;
	    target: "mark_hold";
	 }
      }
   }

   /* for a radio menu item - same as check, but only one of a group of radio
    * menu item can be selected at any one time */
   group { name: "e/widgets/menu/default/radio";
      images {
	 image: "radio_base.png" COMP;
	 image: "radio_on.png" COMP;
	 image: "radio_sel.png" COMP;
      }
      parts {
	 part { name: "base";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 16 16;
	       max: 16 16;
	       image.normal: "radio_base.png";
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "menu_arrow_sel.png";
	    }
	 }
	 part { name: "mark";
	    mouse_events: 0;
	    clip_to: "mark_hold";
	    description { state: "default" 0.0;
	       rel1.to: "mark_hold";
	       rel2.to: "mark_hold";
	       image.normal: "radio_on.png";
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "radio_sel.png";
	    }
	 }
	 part { name: "mark_hold";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  to: "base";
		  offset: -5 -5;
	       }
	       rel2 {
		  to: "base";
		  offset: 4 4;
	       }
	    }
	    description { state: "on" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1.offset: 0 0;
	       rel2.offset: -1 -1;
	    }
	 }
      }
      programs {
	 program { name: "sel";
	    signal: "e,state,selected";
	    source: "e";
	    action: STATE_SET "selected" 0.0;
	    target: "mark";
	 }
	 program { name: "unsel";
	    signal: "e,state,unselected";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "mark";
	 }
	 program { name: "on";
	    signal: "e,state,on";
	    source: "e";
	    action: STATE_SET "on" 0.0;
	    transition: LINEAR 0.15;
	    target: "mark_hold";
	 }
	 program { name: "off";
	    signal: "e,state,off";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.2;
	    target: "mark_hold";
	 }
      }
   }

/////////////////////////////////////////////////////////////////////////////
   /*** SHELF ***/
   /* Shelves are "panels" that  are placed around the edges of the screen
    * to hold useful gadgets to control things - like switch desktops
    * (the pager module and its gadget), launch programs, and anything else
    * someone wants to put in there. The way to add gadgets to a shelf is to
    * write a module that places a gadget there. This means that it might end
    * up containing all sorts of things and the artist needs to be aware of
    * that and make sure the shelf border and background etc. won't interfere
    * with all manner of things that may get placed there */
   group { name: "e/shelf/default/base";
      data {
	 /* this tells e the shelf is shaped, not rectangular */
//	 item: "shaped" "1";
	 /* this tells e the number of pixels of the shelf to leave "exposed"
	  * when auto-hiding the shelf */
	 item: "hidden_state_size" "1";
	 /* This makes the border hide instantly after the given amount of
	  * seconds - in this case 3 seconds. This means there will be no
	  * visible part of the shelf after this time at all as it will be
	  * totally hidden */
//	 item: "instant_delay" "3.0";
      }
      images {
	 image: "menu_bg.png" COMP;
      }
      parts {
	 part { name: "base";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       image.normal: "menu_bg.png";
	       image.border: 2 2 2 2;
	       fill.smooth: 0;
	    }
	 }     
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 3 3;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -4 -4;
	       }
	    }
	 }
      }
      programs {
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,top";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,top_left";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,top_right";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,bottom";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,bottom_left";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,bottom_right";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,left";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,left_top";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,left_bottom";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,right";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,right_top";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,right_bottom";
//	 source: "e";
//      }
// tell us we became a visible shelf. not used here
//      program { name: "xx";
//	 signal: "e,state,visible";
//	 source: "e";
//      }
// tell us we became a hidden shelf. not used here
//      program { name: "xx";
//	 signal: "e,state,hidden";
//	 source: "e";
//      }
      }
   }
   /* This is put around gadgets in the shelf if they ask for an "inset" style
    * framing. This puts some sort of bordering around them to make them look
    * "inset" into the shelf or screen. this is meant to go with the default
    * shelf style as implied in the group name */
   group { name: "e/shelf/default/inset";
      images {
	 image: "shelf_inset.png" COMP;
      }
      parts {
	 part { name: "base";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  to: "inset";
		  offset: 1 1;
	       }
	       rel2 {
		  to: "inset";
		  offset: -2 -2;
	       }
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "clip";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "base";
	       rel2.to: "base";
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    clip_to: "clip";
	    description { state: "default" 0.0;
	       rel1 {
		  to: "base";
		  offset: 1 1;
	       }
	       rel2 {
		  to: "base";
		  offset: -2 -2;
	       }
	    }
	 }
	 part { name: "inset";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.offset: 1 1;
	       rel2.offset: -2 -2;
	       image.normal: "shelf_inset.png";
	       image.middle: 0; /* here we say the "middle" part of the image
				 * between the borders is not filled - it's
				 * empty, so don't draw it - ignore it */
	       image.border: 7 7 7 7;
	       fill.smooth: 0;
	    }
	 }
      }
      programs {
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,top";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,top_left";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,top_right";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,bottom";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,bottom_left";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,bottom_right";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,left";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,left_top";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,left_bottom";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,right";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,right_top";
//	 source: "e";
//      }
// tell us what oriantation we are in. not used here
//      program { name: "xx";
//	 signal: "e,state,orientation,right_bottom";
//	 source: "e";
//      }
      }
   }
   /* Same as inset, but meant to be with no decorations that are visible. here
    * we simply make the content swallow inset a bit from the edges to align
    * with any plain style inset boxes */
   group { name: "e/shelf/default/plain";
      parts {
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1.offset: 1 1;
	       rel2.offset: -2 -2;
	    }
	 }
      }
   }

   /* This is the "invisible" shelf. Yes. Even it has visial config in edje.
    * The idea is that it will remain invisible, BUT will allow the designer
    * to do some layout and padding. This gets the same signals as the
    * default shelf and can provide the same data items */
   group { name: "e/shelf/invisible/base";
      data.item: "shaped" "1";
      parts {
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -1 -1;
	       }
	    }
	 }
      }
   }
   group { name: "e/shelf/invisible/inset";
      images {
	 image: "shelf_inset_dark.png" COMP;
      }
      parts {
	 part { name: "base";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  to: "inset";
		  offset: 1 1;
	       }
	       rel2 {
		  to: "inset";
		  offset: -2 -2;
	       }
	       color: 0 0 0 32;
	    }
	 }
	 part { name: "clip";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "base";
	       rel2.to: "base";
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    clip_to: "clip";
	    description { state: "default" 0.0;
	       rel1 {
		  to: "base";
		  offset: 1 1;
	       }
	       rel2 {
		  to: "base";
		  offset: -2 -2;
	       }
	    }
	 }
	 part { name: "inset";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.offset: 1 1;
	       rel2.offset: -2 -2;
	       image.normal: "shelf_inset_dark.png";
	       image.middle: 0;
	       image.border: 7 7 7 7;
	       fill.smooth: 0;
	    }
	 }
      }
   }
   group { name: "e/shelf/invisible/plain";
      parts {
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1.offset: 1 1;
	       rel2.offset: -2 -2;
	    }
	 }
      }
   }

   /* This is the alternate shelf. It provides a stylistic alternative to
    * make the shelf more dynamic to your tastes and wallpaper. It is 
    * selected in the Shelf Configuration. More alternative shelfs can
    * be provided by using more group names. eg, "e/shelf/black/base" */
   group { name: "e/shelf/alternate/base";
      images {
	 image: "shelf_alt_bg.png" COMP;
// 	 image: "shelf_alt_bg_left.png" COMP;
// 	 image: "shelf_alt_bg_right.png" COMP;
	 image: "shelf_alt_over.png" COMP;
// 	 image: "shelf_alt_over_left.png" COMP;
// 	 image: "shelf_alt_over_right.png" COMP;
	 image: "shelf_alt_shine.png" COMP;
      }
      parts {
	 part { name: "base";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       image.normal: "shelf_alt_bg.png";
	       fill.smooth: 0;
	    }
// 	    description { state: "left" 0.0;
// 	       image.normal: "shelf_alt_bg_left.png";
// 	       fill.smooth: 0;
// 	    }
// 	    description { state: "right" 0.0;
// 	       image.normal: "shelf_alt_bg_right.png";
// 	       fill.smooth: 0;
// 	    }
	 }     
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 3 3;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -4 -4;
	       }
	    }
	 }
	 part { name: "shine";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       image.normal: "shelf_alt_shine.png";
	       rel2.relative: 1.0 0.5;
	       fill.smooth: 0;
	    }
// 	    description { state: "left" 0.0;
// 	       inherit: "default" 0.0;
// 	       color: 255 255 255 0;
// 	    }
// 	    description { state: "right" 0.0;
// 	       inherit: "default" 0.0;
// 	       color: 255 255 255 0;
// 	    }
	 }     
	 part { name: "over";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       image.normal: "shelf_alt_over.png";
	       image.border: 5 5 5 5;
	       image.middle: 0;
	       fill.smooth: 0;
	    }
// 	    description { state: "left" 0.0;
// 	       image.normal: "shelf_alt_over_left.png";
// 	       image.border: 5 5 5 5;
// 	       image.middle: 0;
// 	       fill.smooth: 0;
// 	    }
// 	    description { state: "right" 0.0;
// 	       image.normal: "shelf_alt_over_right.png";
// 	       image.border: 5 5 5 5;
// 	       image.middle: 0;
// 	       fill.smooth: 0;
// 	    }
	 }     
      }
      /* Because programs can not respond to 2 different types of signals,
       * the programs are split into individual programs that point towards
       * the base program for its orientation. */
      programs {
	 /* Left orientation */
// 	 program { name: "left";
// 	    signal: "e,state,orientation,left";
// 	    source: "e";
// 	    action: STATE_SET "left" 0.0;
// 	    target: "base";
// 	    target: "over";
// 	    target: "shine";
// 	 }
// 	 program { name: "left_top";
// 	    signal: "e,state,orientation,left_top";
// 	    source: "e";
// 	    after: "left";
// 	 }
// 	 program { name: "left_bottom";
// 	    signal: "e,state,orientation,left_bottom";
// 	    source: "e";
// 	    after: "left";
// 	 }
// 	 /* Right orientation */
// 	 program { name: "right";
// 	    signal: "e,state,orientation,right";
// 	    source: "e";
// 	    action: STATE_SET "right" 0.0;
// 	    target: "base";
// 	    target: "over";
// 	    target: "shine";
// 	 }
// 	 program { name: "right_top";
// 	    signal: "e,state,orientation,right_top";
// 	    source: "e";
// 	    after: "right";
// 	 }
// 	 program { name: "right_bottom";
// 	    signal: "e,state,orientation,right_bottom";
// 	    source: "e";
// 	    after: "right";
// 	 }
      }
   }
   group { name: "e/shelf/alternate/inset";
      images {
	 image: "shelf_alt_inset.png" COMP;
      }
      parts {
	 part { name: "base";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  to: "inset";
		  offset: 4 4;
	       }
	       rel2 {
		  to: "inset";
		  offset: -5 -5;
	       }
	       color: 0 0 0 0;
	    }
	 }
	 part { name: "clip";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.to: "base";
	       rel2.to: "base";
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    clip_to: "clip";
	    description { state: "default" 0.0;
	       rel1 {
		  to: "base";
		  offset: 0 0;
	       }
	       rel2 {
		  to: "base";
		  offset: -1 -1;
	       }
	    }
	 }
	 part { name: "inset";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.offset: -1 -1;
	       rel2.offset: 0 0;
	       image.normal: "shelf_alt_inset.png";
	       image.middle: 0;
	       image.border: 7 7 7 7;
	       fill.smooth: 0;
	    }
	 }
      }
   }
   group { name: "e/shelf/alternate/plain";
      parts {
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1.offset: 1 1;
	       rel2.offset: -2 -2;
	    }
	 }
      }
   }

/////////////////////////////////////////////////////////////////////////////
   /*** MOD: START ***/
   /* This is for the "start" module - i.e. a "start" button. It simply
    * provides such a button/gadget in a shelf that pops up E's main
    * menu - a nice familiarity feature for those from the windows world.
    * Other than that it really does nothing, so this button can be quite
    * imaginative as it has few functional requirements */
   group { name: "e/modules/start/main";
      max: 128 128;
      images {
	 image: "logo_white_128.png" COMP;
	 image: "logo_black_128.png" COMP;
      }
      parts {
	 part { name: "base";
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       image.normal: "logo_white_128.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "over";
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.relative: -0.5 -0.5;
	       rel2.relative: 1.5 1.5;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       image.normal: "logo_black_128.png";
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.relative: 0.0 0.0;
	       rel2.relative: 1.0 1.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
      }
      programs {
	 program { name: "on";
	    signal: "e,state,focused";
	    source: "e";
	    action: STATE_SET "active" 0.0;
            transition: LINEAR 0.2;
	    target: "base";
	    target: "over";
	 }
	 program { name: "off";
	    signal: "e,state,unfocused";
	    source: "e";
	    action: STATE_SET "default" 0.0;
            transition: LINEAR 0.3;
	    target: "base";
	    target: "over";
	 }
      }
   }

/////////////////////////////////////////////////////////////////////////////
   /*** MOD: PAGER ***/
   group { name: "e/modules/pager/popup";
      images {
	 image: "menu_bg.png" COMP;
	 image: "bd_top_hilight.png" COMP;
	 image: "bd_title_bg.png" COMP;
	 image: "bd_title_over.png";
      }
      parts {
	 part { name: "base";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       image {
		  normal: "menu_bg.png";
		  border: 2 2 2 2;
	       }
	       fill.smooth: 0;
	    }
	 }
	 part { name: "top_hilight";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 15;
	       }
	       image.normal: "bd_top_hilight.png";
               fill.smooth: 0;
	    }
	 }
	 part { name: "title_back";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 4 0;
	       }
	       rel2 {
		  to_y: "e.text.label";
		  relative: 1.0 1.0;
		  offset: -5 -4;
	       }
	       image {
		  normal: "bd_title_bg.png";
		  border: 7 7 2 7;
	       }
               fill.smooth: 0;
	    }
	 }
	 part { name: "e.text.label";
	    type: TEXT;
	    mouse_events: 0;
	    effect: SOFT_SHADOW;
	    description { state: "default" 0.0;
	       fixed: 1 1;
	       align: 0.5 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 0;
	       }
	       color: 224 224 224 255;
	       color3: 0 0 0 64;
	       text {
                  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
                  align: 0.5 0.0;
		  min: 1 1;
	       }
	    }
	 }
	 part { name: "title_over";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       rel1.to: "title_back";
	       rel2.to: "title_back";
	       image {
		  normal: "bd_title_over.png";
		  border: 7 7 2 7;
	       }
	       fill.smooth: 0;
	    }
	 }
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  to_y: "e.text.label";
		  relative: 0.0 1.0;
		  offset: 12 11;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: -13 -13;
	       }
	    }
	 }
      }
   }
   group { name: "e/modules/pager/desk";
      images {
	 image: "pager_base1.png" COMP;
	 image: "pager_base2.png" COMP;
	 image: "pager_hi1.png" COMP;
	 image: "pager_hi2.png" COMP;
	 image: "pager_base_pattern.png" COMP;
      }
      parts {
	 part { name: "zoom";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.offset: 0 0;
	       rel2.offset: -1 -1;
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -3 -3;
	       rel2.offset: 2 2;
	    }
	 }
	 part { name: "base";
	    description { state: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1 {
		  to: "zoom";
		  offset: -1 -1;
	       }
	       rel2 {
		  to: "zoom";
		  offset: 0 0;
	       }
	       image.normal: "pager_base2.png";
	       image.border: 5 5 5 5;
	       fill.smooth: 0;
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "base2";
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  to: "zoom";
		  offset: -11 -11;
	       }
	       rel2 {
		  to: "zoom";
		  offset: 10 10;
	       }
	       image.normal: "pager_base1.png";
	       image.border: 5 5 5 5;
	       fill.smooth: 0;
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1.offset: -1 -1;
	       rel2.offset: 0 0;
	    }
	 }
	 part { name: "pattern";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
               rel1.to: "over2";
               rel2.to: "over2";
	       image.normal: "pager_base_pattern.png";
	       fill.size.relative: 0.0 0.0;
	       fill.size.offset: 48 48;
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "clip";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       color: 255 255 255 128;
	       rel1 {
		  to: "base";
		  offset: 4 4;
	       }
	       rel2 {
		  to: "base";
		  offset: -5 -5;
	       }
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    clip_to: "clip";
	    description { state: "default" 0.0;
	       rel1.to: "clip";
	       rel2.to: "clip";
	    }
	 }
	 part { name: "e.text.label";
	    type: TEXT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "clip";
	       rel2.to: "clip";
	       color: 0 0 0 32;
	       color_class: "module_label";
	       text {
		  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 8;
		  align: 0.5 0.5;
		  text_class: "module_small";
	       }
	    }
	 }
	 part { name: "over";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       image.normal: "pager_hi2.png";
	       rel1 {
		  to: "base";
		  offset: 3 3;
	       }
	       rel2 {
		  to: "base";
		  offset: -4 -4;
	       }
	       image.border: 2 2 2 2;
	       image.middle: 0;
	       fill.smooth: 0;
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "over2";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       image.normal: "pager_hi1.png";
	       rel1 {
		  to: "base2";
		  offset: 3 3;
	       }
	       rel2 {
		  to: "base2";
		  offset: -4 -4;
	       }
	       image.border: 2 2 2 2;
	       image.middle: 0;
	       fill.smooth: 0;
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
      }
      programs {
	 program { name: "on";
	    signal: "e,state,selected";
	    source: "e";
	    action: STATE_SET "active" 0.0;
            transition: LINEAR 0.2;
	    target: "base";
	    target: "base2";
	    target: "pattern";
	    target: "clip";
	    target: "over";
	    target: "over2";
	 }
	 program { name: "off";
	    signal: "e,state,unselected";
	    source: "e";
	    action: STATE_SET "default" 0.0;
            transition: LINEAR 0.3;
	    target: "base";
	    target: "base2";
	    target: "pattern";
	    target: "clip";
	    target: "over";
	    target: "over2";
	 }
	 program { name: "drg";
	    signal: "e,action,drag,in";
	    source: "e";
	    action: STATE_SET "active" 0.0;
	    transition: SINUSOIDAL 0.2;
            target: "zoom";
	    after: "drg2";
	 }
	 program { name: "drg2";
	    action: STATE_SET "default" 0.0;
	    transition: SINUSOIDAL 0.2;
            target: "zoom";
	    after: "drg";
	 }
	 program { name: "ndrg";
	    signal: "e,action,drag,out";
	    source: "e";
            action: ACTION_STOP;
	    target: "drg";
	    target: "drg2";
	    after: "ndrg2";
	 }
	 program { name: "ndrg2";
	    action: STATE_SET "default" 0.0;
            target: "zoom";
	 }
// don't have any states/anim for urgent windows on a desktop
//	 program { name: "xx";
//	    signal: "e,state,urgent";
//	    source: "e";
//	 }
// don't have any states/anim for urgent windows on a desktop
//	 program { name: "xx";
//	    signal: "e,state,not_urgent";
//	    source: "e";
//	 }
      }
   }
   group { name: "e/modules/pager/window";
      images {
	 image: "pager_window.png" COMP;
	 image: "pager_window_unsel.png" COMP;
         image: "exclam.png" COMP;
      }
      parts {
	 part { name: "icon_area";
	    type: RECT;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	    }
	 }
	 part { name: "icon_area2";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	    }
	    description { state: "uw0" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -3 -2;
	       rel2.offset: -4 -3;
	    }
	    description { state: "uw1" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 5 -2;
	       rel2.offset: 4 -3;
	    }
	    description { state: "uw2" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -1 4;
	       rel2.offset: -2 3;
	    }
	    description { state: "uw3" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -2 -1;
	       rel2.offset: -3 -2;
	    }
	    description { state: "uw4" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -4 1;
	       rel2.offset: -5 0;
	    }
	 }
	 part { name: "base";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1 {
		  to: "icon_area2";
		  offset: -3 -3;
	       }
	       rel2 {
		  to: "icon_area2";
		  offset: 2 2;
	       }
	       image.normal: "pager_window_unsel.png";
	       image.border: 9 9 7 6;
	    }
	    description { state: "focused" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "pager_window.png";
	    }
	 }
	 part { name: "e.swallow.icon";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       align: 1.0 1.0;
	       max: 24  24;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1 {
		  to: "base";
		  offset: 4 7;
	       }
	       rel2 {
		  to: "base";
		  offset: -5 -7;
	       }
	    }
	 }
         part {
	    name: "urgent";
	    mouse_events: 0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       image.normal: "exclam.png";
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
         part {
	    name: "urgent2";
	    mouse_events: 0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       image.normal: "exclam.png";
	    }
	    description {
	       state: "visible" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	    description {
	       state: "faded" 0.0;
	       inherit: "default" 0.0;
	       rel1.relative: -1.0 -1.0;
	       rel2.relative: 2.0 2.0;
	       visible: 1;
	       color: 255 255 255 0;
	    }
	 }
      }
      programs {
	 program { name: "focus_in";
	    signal: "e,state,focused";
	    source: "e";
	    action: STATE_SET "focused" 0.0;
	    target: "base";
	 }
	 program { name: "focus_out";
	    signal: "e,state,unfocused";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "base";
	 }
	 program { name: "urgent";
	    signal: "e,state,urgent";
	    source: "e";
            action: STATE_SET "visible" 0.0;
            transition: DECELERATE 0.5;
	    target: "urgent";
	    target: "urgent2";
	    after: "urgent2";
	 }
	 program { name: "urgent2";
            action: STATE_SET "faded" 0.0;
            transition: LINEAR 0.5;
	    target: "urgent2";
	    after: "urgent3";
	 }
	 program { name: "urgent3";
            action: STATE_SET "visible" 0.0;
	    target: "urgent2";
	    after: "urgent2";
	 }
	 program { name: "urgentw0";
	    signal: "e,state,urgent";
	    source: "e";
            action: STATE_SET "default" 0.0;
            transition: DECELERATE 0.1;
	    target: "icon_area2";
	    after: "urgentw1";
	 }
	 program { name: "urgentw1";
            action: STATE_SET "uw1" 0.0;
            transition: DECELERATE 0.1;
	    target: "icon_area2";
	    after: "urgentw2";
	 }
	 program { name: "urgentw2";
            action: STATE_SET "uw2" 0.0;
	    target: "icon_area2";
            transition: DECELERATE 0.1;
	    after: "urgentw3";
	 }
	 program { name: "urgentw3";
            action: STATE_SET "uw3" 0.0;
            transition: DECELERATE 0.1;
	    target: "icon_area2";
	    after: "urgentw4";
	 }
	 program { name: "urgentw4";
            action: STATE_SET "uw4" 0.0;
            transition: DECELERATE 0.1;
	    target: "icon_area2";
	    after: "urgentw0";
	 }
	 program { name: "not_urgent";
	    signal: "e,state,not_urgent";
	    source: "e";
            action: ACTION_STOP;
	    target: "urgentw0";
	    target: "urgentw1";
	    target: "urgentw2";
	    target: "urgentw3";
	    target: "urgentw4";
	    target: "urgent";
	    target: "urgent2";
	    target: "urgent3";
	    after: "not_urgent2";
	 }
	 program { name: "not_urgent2";
            action: STATE_SET "default" 0.0;
	    target: "urgent";
	    target: "urgent2";
	    target: "icon_area2";
	 }
      }
   }

/////////////////////////////////////////////////////////////////////////////
   /*** MOD: BATTERY ***/
// NOTE: can be same as current default, but images need to change
   group { name: "e/modules/battery/main";
      images {
	 image: "bat_content1.png" COMP;
	 image: "bat_content2.png" COMP;
	 image: "bat_content3.png" COMP;
	 image: "bat_content1b.png" COMP;
	 image: "bat_content2b.png" COMP;
	 image: "bat_content3b.png" COMP;
	 image: "bat_over.png" COMP;
	 image: "bat_shadow.png" COMP;
	 image: "power.png" COMP;
	 image: "power_glow.png" COMP;
      }
      min: 16 16;
      max: 128 128;
      script {
       public message(Msg_Type:type, id, ...) {
	  if ((type == MSG_FLOAT) && (id == 1)) {
	     new Float:val;
	     new r;
	     new g;
	     new b;
	     
	     val = getfarg(2);
	     
	     if (val < 0.35)
	       {
		  new Float:val1;
		  new Float:val2;
		  
		  val1 = val - 0.10;
		  if (val1 < 0.0) val1 = 0.0;
		  
		  val2 = 0.125 - val1;
		  if (val2 < 0.0) val2 = 0.0;
		  val2 = val2 / 0.125;
		  r = round(val2 * 255.0, ROUND);

		  val2 = val1;
		  if (val2 > 0.125) val2 = 0.125;
		  val2 = val2 / 0.125;
		  g = round(val2 * 255.0, ROUND);
		  
		  b = 0;
	       }
	     else
	       {
		  r = 0; g = 255; b = 0;
	       }
	     
	     custom_state(PART:"fill", "default", 0.0);
	     set_state_val(PART:"fill", STATE_REL1, 0.0, 1.0 - val);
	     set_state(PART:"fill", "custom", 0.0);
	     
	     custom_state(PART:"bfill1", "default", 0.0);
	     custom_state(PART:"bfill2", "default", 0.0);
	     custom_state(PART:"bfill3", "default", 0.0);
	     
	     set_state_val(PART:"bfill1", STATE_COLOR, r, g, b, 255);
	     set_state_val(PART:"bfill2", STATE_COLOR, r, g, b, 255);
	     set_state_val(PART:"bfill3", STATE_COLOR, r, g, b, 255);
	     
	     set_state(PART:"bfill1", "custom", 0.0);
	     set_state(PART:"bfill2", "custom", 0.0);
	     set_state(PART:"bfill3", "custom", 0.0);
	  }
       }
      }
      parts {
	 part { name: "fill_zone";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  to: "over";
		  relative: 0.0 0.25;
	       }
	       rel2 {
		  to: "over";
		  relative: 1.0 0.84375;
	       }
	    }
	 }
	 part { name: "fill";
	    type: RECT;
	    description { state: "default" 0.0;
	       visible: 0;
	       rel1.to: "fill_zone";
	       rel1.relative: 0.0 0.5;
	       rel2.to: "fill_zone";
	    }
	 }
	 part { name: "fade_clip";
	    type: RECT;
	    description { state: "default" 0.0;
	       color: 255 255 255 255;
	    }
	    description { state: "faded" 0.0;
	       color: 255 255 255 160;
	    }
	 }
	 part { name: "pulse_clip";
	    type: RECT;
	    clip_to: "fade_clip";
	    description { state: "default" 0.0;
	       color: 255 255 255 255;
	    }
	    description { state: "faded" 1.0;
	       color: 255 255 255 255;
	    }
	    description { state: "faded" 0.0;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "shadow";
	    mouse_events: 0;
	    clip_to: "pulse_clip";
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       image.normal: "bat_shadow.png";
	    }
	 }
	 part { name: "bfill1";
	    mouse_events: 0;
	    clip_to: "pulse_clip";
	    description { state: "default" 0.0;
	       aspect: 3.0 3.0;
	       aspect_preference: HORIZONTAL;
	       align: 0.5 1.0;
	       rel1 {
		  to: "fill";
		  relative: 0.125 0.0;
		  offset: 0 -1;
	       }
	       rel2 {
		  to: "fill";
		  relative: 0.875 0.0;
		  offset: -1 -1;
	       }
	       image.normal: "bat_content1.png";
	    }
	 }
	 part { name: "bfill2";
	    mouse_events: 0;
	    clip_to: "pulse_clip";
	    description { state: "default" 0.0;
	       rel1 {
		  to: "fill";
		  relative: 0.125 0.0;
	       }
	       rel2 {
		  to: "fill";
		  relative: 0.875 1.0;
	       }
	       image.normal: "bat_content2.png";
	    }
	 }
	 part { name: "bfill3";
	    mouse_events: 0;
	    clip_to: "pulse_clip";
	    description { state: "default" 0.0;
	       rel1 {
		  to: "fill";
		  relative: 0.125 1.0;
	       }
	       rel2 {
		  to: "over";
		  relative: 0.875 0.96875;
	       }
	       image.normal: "bat_content3.png";
	    }
	 }
	 part { name: "bfill1b";
	    mouse_events: 0;
	    clip_to: "pulse_clip";
	    description { state: "default" 0.0;
	       rel1.to: "bfill1";
	       rel2.to: "bfill1";
	       image.normal: "bat_content1b.png";
	    }
	 }
	 part { name: "bfill2b";
	    mouse_events: 0;
	    clip_to: "pulse_clip";
	    description { state: "default" 0.0;
	       rel1.to: "bfill2";
	       rel2.to: "bfill2";
	       image.normal: "bat_content2b.png";
	    }
	 }
	 part { name: "bfill3b";
	    mouse_events: 0;
	    clip_to: "pulse_clip";
	    description { state: "default" 0.0;
	       rel1.to: "bfill3";
	       rel2.to: "bfill3";
	       image.normal: "bat_content3b.png";
	    }
	 }
	 part { name: "over";
	    clip_to: "pulse_clip";
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       image.normal: "bat_over.png";
	    }
	 }
	 part { name: "power_glow";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "power";
	       rel2.to: "power";
	       image.normal: "power_glow.png";
	       visible: 0;
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 0;
	    }
	    description { state: "active2" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "power";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       rel1 {
		  to: "over";
		  relative: 0.0 0.35;
	       }
	       rel2 {
		  to: "over";
		  relative: 1.0 0.86875;
	       }
	       image.normal: "power.png";
	       visible: 0;
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
	 part { name: "e.text.reading";
	    mouse_events: 0;
	    type: TEXT;
	    effect: OUTLINE;
	    clip_to: "fade_clip";
	    description { state: "default" 0.0;
	       align: 0.5 0.0;
	       rel1 {
		  relative: 0.5 0.0;
	       }
	       rel2 {
		  relative: 0.5 0.0;
	       }
	       color: 255 255 255 0;
	       color2: 0 0 0 0;
	       color3: 0 0 0 0;
	       color_class: "module_label";
	       text {
		  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 8;
		  min: 1 1;
		  align: 0.5 0.0;
		  text_class: "module_small";
	       }
	    }
	    description { state: "visible" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 255;
	       color2: 0 0 0 128;
	       color3: 0 0 0 32;
	    }
	 }
	 part { name: "e.text.time";
	    mouse_events: 0;
	    type: TEXT;
	    effect: OUTLINE;
	    clip_to: "fade_clip";
	    description {
	       state: "default" 0.0;
	       align: 0.5 1.0;
	       rel1 {
		  relative: 0.5 1.0;
	       }
	       rel2 {
		  relative: 0.5 1.0;
	       }
	       color: 255 255 255 0;
	       color2: 0 0 0 0;
	       color3: 0 0 0 0;
	       color_class: "module_label";
	       text {
		  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 8;
		  min: 1 1;
		  align: 0.5 1.0;
		  text_class: "module_small";
	       }
	    }
	    description { state: "visible" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 255;
	       color2: 0 0 0 128;
	       color3: 0 0 0 32;
	    }
	 }
      }
      programs {
         program {
	    name: "hover1";
	    signal: "mouse,in";
	    source: "over";
	    action: STATE_SET "visible" 0.0;
            transition: LINEAR 0.3;
	    target: "e.text.reading";
	    target: "e.text.time";
	 }
         program {
	    name: "hover2";
	    signal: "mouse,out";
	    source: "over";
	    action: STATE_SET "default" 0.0;
            transition: LINEAR 1.0;
	    target: "e.text.reading";
	    target: "e.text.time";
	 }
         program {
	    name: "charge";
	    signal: "e,state,charging";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "fade_clip";
	 }
         program {
	    name: "charge2";
	    signal: "e,state,charging";
	    source: "e";
	    action: STATE_SET "active" 0.0;
	    target: "power";
	    target: "power_glow";
	    after: "charge3";
	 }
         program {
	    name: "charge3";
	    action: STATE_SET "active2" 0.0;
            transition: SINUSOIDAL 1.0;
	    target: "power_glow";
	    after: "charge4";
	 }
         program {
	    name: "charge4";
	    action: STATE_SET "active" 0.0;
            transition: SINUSOIDAL 1.0;
	    target: "power_glow";
	    after: "charge3";
	 }
         program {
	    name: "discharge";
	    signal: "e,state,discharging";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "fade_clip";
	 }
         program {
	    name: "discharge2";
	    signal: "e,state,discharging";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "power";
	    target: "power_glow";
	 }
         program {
	    name: "unknown";
	    signal: "e,state,unknown";
	    source: "e";
	    action: STATE_SET "faded" 0.0;
	    target: "fade_clip";
	 }
         program {
	    name: "pulse";
	    signal: "e,action,pulse,start";
	    source: "e";
	    action: STATE_SET "faded" 0.0;
	    transition: ACCELERATE 0.3;
	    after: "pulse2";
	    target: "pulse_clip";
	 }
         program {
	    name: "pulse2";
	    signal: "pulse2";
	    source: "e";
	    action: STATE_SET "faded" 1.0;
	    transition: ACCELERATE 0.1;
	    target: "pulse_clip";
	 }
         program {
	    name: "pulsestop";
	    signal: "e,action,pulse,stop";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "pulse_clip";
	 }
      }
   }
/////////////////////////////////////////////////////////////////////////////
   /*** MOD: TEMPERATURE ***/
   group { name: "e/modules/temperature/main";
      images {
	 image: "temp_base.png" COMP;
         image: "temp_mid.png" COMP;
         image: "temp_over.png" COMP;
      }
      min: 16 16;
      max:  128 128;
      script {
       public message(Msg_Type:type, id, ...) {
	  if ((type == MSG_FLOAT) && (id == 1)) {
	     new Float:val;
	     val = getfarg(2);
	     set_drag(PART:"temp_top", 0.0, val);
	  }
       }
      }
      parts {
	 part {
	    name: "base";
	    clip_to: "fade_clip";
	    description {
	       state: "default" 0.0;
	       aspect: 0.387 0.387;
	       aspect_preference: BOTH;
	       align: 0.5 0.5;
	       max: 48 124;
	       rel1 {
		  relative: 0.0 0.0;
	       }
	       rel2 {
		  relative: 1.0 1.0;
	       }
	       image {
		  normal: "temp_base.png";
	       }
	    }
	 }
	 part {
	    name: "temp";
	    clip_to: "temp_clip";
	    description {
	       state: "default" 0.0;
	       rel1 {
		  to: "base";
	       }
	       rel2 {
		  to: "base";
	       }
	       image {
		  normal: "temp_mid.png";
	       }
	    }
	 }
	 part {
	    name: "overlay";
	    clip_to: "fade_clip";
	    description {
	       state: "default" 0.0;
	       rel1 {
		  to: "base";
	       }
	       rel2 {
		  to: "base";
	       }
	       image {
		  normal: "temp_over.png";
	       }
	    }
	 }
	 part {
	    name:           "e.text.reading";
	    type:           TEXT;
	    effect:         OUTLINE_SOFT_SHADOW;
	    clip_to:        "fade_clip";
	    description {
	       state: "default" 0.0;
	       align: 1.0 0.0;
	       rel1 {
		  relative: 1.0  0.0;
		  to_x:     "temp";
	       }
	       rel2 {
		  relative: 1.0  0.0;
	       }
	       color: 255 255 255 0;
	       color2: 0 0 0 0;
	       color3: 0 0 0 0;
	       color_class: "module_label";
	       text {
		  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 8;
		  min: 1 1;
		  align: 0.0 0.0;
		  text_class: "module_small";
	       }
	    }
	    description { state: "visible" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 255;
	       color2: 0 0 0 128;
	       color3: 0 0 0 32;
	    }
	 }
	 part {
	    name:           "fade_clip";
	    type:           RECT;
	    mouse_events:   0;
	    description {
	       state: "default" 0.0;
	       color: 255 255 255 255;
	    }
	    description {
	       state: "faded" 0.0;
	       color: 255 255 255 128;
	    }
	 }
	 part {	 
	    name:           "temp_clip";
	    type:           RECT;
	    clip_to:        "fade_clip";
	    mouse_events:   0;
	    description {
	       state: "default" 0.0;
	       rel1 {
		  to_x: "base";
		  to_y: "temp_top";
	       }
	       rel2 {
		  to: "base";
	       }
	    }
	 }
	 part {
	    name:           "temp_top";
	    type:           RECT;
	    dragable {
	       x: 0 0 0;
	       y: -1 1 0;
	       confine: "temp_limit";
	    }
	    mouse_events:   0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part {
	    name:           "temp_limit";
	    type:           RECT;
	    mouse_events:   0;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       rel1 {
		  relative: 0.0 0.081;
		  to: "base";
	       }
	       rel2 {
		  relative: 1.0 0.637;
		  to: "base";
	       }
	    }
	 }
	 part {
	    name:           "over";
	    type:           RECT;
	    description {
	       state: "default" 0.0;
	       color: 0 0 0 0;
	    }
	 }
      }
      programs {
         program {
	    name: "hover1";
	    signal: "mouse,in";
	    source: "over";
	    action: STATE_SET "visible" 0.0;
            transition: LINEAR 0.3;
	    target: "e.text.reading";
	 }
         program {
	    name: "hover2";
	    signal: "mouse,out";
	    source: "over";
	    action: STATE_SET "default" 0.0;
            transition: LINEAR 1.0;
	    target: "e.text.reading";
	 }
	 program {
	    name: "known";
	    signal: "e,state,known";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "fade_clip";
	 }
	 program {
	    name: "unknown";
	    signal: "e,state,unknown";
	    source: "e";
	    action: STATE_SET "faded" 0.0;
	    target: "fade_clip";
	 }
      }
   }

/////////////////////////////////////////////////////////////////////////////
   /*** MOD: CLOCK ***/
   group { name: "e/modules/clock/main";
      images {
	 image: "clock_base.png" COMP;
	 image: "tacho_fg.png" COMP;
	 image: "ch-00.png" COMP;
	 image: "ch-01.png" COMP;
	 image: "ch-02.png" COMP;
	 image: "ch-03.png" COMP;
	 image: "ch-04.png" COMP;
	 image: "ch-05.png" COMP;
	 image: "ch-06.png" COMP;
	 image: "ch-07.png" COMP;
	 image: "ch-08.png" COMP;
	 image: "ch-09.png" COMP;
	 image: "ch-10.png" COMP;
	 image: "ch-11.png" COMP;
	 image: "ch-12.png" COMP;
	 image: "ch-13.png" COMP;
	 image: "ch-14.png" COMP;
	 image: "ch-15.png" COMP;
	 image: "ch-16.png" COMP;
	 image: "ch-17.png" COMP;
	 image: "ch-18.png" COMP;
	 image: "ch-19.png" COMP;
	 image: "ch-20.png" COMP;
	 image: "ch-21.png" COMP;
	 image: "ch-22.png" COMP;
	 image: "ch-23.png" COMP;
	 image: "ch-24.png" COMP;
	 image: "ch-25.png" COMP;
	 image: "ch-26.png" COMP;
	 image: "ch-27.png" COMP;
	 image: "ch-28.png" COMP;
	 image: "ch-29.png" COMP;
	 image: "ch-30.png" COMP;
	 image: "ch-31.png" COMP;
	 image: "ch-32.png" COMP;
	 image: "ch-33.png" COMP;
	 image: "ch-34.png" COMP;
	 image: "ch-35.png" COMP;
	 image: "ch-36.png" COMP;
	 image: "ch-37.png" COMP;
	 image: "ch-38.png" COMP;
	 image: "ch-39.png" COMP;
	 image: "ch-40.png" COMP;
	 image: "ch-41.png" COMP;
	 image: "ch-42.png" COMP;
	 image: "ch-43.png" COMP;
	 image: "ch-44.png" COMP;
	 image: "ch-45.png" COMP;
	 image: "ch-46.png" COMP;
	 image: "ch-47.png" COMP;
	 image: "ch-48.png" COMP;
	 image: "ch-49.png" COMP;
	 image: "ch-50.png" COMP;
	 image: "ch-51.png" COMP;
	 image: "ch-52.png" COMP;
	 image: "ch-53.png" COMP;
	 image: "ch-54.png" COMP;
	 image: "ch-55.png" COMP;
	 image: "ch-56.png" COMP;
	 image: "ch-57.png" COMP;
	 image: "ch-58.png" COMP;
	 image: "ch-59.png" COMP;
	 image: "cm-00.png" COMP;
	 image: "cm-01.png" COMP;
	 image: "cm-02.png" COMP;
	 image: "cm-03.png" COMP;
	 image: "cm-04.png" COMP;
	 image: "cm-05.png" COMP;
	 image: "cm-06.png" COMP;
	 image: "cm-07.png" COMP;
	 image: "cm-08.png" COMP;
	 image: "cm-09.png" COMP;
	 image: "cm-10.png" COMP;
	 image: "cm-11.png" COMP;
	 image: "cm-12.png" COMP;
	 image: "cm-13.png" COMP;
	 image: "cm-14.png" COMP;
	 image: "cm-15.png" COMP;
	 image: "cm-16.png" COMP;
	 image: "cm-17.png" COMP;
	 image: "cm-18.png" COMP;
	 image: "cm-19.png" COMP;
	 image: "cm-20.png" COMP;
	 image: "cm-21.png" COMP;
	 image: "cm-22.png" COMP;
	 image: "cm-23.png" COMP;
	 image: "cm-24.png" COMP;
	 image: "cm-25.png" COMP;
	 image: "cm-26.png" COMP;
	 image: "cm-27.png" COMP;
	 image: "cm-28.png" COMP;
	 image: "cm-29.png" COMP;
	 image: "cm-30.png" COMP;
	 image: "cm-31.png" COMP;
	 image: "cm-32.png" COMP;
	 image: "cm-33.png" COMP;
	 image: "cm-34.png" COMP;
	 image: "cm-35.png" COMP;
	 image: "cm-36.png" COMP;
	 image: "cm-37.png" COMP;
	 image: "cm-38.png" COMP;
	 image: "cm-39.png" COMP;
	 image: "cm-40.png" COMP;
	 image: "cm-41.png" COMP;
	 image: "cm-42.png" COMP;
	 image: "cm-43.png" COMP;
	 image: "cm-44.png" COMP;
	 image: "cm-45.png" COMP;
	 image: "cm-46.png" COMP;
	 image: "cm-47.png" COMP;
	 image: "cm-48.png" COMP;
	 image: "cm-49.png" COMP;
	 image: "cm-50.png" COMP;
	 image: "cm-51.png" COMP;
	 image: "cm-52.png" COMP;
	 image: "cm-53.png" COMP;
	 image: "cm-54.png" COMP;
	 image: "cm-55.png" COMP;
	 image: "cm-56.png" COMP;
	 image: "cm-57.png" COMP;
	 image: "cm-58.png" COMP;
	 image: "cm-59.png" COMP;
#ifdef CLOCK_SECONDS	 
	 image: "cs-00.png" COMP;
	 image: "cs-01.png" COMP;
	 image: "cs-02.png" COMP;
	 image: "cs-03.png" COMP;
	 image: "cs-04.png" COMP;
	 image: "cs-05.png" COMP;
	 image: "cs-06.png" COMP;
	 image: "cs-07.png" COMP;
	 image: "cs-08.png" COMP;
	 image: "cs-09.png" COMP;
	 image: "cs-10.png" COMP;
	 image: "cs-11.png" COMP;
	 image: "cs-12.png" COMP;
	 image: "cs-13.png" COMP;
	 image: "cs-14.png" COMP;
	 image: "cs-15.png" COMP;
	 image: "cs-16.png" COMP;
	 image: "cs-17.png" COMP;
	 image: "cs-18.png" COMP;
	 image: "cs-19.png" COMP;
	 image: "cs-20.png" COMP;
	 image: "cs-21.png" COMP;
	 image: "cs-22.png" COMP;
	 image: "cs-23.png" COMP;
	 image: "cs-24.png" COMP;
	 image: "cs-25.png" COMP;
	 image: "cs-26.png" COMP;
	 image: "cs-27.png" COMP;
	 image: "cs-28.png" COMP;
	 image: "cs-29.png" COMP;
	 image: "cs-30.png" COMP;
	 image: "cs-31.png" COMP;
	 image: "cs-32.png" COMP;
	 image: "cs-33.png" COMP;
	 image: "cs-34.png" COMP;
	 image: "cs-35.png" COMP;
	 image: "cs-36.png" COMP;
	 image: "cs-37.png" COMP;
	 image: "cs-38.png" COMP;
	 image: "cs-39.png" COMP;
	 image: "cs-40.png" COMP;
	 image: "cs-41.png" COMP;
	 image: "cs-42.png" COMP;
	 image: "cs-43.png" COMP;
	 image: "cs-44.png" COMP;
	 image: "cs-45.png" COMP;
	 image: "cs-46.png" COMP;
	 image: "cs-47.png" COMP;
	 image: "cs-48.png" COMP;
	 image: "cs-49.png" COMP;
	 image: "cs-50.png" COMP;
	 image: "cs-51.png" COMP;
	 image: "cs-52.png" COMP;
	 image: "cs-53.png" COMP;
	 image: "cs-54.png" COMP;
	 image: "cs-55.png" COMP;
	 image: "cs-56.png" COMP;
	 image: "cs-57.png" COMP;
	 image: "cs-58.png" COMP;
	 image: "cs-59.png" COMP;
#endif	 
      }
      min: 16 16;
      max:  128 128;
      script {
	 public clock_cb(val) {
	    new buf[11];
	    new year, month, day, yearday, weekday, hour, minute;	    
	    new Float:second;
	    new v;
	    
	    date(year, month, day, yearday, weekday, hour, minute, second);
#ifdef CLOCK_SECONDS	 
	    v = round(second);
	    timer(1.0 - (second - v), "clock_cb", 1);
	    buf[0] = 0;
	    if (v < 10) {snprintf(buf, 10, "0%i", v);}
	    else        {snprintf(buf, 10, "%i", v);}
	    set_state(PART:"seconds", buf, 0.0);
#else
	    timer(60.0 - (second), "clock_cb", 1);
#endif	    
	    v = minute;
	    buf[0] = 0;
	    if (v < 10) {snprintf(buf, 10, "0%i", v);}
	    else        {snprintf(buf, 10, "%i", v);}
	    set_state(PART:"minutes", buf, 0.0);
	    
	    v = ((hour % 12) * 5) + ((minute * 5) / 60);
	    buf[0] = 0;
	    if (v < 10) {snprintf(buf, 10, "0%i", v);}
	    else        {snprintf(buf, 10, "%i", v);}
	    set_state(PART:"hour", buf, 0.0);
	 }
      }
      parts {
	 part { name: "base";
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       image.normal: "clock_base.png";
	    }
	 }
#ifdef CLOCK_SECONDS	 
	 part { name: "seconds";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "base"; rel2.to: "base";
	       image.normal: "cs-00.png";
	    }
	    description { state: "00" 0.0; inherit: "default" 0.0; image.normal: "cs-00.png";}
	    description { state: "01" 0.0; inherit: "default" 0.0; image.normal: "cs-01.png";}
	    description { state: "02" 0.0; inherit: "default" 0.0; image.normal: "cs-02.png";}
	    description { state: "03" 0.0; inherit: "default" 0.0; image.normal: "cs-03.png";}
	    description { state: "04" 0.0; inherit: "default" 0.0; image.normal: "cs-04.png";}
	    description { state: "05" 0.0; inherit: "default" 0.0; image.normal: "cs-05.png";}
	    description { state: "06" 0.0; inherit: "default" 0.0; image.normal: "cs-06.png";}
	    description { state: "07" 0.0; inherit: "default" 0.0; image.normal: "cs-07.png";}
	    description { state: "08" 0.0; inherit: "default" 0.0; image.normal: "cs-08.png";}
	    description { state: "09" 0.0; inherit: "default" 0.0; image.normal: "cs-09.png";}
	    description { state: "10" 0.0; inherit: "default" 0.0; image.normal: "cs-10.png";}
	    description { state: "11" 0.0; inherit: "default" 0.0; image.normal: "cs-11.png";}
	    description { state: "12" 0.0; inherit: "default" 0.0; image.normal: "cs-12.png";}
	    description { state: "13" 0.0; inherit: "default" 0.0; image.normal: "cs-13.png";}
	    description { state: "14" 0.0; inherit: "default" 0.0; image.normal: "cs-14.png";}
	    description { state: "15" 0.0; inherit: "default" 0.0; image.normal: "cs-15.png";}
	    description { state: "16" 0.0; inherit: "default" 0.0; image.normal: "cs-16.png";}
	    description { state: "17" 0.0; inherit: "default" 0.0; image.normal: "cs-17.png";}
	    description { state: "18" 0.0; inherit: "default" 0.0; image.normal: "cs-18.png";}
	    description { state: "19" 0.0; inherit: "default" 0.0; image.normal: "cs-19.png";}
	    description { state: "20" 0.0; inherit: "default" 0.0; image.normal: "cs-20.png";}
	    description { state: "21" 0.0; inherit: "default" 0.0; image.normal: "cs-21.png";}
	    description { state: "22" 0.0; inherit: "default" 0.0; image.normal: "cs-22.png";}
	    description { state: "23" 0.0; inherit: "default" 0.0; image.normal: "cs-23.png";}
	    description { state: "24" 0.0; inherit: "default" 0.0; image.normal: "cs-24.png";}
	    description { state: "25" 0.0; inherit: "default" 0.0; image.normal: "cs-25.png";}
	    description { state: "26" 0.0; inherit: "default" 0.0; image.normal: "cs-26.png";}
	    description { state: "27" 0.0; inherit: "default" 0.0; image.normal: "cs-27.png";}
	    description { state: "28" 0.0; inherit: "default" 0.0; image.normal: "cs-28.png";}
	    description { state: "29" 0.0; inherit: "default" 0.0; image.normal: "cs-29.png";}
	    description { state: "30" 0.0; inherit: "default" 0.0; image.normal: "cs-30.png";}
	    description { state: "31" 0.0; inherit: "default" 0.0; image.normal: "cs-31.png";}
	    description { state: "32" 0.0; inherit: "default" 0.0; image.normal: "cs-32.png";}
	    description { state: "33" 0.0; inherit: "default" 0.0; image.normal: "cs-33.png";}
	    description { state: "34" 0.0; inherit: "default" 0.0; image.normal: "cs-34.png";}
	    description { state: "35" 0.0; inherit: "default" 0.0; image.normal: "cs-35.png";}
	    description { state: "36" 0.0; inherit: "default" 0.0; image.normal: "cs-36.png";}
	    description { state: "37" 0.0; inherit: "default" 0.0; image.normal: "cs-37.png";}
	    description { state: "38" 0.0; inherit: "default" 0.0; image.normal: "cs-38.png";}
	    description { state: "39" 0.0; inherit: "default" 0.0; image.normal: "cs-39.png";}
	    description { state: "40" 0.0; inherit: "default" 0.0; image.normal: "cs-40.png";}
	    description { state: "41" 0.0; inherit: "default" 0.0; image.normal: "cs-41.png";}
	    description { state: "42" 0.0; inherit: "default" 0.0; image.normal: "cs-42.png";}
	    description { state: "43" 0.0; inherit: "default" 0.0; image.normal: "cs-43.png";}
	    description { state: "44" 0.0; inherit: "default" 0.0; image.normal: "cs-44.png";}
	    description { state: "45" 0.0; inherit: "default" 0.0; image.normal: "cs-45.png";}
	    description { state: "46" 0.0; inherit: "default" 0.0; image.normal: "cs-46.png";}
	    description { state: "47" 0.0; inherit: "default" 0.0; image.normal: "cs-47.png";}
	    description { state: "48" 0.0; inherit: "default" 0.0; image.normal: "cs-48.png";}
	    description { state: "49" 0.0; inherit: "default" 0.0; image.normal: "cs-49.png";}
	    description { state: "50" 0.0; inherit: "default" 0.0; image.normal: "cs-50.png";}
	    description { state: "51" 0.0; inherit: "default" 0.0; image.normal: "cs-51.png";}
	    description { state: "52" 0.0; inherit: "default" 0.0; image.normal: "cs-52.png";}
	    description { state: "53" 0.0; inherit: "default" 0.0; image.normal: "cs-53.png";}
	    description { state: "54" 0.0; inherit: "default" 0.0; image.normal: "cs-54.png";}
	    description { state: "55" 0.0; inherit: "default" 0.0; image.normal: "cs-55.png";}
	    description { state: "56" 0.0; inherit: "default" 0.0; image.normal: "cs-56.png";}
	    description { state: "57" 0.0; inherit: "default" 0.0; image.normal: "cs-57.png";}
	    description { state: "58" 0.0; inherit: "default" 0.0; image.normal: "cs-58.png";}
	    description { state: "59" 0.0; inherit: "default" 0.0; image.normal: "cs-59.png";}
	 }
#endif	 
	 part { name: "minutes";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "base"; rel2.to: "base";
	       image.normal: "ch-00.png";
	    }
	    description { state: "00" 0.0; inherit: "default" 0.0; image.normal: "ch-00.png";}
	    description { state: "01" 0.0; inherit: "default" 0.0; image.normal: "ch-01.png";}
	    description { state: "02" 0.0; inherit: "default" 0.0; image.normal: "ch-02.png";}
	    description { state: "03" 0.0; inherit: "default" 0.0; image.normal: "ch-03.png";}
	    description { state: "04" 0.0; inherit: "default" 0.0; image.normal: "ch-04.png";}
	    description { state: "05" 0.0; inherit: "default" 0.0; image.normal: "ch-05.png";}
	    description { state: "06" 0.0; inherit: "default" 0.0; image.normal: "ch-06.png";}
	    description { state: "07" 0.0; inherit: "default" 0.0; image.normal: "ch-07.png";}
	    description { state: "08" 0.0; inherit: "default" 0.0; image.normal: "ch-08.png";}
	    description { state: "09" 0.0; inherit: "default" 0.0; image.normal: "ch-09.png";}
	    description { state: "10" 0.0; inherit: "default" 0.0; image.normal: "ch-10.png";}
	    description { state: "11" 0.0; inherit: "default" 0.0; image.normal: "ch-11.png";}
	    description { state: "12" 0.0; inherit: "default" 0.0; image.normal: "ch-12.png";}
	    description { state: "13" 0.0; inherit: "default" 0.0; image.normal: "ch-13.png";}
	    description { state: "14" 0.0; inherit: "default" 0.0; image.normal: "ch-14.png";}
	    description { state: "15" 0.0; inherit: "default" 0.0; image.normal: "ch-15.png";}
	    description { state: "16" 0.0; inherit: "default" 0.0; image.normal: "ch-16.png";}
	    description { state: "17" 0.0; inherit: "default" 0.0; image.normal: "ch-17.png";}
	    description { state: "18" 0.0; inherit: "default" 0.0; image.normal: "ch-18.png";}
	    description { state: "19" 0.0; inherit: "default" 0.0; image.normal: "ch-19.png";}
	    description { state: "20" 0.0; inherit: "default" 0.0; image.normal: "ch-20.png";}
	    description { state: "21" 0.0; inherit: "default" 0.0; image.normal: "ch-21.png";}
	    description { state: "22" 0.0; inherit: "default" 0.0; image.normal: "ch-22.png";}
	    description { state: "23" 0.0; inherit: "default" 0.0; image.normal: "ch-23.png";}
	    description { state: "24" 0.0; inherit: "default" 0.0; image.normal: "ch-24.png";}
	    description { state: "25" 0.0; inherit: "default" 0.0; image.normal: "ch-25.png";}
	    description { state: "26" 0.0; inherit: "default" 0.0; image.normal: "ch-26.png";}
	    description { state: "27" 0.0; inherit: "default" 0.0; image.normal: "ch-27.png";}
	    description { state: "28" 0.0; inherit: "default" 0.0; image.normal: "ch-28.png";}
	    description { state: "29" 0.0; inherit: "default" 0.0; image.normal: "ch-29.png";}
	    description { state: "30" 0.0; inherit: "default" 0.0; image.normal: "ch-30.png";}
	    description { state: "31" 0.0; inherit: "default" 0.0; image.normal: "ch-31.png";}
	    description { state: "32" 0.0; inherit: "default" 0.0; image.normal: "ch-32.png";}
	    description { state: "33" 0.0; inherit: "default" 0.0; image.normal: "ch-33.png";}
	    description { state: "34" 0.0; inherit: "default" 0.0; image.normal: "ch-34.png";}
	    description { state: "35" 0.0; inherit: "default" 0.0; image.normal: "ch-35.png";}
	    description { state: "36" 0.0; inherit: "default" 0.0; image.normal: "ch-36.png";}
	    description { state: "37" 0.0; inherit: "default" 0.0; image.normal: "ch-37.png";}
	    description { state: "38" 0.0; inherit: "default" 0.0; image.normal: "ch-38.png";}
	    description { state: "39" 0.0; inherit: "default" 0.0; image.normal: "ch-39.png";}
	    description { state: "40" 0.0; inherit: "default" 0.0; image.normal: "ch-40.png";}
	    description { state: "41" 0.0; inherit: "default" 0.0; image.normal: "ch-41.png";}
	    description { state: "42" 0.0; inherit: "default" 0.0; image.normal: "ch-42.png";}
	    description { state: "43" 0.0; inherit: "default" 0.0; image.normal: "ch-43.png";}
	    description { state: "44" 0.0; inherit: "default" 0.0; image.normal: "ch-44.png";}
	    description { state: "45" 0.0; inherit: "default" 0.0; image.normal: "ch-45.png";}
	    description { state: "46" 0.0; inherit: "default" 0.0; image.normal: "ch-46.png";}
	    description { state: "47" 0.0; inherit: "default" 0.0; image.normal: "ch-47.png";}
	    description { state: "48" 0.0; inherit: "default" 0.0; image.normal: "ch-48.png";}
	    description { state: "49" 0.0; inherit: "default" 0.0; image.normal: "ch-49.png";}
	    description { state: "50" 0.0; inherit: "default" 0.0; image.normal: "ch-50.png";}
	    description { state: "51" 0.0; inherit: "default" 0.0; image.normal: "ch-51.png";}
	    description { state: "52" 0.0; inherit: "default" 0.0; image.normal: "ch-52.png";}
	    description { state: "53" 0.0; inherit: "default" 0.0; image.normal: "ch-53.png";}
	    description { state: "54" 0.0; inherit: "default" 0.0; image.normal: "ch-54.png";}
	    description { state: "55" 0.0; inherit: "default" 0.0; image.normal: "ch-55.png";}
	    description { state: "56" 0.0; inherit: "default" 0.0; image.normal: "ch-56.png";}
	    description { state: "57" 0.0; inherit: "default" 0.0; image.normal: "ch-57.png";}
	    description { state: "58" 0.0; inherit: "default" 0.0; image.normal: "ch-58.png";}
	    description { state: "59" 0.0; inherit: "default" 0.0; image.normal: "ch-59.png";}
	 }
	 part { name: "hour";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "base"; rel2.to: "base";
	       image.normal: "cm-00.png";
	    }
	    description { state: "00" 0.0; inherit: "default" 0.0; image.normal: "cm-00.png";}
	    description { state: "01" 0.0; inherit: "default" 0.0; image.normal: "cm-01.png";}
	    description { state: "02" 0.0; inherit: "default" 0.0; image.normal: "cm-02.png";}
	    description { state: "03" 0.0; inherit: "default" 0.0; image.normal: "cm-03.png";}
	    description { state: "04" 0.0; inherit: "default" 0.0; image.normal: "cm-04.png";}
	    description { state: "05" 0.0; inherit: "default" 0.0; image.normal: "cm-05.png";}
	    description { state: "06" 0.0; inherit: "default" 0.0; image.normal: "cm-06.png";}
	    description { state: "07" 0.0; inherit: "default" 0.0; image.normal: "cm-07.png";}
	    description { state: "08" 0.0; inherit: "default" 0.0; image.normal: "cm-08.png";}
	    description { state: "09" 0.0; inherit: "default" 0.0; image.normal: "cm-09.png";}
	    description { state: "10" 0.0; inherit: "default" 0.0; image.normal: "cm-10.png";}
	    description { state: "11" 0.0; inherit: "default" 0.0; image.normal: "cm-11.png";}
	    description { state: "12" 0.0; inherit: "default" 0.0; image.normal: "cm-12.png";}
	    description { state: "13" 0.0; inherit: "default" 0.0; image.normal: "cm-13.png";}
	    description { state: "14" 0.0; inherit: "default" 0.0; image.normal: "cm-14.png";}
	    description { state: "15" 0.0; inherit: "default" 0.0; image.normal: "cm-15.png";}
	    description { state: "16" 0.0; inherit: "default" 0.0; image.normal: "cm-16.png";}
	    description { state: "17" 0.0; inherit: "default" 0.0; image.normal: "cm-17.png";}
	    description { state: "18" 0.0; inherit: "default" 0.0; image.normal: "cm-18.png";}
	    description { state: "19" 0.0; inherit: "default" 0.0; image.normal: "cm-19.png";}
	    description { state: "20" 0.0; inherit: "default" 0.0; image.normal: "cm-20.png";}
	    description { state: "21" 0.0; inherit: "default" 0.0; image.normal: "cm-21.png";}
	    description { state: "22" 0.0; inherit: "default" 0.0; image.normal: "cm-22.png";}
	    description { state: "23" 0.0; inherit: "default" 0.0; image.normal: "cm-23.png";}
	    description { state: "24" 0.0; inherit: "default" 0.0; image.normal: "cm-24.png";}
	    description { state: "25" 0.0; inherit: "default" 0.0; image.normal: "cm-25.png";}
	    description { state: "26" 0.0; inherit: "default" 0.0; image.normal: "cm-26.png";}
	    description { state: "27" 0.0; inherit: "default" 0.0; image.normal: "cm-27.png";}
	    description { state: "28" 0.0; inherit: "default" 0.0; image.normal: "cm-28.png";}
	    description { state: "29" 0.0; inherit: "default" 0.0; image.normal: "cm-29.png";}
	    description { state: "30" 0.0; inherit: "default" 0.0; image.normal: "cm-30.png";}
	    description { state: "31" 0.0; inherit: "default" 0.0; image.normal: "cm-31.png";}
	    description { state: "32" 0.0; inherit: "default" 0.0; image.normal: "cm-32.png";}
	    description { state: "33" 0.0; inherit: "default" 0.0; image.normal: "cm-33.png";}
	    description { state: "34" 0.0; inherit: "default" 0.0; image.normal: "cm-34.png";}
	    description { state: "35" 0.0; inherit: "default" 0.0; image.normal: "cm-35.png";}
	    description { state: "36" 0.0; inherit: "default" 0.0; image.normal: "cm-36.png";}
	    description { state: "37" 0.0; inherit: "default" 0.0; image.normal: "cm-37.png";}
	    description { state: "38" 0.0; inherit: "default" 0.0; image.normal: "cm-38.png";}
	    description { state: "39" 0.0; inherit: "default" 0.0; image.normal: "cm-39.png";}
	    description { state: "40" 0.0; inherit: "default" 0.0; image.normal: "cm-40.png";}
	    description { state: "41" 0.0; inherit: "default" 0.0; image.normal: "cm-41.png";}
	    description { state: "42" 0.0; inherit: "default" 0.0; image.normal: "cm-42.png";}
	    description { state: "43" 0.0; inherit: "default" 0.0; image.normal: "cm-43.png";}
	    description { state: "44" 0.0; inherit: "default" 0.0; image.normal: "cm-44.png";}
	    description { state: "45" 0.0; inherit: "default" 0.0; image.normal: "cm-45.png";}
	    description { state: "46" 0.0; inherit: "default" 0.0; image.normal: "cm-46.png";}
	    description { state: "47" 0.0; inherit: "default" 0.0; image.normal: "cm-47.png";}
	    description { state: "48" 0.0; inherit: "default" 0.0; image.normal: "cm-48.png";}
	    description { state: "49" 0.0; inherit: "default" 0.0; image.normal: "cm-49.png";}
	    description { state: "50" 0.0; inherit: "default" 0.0; image.normal: "cm-50.png";}
	    description { state: "51" 0.0; inherit: "default" 0.0; image.normal: "cm-51.png";}
	    description { state: "52" 0.0; inherit: "default" 0.0; image.normal: "cm-52.png";}
	    description { state: "53" 0.0; inherit: "default" 0.0; image.normal: "cm-53.png";}
	    description { state: "54" 0.0; inherit: "default" 0.0; image.normal: "cm-54.png";}
	    description { state: "55" 0.0; inherit: "default" 0.0; image.normal: "cm-55.png";}
	    description { state: "56" 0.0; inherit: "default" 0.0; image.normal: "cm-56.png";}
	    description { state: "57" 0.0; inherit: "default" 0.0; image.normal: "cm-57.png";}
	    description { state: "58" 0.0; inherit: "default" 0.0; image.normal: "cm-58.png";}
	    description { state: "59" 0.0; inherit: "default" 0.0; image.normal: "cm-59.png";}
	 }
	 part { name: "over";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "base"; rel2.to: "base";
	       image.normal: "tacho_fg.png";
	    }
	 }
      }
      programs {
         program { name: "init";
	    signal: "load";
	    source: "";
	    script {
	       clock_cb(0);
	    }
	 }
      }
   }

/////////////////////////////////////////////////////////////////////////////
   /*** MOD: CPUFREQ ***/
   group { name: "e/modules/cpufreq/main";
      images {
	 image: "tacho_bg.png" COMP;
	 image: "tacho_fg.png" COMP;
	 image: "tacho_dial_00.png" COMP;
	 image: "tacho_dial_01.png" COMP;
	 image: "tacho_dial_02.png" COMP;
	 image: "tacho_dial_03.png" COMP;
	 image: "tacho_dial_04.png" COMP;
	 image: "tacho_dial_05.png" COMP;
	 image: "tacho_dial_06.png" COMP;
	 image: "tacho_dial_07.png" COMP;
	 image: "tacho_dial_08.png" COMP;
	 image: "tacho_dial_09.png" COMP;
	 image: "tacho_dial_10.png" COMP;
	 image: "tacho_dial_11.png" COMP;
	 image: "tacho_dial_12.png" COMP;
	 image: "tacho_dial_13.png" COMP;
	 image: "tacho_dial_14.png" COMP;
	 image: "tacho_dial_15.png" COMP;
      }
      min: 16 16;
      max:  128 128;
      script {
	 public available_frequencies;
	 public available_governors;
	 
       public message(Msg_Type:type, id, ...) {
	  if ((type == MSG_INT_SET) && (id == 1)) {
	     while (count(available_frequencies) > 0) {
		remove(available_frequencies, 0);
	     }
	     for (new i = 2; i < numargs(); i++) {
		append_int(available_frequencies, getarg(i));
	     }
	  } else if ((type == MSG_STRING_SET) && (id == 2)) {
	     new text[100];
	     
	     while (count(available_governors) > 0) {
		remove(available_governors, 0);
	     }
	     
	     for (new i = 2; i < numargs(); i++) {
		snprintf(text, 100, "%s", getarg(i));
		append_str(available_governors, text);
	     }
	  } else if ((type == MSG_INT_SET) && (id == 3)) {
	     new f = getarg(2);
	     new use_buttons = getarg(3);
	     new Float:freq, Float:min_freq, Float:max_freq;
	     new text[100];
	     
	     freq = f;
	     min_freq = fetch_int(available_frequencies, 0);
	     max_freq = fetch_int(available_frequencies,
				  count(available_frequencies) - 1);
	     
	     freq = (freq - min_freq) / (max_freq - min_freq);
	     set_state(PART:"meter", "default", freq);
	     
	     if (f < 1000000) {
		snprintf(text, 100, "%i", f / 1000);
	     } else {
		snprintf(text, 100, "%i.%i", f / 1000000,
			 (f % 1000000) / 100000);
	     }
	     set_text(PART:"readout", text);
	     
	     if (use_buttons == 0) {
//		set_state(PART:"increase_button", "inactive", 0.0);
//		set_state(PART:"decrease_button", "inactive", 0.0);
//		set_state(PART:"increase", "inactive", 0.0);
//		set_state(PART:"decrease", "inactive", 0.0);
	     } else {
//		set_state(PART:"increase_button", "default", 0.0);
//		set_state(PART:"decrease_button", "default", 0.0);
//		set_state(PART:"increase", "default", 0.0);
//		set_state(PART:"decrease", "default", 0.0);
	     }
	  } else if((type == MSG_STRING) && (id == 4)) {
	     new text[100];
	     snprintf(text, 100, "%s", getarg(2));
	  }
       }
      }
      parts {
	 part { name: "fade_clip";
	    type: RECT;
	    mouse_events:   0;
	    description { state: "default" 0.0;
	       color: 255 255 255 255;
	    }
	    description { state: "faded" 0.0;
	       color: 255 255 255 128;
	    }
	 }
	 part { name: "base";
	    clip_to: "fade_clip";
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       image.normal: "tacho_bg.png";
	    }
	 }
	 part {
	    name: "readout";
	    type: TEXT;
//	    effect: OUTLINE_SOFT_SHADOW;
	    mouse_events: 0;
	    clip_to: "fade_clip";
	    description {
	       state: "default" 0.0;
	       rel1 {
		  relative: 0.6 0.7;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 0.6 0.7;
		  offset: 0 0;
	       }
	       color: 255 255 255 255;
	       color2: 0 0 0 128;
	       color3: 0 0 0 32;
	       color_class: "module_label";
	       text {
		  text: "??? Ghz";
		  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 6;
		  align: 0.5 0.5;
		  min: 1 1;
		  text_class: "module_small";
	       }
	    }
	 }
	 part { name: "meter";
	    clip_to: "fade_clip";
	    mouse_events: 0;
	    description { state: "default" 0.0000; image.normal: "tacho_dial_00.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.0666; image.normal: "tacho_dial_01.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.1333; image.normal: "tacho_dial_02.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.2000; image.normal: "tacho_dial_03.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.2666; image.normal: "tacho_dial_04.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.3333; image.normal: "tacho_dial_05.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.4000; image.normal: "tacho_dial_06.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.4666; image.normal: "tacho_dial_07.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.5333; image.normal: "tacho_dial_08.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.6000; image.normal: "tacho_dial_09.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.6666; image.normal: "tacho_dial_10.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.7333; image.normal: "tacho_dial_11.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.8000; image.normal: "tacho_dial_12.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.8666; image.normal: "tacho_dial_13.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 0.9333; image.normal: "tacho_dial_14.png"; rel1.to: "base"; rel2.to: "base"; }
	    description { state: "default" 1.0000; image.normal: "tacho_dial_15.png"; rel1.to: "base"; rel2.to: "base"; }
	 }
	 part { name: "over";
	    clip_to: "fade_clip";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "base";
	       rel2.to: "base";
	       image.normal: "tacho_fg.png";
	    }
	 }
      }
      programs {
/*	 
	 program {
	    name: "next_governor";
	    signal: "mouse,down,1";
	    source: "cpu";
	    action: SIGNAL_EMIT "e,action,governor,next" "";
	 }
	 program {
	    name: "next_governor2";
	    signal: "mouse,down,1";
	    source: "cpu";
	    action: STATE_SET "clicked" 0.0;
	    target: "cpu";
	 }
	 program {
	    name: "next_governor3";
	    signal: "mouse,up,1";
	    source: "cpu";
	    action: STATE_SET "default" 0.0;
	    target: "cpu";
	 }
	 program {
	    name: "increase_frequency";
	    signal: "mouse,down,1";
	    source: "increase";
	    action: SIGNAL_EMIT "e,action,frequency,increase" "";
	 }
	 program {
	    name: "increase_frequency2";
	    signal: "mouse,down,1";
	    source: "increase";
	    action: STATE_SET "clicked" 0.0;
	    target: "increase_button";
	 }
	 program {
	    name: "increase_frequency3";
	    signal: "mouse,up,1";
	    source: "increase";
	    action: STATE_SET "default" 0.0;
	    target: "increase_button";
	 }
	 program {
	    name: "decrease_frequency";
	    signal: "mouse,down,1";
	    source: "decrease";
	    action: SIGNAL_EMIT "e,action,frequency,decrease" "";
	 }
	 program {
	    name: "decrease_frequency2";
	    signal: "mouse,down,1";
	    source: "decrease";
	    action: STATE_SET "clicked" 0.0;
	    target: "decrease_button";
	 }
	 program {
	    name: "decrease_frequency3";
	    signal: "mouse,up,1";
	    source: "decrease";
	    action: STATE_SET "default" 0.0;
	    target: "decrease_button";
	 }
 */
	 program {
	    name: "enabled";
	    signal: "e,state,enabled";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "fade_clip";
	 }
	 program {
	    name: "disabled";
	    signal: "e,state,disabled";
	    source: "e";
	    action: STATE_SET "faded" 0.0;
	    target: "fade_clip";
	 }
      }
   }

/////////////////////////////////////////////////////////////////////////////
   /*** MOD: IBAR ***/
// NOTE: can be same as current default
// FIXME: DO

/////////////////////////////////////////////////////////////////////////////
   /*** MOD: IBOX ***/
// NOTE: can be same as current default
// FIXME: DO

/////////////////////////////////////////////////////////////////////////////
   /*** MOD: WINLIST ***/

// FIXME: Issues - Text isnt positioning correctly with long titles
//		 - Missing window icon
//	         - Missing window text

   group { name: "e/widgets/winlist/main";
      images {
	 image: "menu_bg.png" COMP;
	 image: "bd_top_hilight.png" COMP;
	 image: "bd_title_bg.png" COMP;
	 image: "bd_title_over.png";
      }
      parts {
	 part { name: "base";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       image {
		  normal: "menu_bg.png";
		  border: 2 2 2 2;
	       }
	       fill.smooth: 0;
	    }
	 }
	 part { name: "top_hilight";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel2.relative: 1.0 0.0;
	       rel2.offset: -1 15;
	       image.normal: "bd_top_hilight.png";
               fill.smooth: 0;
	    }
	 }
	 part { name: "title_back";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       rel1.offset: 4 0;
	       rel2.offset: -5 -4;
	       rel2.to_y: "e.text.title";
	       image {
		  normal: "bd_title_bg.png";
		  border: 7 7 2 7;
	       }
               fill.smooth: 0;
	    }
	 }
	 part { name: "e.swallow.list";
	    type: SWALLOW;
	    clip_to: "list_clip";
	    description {
	       state: "default" 0.0;
	       rel1 {
		  relative: 0.0 1.0;
		  offset:   12   8;
		  to_y:    "title_back";
	       }
	       rel2.offset:   -13  -12;
	    }
	 }
	 part {
	    name: "list_clip";
	    type: RECT;
	    description {
	       state: "default" 0.0;
	       color: 255 255 255 255;
	       rel1.to_y: "e.swallow.list";
	       rel2.to_y: "e.swallow.list";
	    }
	 }
	 part { name: "e.text.title";
	    type: TEXT;
	    mouse_events: 0;
	    effect: SOFT_SHADOW;
	    description { state: "default" 0.0;
	       fixed: 1 1;
	       align: 0.5 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -1 0;
	       }
	       color: 224 224 224 255;
	       color3: 0 0 0 64;
	       text {
                  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
                  align: 0.5 0.0;
		  min: 1 1;
	       }
	    }
	 }
	 part { name: "title_over";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       rel1.to: "title_back";
	       rel2.to: "title_back";
	       image {
		  normal: "bd_title_over.png";
		  border: 7 7 2 7;
	       }
	       fill.smooth: 0;
	    }
	 }
      }
   }

   group {
      name: "e/widgets/winlist/item";
      images {
	 image: "menu_sel_bg.png" COMP;
	 image: "menu_sel_fg.png" COMP;
	 image: "pager_window.png" COMP;
	 image: "pager_window_shaded.png" COMP;
	 image: "pager_base2.png";
      }
      parts {
	 part { name: "bg";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -5 -3;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 4 5;
	       }
	       image {
		  normal: "menu_sel_bg.png";
		  border: 8 8 5 9;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -2 0;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 1 2;
	       }
	    }
	 }
	 part { name:           "e.text.label";
	    type:           TEXT;
	    effect:         SHADOW;
	    mouse_events:   0;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset: 1 3;
		  to_x: "e.swallow.icon";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset: -2 -4;
		  to_x: "type";
	       }
	       color: 0 0 0 255;
	       color3: 0 0 0 0;
	       color_class: "winlist_item";
	       text {
		  font: "Sans,Edje-Vera";
		  size: 10;
		  min:  0 1;
		  align: 0.0 0.5;
		  text_class: "winlist_title";
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 255;
	       color3: 0 0 0 64;
	       color_class: "winlist_item";
	    }
	 }
	 part { name: "fg";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1.to: "bg";
	       rel2.to: "bg";
	       image {
		  normal: "menu_sel_fg.png";
		  border: 8 8 5 9;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "e.swallow.icon";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       align: 0.0 0.5;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0 0.0;
		  offset:   3   2;
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset:   3   -2;
		  to_y: "e.text.label";
	       }
	    }
	 }
	 part { name: "type";
	    description { state: "default" 0.0;
	       aspect: 1.0 1.0;
	       align: 1.0 0.5;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 1.0 0.0;
		  offset:   -4  1;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset:   -4  -2;
		  to_y: "e.text.label";
	       }
	       image.normal: "pager_window.png";
	    }
	    description { state: "iconified" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	    description { state: "invisible" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "pager_base2.png";
	    }
	    description { state: "shaded" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "pager_window_shaded.png";
	    }
	 }
	 part { name: "e.event.winlist.item";
	    type:          RECT;
	    mouse_events:  1;
	    description { state: "default" 0.0;
	       min:      12 12;
	       visible:  1;
	       color: 0 0 0 0;
	       rel1.to: "bg";
	       rel2.to: "bg";
	    }
	 }
      }
      programs {
	 program { name:    "type1";
	    signal:  "e,state,iconified";
	    source:  "e";
	    action:  STATE_SET "iconified" 0.0;
	    target:  "type";
	 }
	 program { name:    "type2";
	    signal:  "e,state,invisible";
	    source:  "e";
	    action:  STATE_SET "invisible" 0.0;
	    target:  "type";
	 }
	 program { name:    "type3";
	    signal:  "e,state,shaded";
	    source:  "e";
	    action:  STATE_SET "shaded" 0.0;
	    target:  "type";
	 }
	 program { name: "sel"; 
	    signal: "e,state,selected";
	    source: "e";
	    action: STATE_SET "selected" 0.0;
	    transition: LINEAR 0.2;
	    target: "bg";
	    target: "fg";
	    target: "e.text.label";
	 }
	 program { name: "unsel";
	    signal: "e,state,unselected";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.1;
	    target: "bg";
	    target: "fg";
	    target: "e.text.label";
	 }
      }
   }
   
/////////////////////////////////////////////////////////////////////////////
   /*** MOD: EXEBUF ***/
// FIXME: DO

/////////////////////////////////////////////////////////////////////////////
   /*** MOD: MIXER ***/

// FIXME: Add code for making sound circles fade between states.
// FIXME: Review

   group { name: "e/modules/mixer/main";
      images {
	 image: "mixer.png" COMP;
	 image: "mixer_low_left.png" COMP;
	 image: "mixer_low_right.png" COMP;
	 image: "mixer_med_left.png" COMP;
	 image: "mixer_med_right.png" COMP;
	 image: "mixer_high_left.png" COMP;
	 image: "mixer_high_right.png" COMP;
      }
      max: 128 128;
      min: 1 1;
      script {
	 public message(Msg_Type:type, id, ...) {
	    if ((type == MSG_INT_SET) && (id == 0)) {
	       new mute, left, right;
   
	       mute = getarg(2);
	       left = getarg(3);
	       right = getarg(4);
   
	       if (mute)
		  run_program(PROGRAM:"mute");
	       else
		  run_program(PROGRAM:"unmute");
   
	       if (left <= 0)
		  run_program(PROGRAM:"left_none");
	       else if (left < 33)
		  run_program(PROGRAM:"left_low");
	       else if (left < 66)
		  run_program(PROGRAM:"left_medium");
	       else if (left >= 66)
		  run_program(PROGRAM:"left_high");
   
	       if (right <= 0)
		  run_program(PROGRAM:"right_none");
	       else if (right < 33)
		  run_program(PROGRAM:"right_low");
	       else if (right < 66)
		  run_program(PROGRAM:"right_medium");
	       else if (right >= 66)
		  run_program(PROGRAM:"right_high");
	    }
	 }
      }
      parts {
	 part { name: "speaker";
	    type: IMAGE;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       aspect: 1 1;
	       aspect_preference: BOTH;
	       image.normal: "mixer.png";
	    }
	 }
	 part { name: "left";
	    type: IMAGE;
	    clip_to: "mute";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       aspect: 1 1;
	       aspect_preference: BOTH;
	       rel1.to: "speaker";
	       rel2.to: "speaker";
	       image.normal: "mixer_low_left.png";
	    }
	    description { state: "low" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	    description { state: "medium" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       image.normal: "mixer_med_left.png";
	    }
	    description { state: "high" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       image.normal: "mixer_high_left.png";
	    }
	 }
	 part { name: "right";
	    type: IMAGE;
	    clip_to: "mute";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       aspect: 1 1;
	       aspect_preference: BOTH;
	       rel1.to: "speaker";
	       rel2.to: "speaker";
	       image.normal: "mixer_low_right.png";
	    }
	    description { state: "low" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	    description { state: "medium" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       image.normal: "mixer_med_right.png";
	    }
	    description { state: "high" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       image.normal: "mixer_high_right.png";
	    }
	 }
	 part { name: "mute";
	    mouse_events: 0;
	    type: RECT;
	    description { state: "default" 0.0; color: 255 255 255 255; }
	    description { state: "active" 0.0; color: 255 255 255 64; }
	 }
	 part {
	    name: "over";
	    type: RECT;
	    description {  state: "default" 0.0;
	       rel1.to: "speaker";
	       rel2.to: "speaker";
	       color: 255 255 255 0;
	    }
	 }
      }
      programs {
	 program { name: "mute";
	    action: STATE_SET "active" 0.0;
	    transition: LINEAR 0.3;
	    target: "mute";
	 }
	 program { name: "unmute";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.2;
	    target: "mute";
	 }
   
	 program { name: "left_none"; action: STATE_SET "default" 0.0; target: "left"; }
	 program { name: "left_low"; action: STATE_SET "low" 0.0; target: "left"; }
	 program { name: "left_medium"; action: STATE_SET "medium" 0.0; target: "left"; }
	 program { name: "left_high"; action: STATE_SET "high" 0.0; target: "left"; }

	 program { name: "right_none"; action: STATE_SET "default" 0.0; target: "right"; }
	 program { name: "right_low"; action: STATE_SET "low" 0.0; target: "right"; }
	 program { name: "right_medium"; action: STATE_SET "medium" 0.0; target: "right"; }
	 program { name: "right_high"; action: STATE_SET "high" 0.0; target: "right"; }
   
      }
   }


/////////////////////////////////////////////////////////////////////////////
   /*** FILEMAN ***/
// FIXME: DO

/////////////////////////////////////////////////////////////////////////////
   /*** FWIN ***/
// FIXME: DO

/////////////////////////////////////////////////////////////////////////////
   /*** SYSTEM ***/
// FIXME: REVIEW
// FIXME: Make popup borderless?
// FIXME: Use a bg that is shared by borderless widgets eg. move/resize

   group { name: "e/sys/logout";
      alias: "e/sys/halt";
      alias: "e/sys/reboot";
      alias: "e/sys/suspend";
      alias: "e/sys/hibernate";
      images {
	 image: "menu_bg.png" COMP;
	 image: "logo_white.png" COMP;
	 image: "busy-1.png" COMP;
	 image: "busy-2.png" COMP;
	 image: "busy-3.png" COMP;
	 image: "busy-4.png" COMP;
	 image: "busy-5.png" COMP;
	 image: "busy-6.png" COMP;
	 image: "busy-7.png" COMP;
	 image: "busy-8.png" COMP;
	 image: "busy-9.png" COMP;
      }
      styles {
	 style {
	    name: "sys_style";
	    base: "font=font=Sans:style=Bold,Edje-Vera-Bold font_size=12 text_class=tb_plain align=center valign=center color=#fff style=soft_shadow shadow_color=#0000001f wrap=word";
	    tag:  "br" "\n";
	    tag:  "hilight" "+ font=Sans:style=Bold,Edje-Vera-Bold text_class=tb_light";
	 }
      }
      parts {
	 part { name:          "base";
	    mouse_events:  0;
	    description { state:    "default" 0.0;
      	       min: 250 250;
               max: 250 250;
	       image {
		  normal: "menu_bg.png";
		  border: 2 2 2 2;
	       }
	    }
	 }
	 part { name: "busy";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       min: 32 32;
	       max: 32 32;
	       aspect: 1.0 1.0;
	       align: 0.5 0.0;
	       aspect_preference: BOTH;
	       rel1 {
		  to_y:     "logo";
		  relative: 0.0 1.0;
		  offset:   0 1;
	       }
               rel2 {
		  relative: 1.0 1.0;
		  offset:   -1 1;
	       }
	       image {
		  normal: "busy-9.png";
		  tween:  "busy-1.png";
		  tween:  "busy-2.png";
		  tween:  "busy-3.png";
		  tween:  "busy-4.png";
		  tween:  "busy-5.png";
		  tween:  "busy-6.png";
		  tween:  "busy-7.png";
		  tween:  "busy-8.png";
	       }
	    }
	 }
	 part { name: "logo";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 89 130;
	       max: 89 130;
	       align: 0.5 0.0;
	       image.normal: "logo_white.png";
	    }
	    description { state: "done" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 0;
	    }
	 }
	 part { name: "e.textblock.message";
	    type: TEXTBLOCK;
	    mouse_events:  0;
	    description {
	       state: "default" 0.0;
	       rel1 {
		  offset: 8 8;
		  relative: 0.0 1.0;
		  to_y: "busy";
	       }
	       rel2.offset: -9 -9;
	       text {
		  style:    "sys_style";
		  min:      1 1;
	       }
	    }
	 }
      }
      programs {
	 program { name: "busy_anim";
	    signal: "show";
	    source: "";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.3333;
	    target: "busy";
	    after:  "busy_anim";
	 }
      }
   }

/////////////////////////////////////////////////////////////////////////////
   /*** ABOUT E ***/
// FIXME: DO

/////////////////////////////////////////////////////////////////////////////
   /*** ABOUT THEME ***/
// FIXME: DO

/////////////////////////////////////////////////////////////////////////////
   /*** DIALOG ***/
   group { name: "e/widgets/dialog/main";
      images {
	 image: "dia_grad.png" COMP;
	 image: "dia_topshad.png" COMP;
	 image: "dia_botshad.png" COMP;
	 image: "menu_sep.png" COMP;
      }
      parts {
	 part { name: "base";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       image.normal: "dia_grad.png";
	       fill {
		  smooth: 0;
		  size {
		     relative: 0.0 1.0;
		     offset: 64 0;
		  }
	       }
	    }
	 }
	 part { name: "shadow";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       rel2.relative: 1.0 0.0;
	       rel2.offset: -1 31;
	       image.normal: "dia_topshad.png";
	       fill {
		  smooth: 0;
		  size {
		     relative: 0.0 1.0;
		     offset: 64 0;
		  }
	       }
	    }
	 }
	 part { name: "shadow2";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       rel1.relative: 0.0 1.0;
	       rel1.offset: 0 -4;
	       image.normal: "dia_botshad.png";
	       fill {
		  smooth: 0;
		  size {
		     relative: 0.0 1.0;
		     offset: 64 0;
		  }
	       }
	    }
	 }
	 part { name: "e.swallow.icon";
	    type: SWALLOW;
	    description {
	       state: "default" 0.0;
	       align: 0.0 0.5;
	       fixed: 1 0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset:   4  4;
	       }
	       rel2 {
		  relative: 0.0 0.0;
		  offset:   4  -5;
		  to_y: "e.swallow.buttons";
	       }
	    }
	 }
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  relative: 1.0 0.0;
		  offset:   4   4;
		  to_x:     "e.swallow.icon";
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset:   -5  -9;
		  to_y: "e.swallow.buttons";
	       }
	    }
	 }
	 part { name: "separator";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 16 2;
	       rel1 {
		  relative: 0.0  1.0;
		  offset:   4    -1;
		  to_y:     "e.swallow.content";
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset:   -5   0;
		  to_y:     "e.swallow.content";
	       }
	       image {
		  normal: "menu_sep.png";
		  border: 2 2 0 0;
	       }
	       fill.smooth: 0;
	    }
	 }
	 part {
	    name: "e.swallow.buttons";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       align: 0.5 1.0;
	       fixed: 0 1;
	       rel1 {
		  relative: 0.0 1.0;
		  offset:   4   -5;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset:   -5  -5;
	       }
	    }
	 }
      }
   }

   group { name: "e/widgets/dialog/text";
      styles {
	 style {
	    name: "dialog_style";
	    base: "font=Sans,Edje-Vera font_size=10 text_class=tb_plain align=center color=#000 style=shadow shadow_color=#ffffff80 wrap=word";
	    tag:  "br" "\n";
	    tag:  "hilight" "+ font=Sans:style=Bold,Edje-Vera-Bold text_class=tb_light";
	 }
      }
      parts {
	 part { name: "e.textblock.message";
	    type: TEXTBLOCK;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.offset: 4 4;
	       rel2.offset: -5 -5;
	       text {
		  style:    "dialog_style";
		  min:      1 1;
	       }
	    }
	 }
      }
   }

/////////////////////////////////////////////////////////////////////////////
   /*** ERROR DIALOG ***/
// FIXME: DO

/////////////////////////////////////////////////////////////////////////////
   /*** CONFIGURATION PANEL ***/
   
   group { name: "e/widgets/configure/main";
      images {
	 image: "dia_grad.png" COMP;
	 image: "dia_topshad.png" COMP;
	 image: "dia_botshad.png" COMP;
	 image: "menu_sep.png" COMP;
      }
      parts {
	 part { name: "base";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       image.normal: "dia_grad.png";
	       fill {
		  smooth: 0;
		  size {
		     relative: 0.0 1.0;
		     offset: 64 0;
		  }
	       }
	    }
	 }
	 part { name: "shadow";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       rel2.relative: 1.0 0.0;
	       rel2.offset: -1 31;
	       image.normal: "dia_topshad.png";
	       fill {
		  smooth: 0;
		  size {
		     relative: 0.0 1.0;
		     offset: 64 0;
		  }
	       }
	    }
	 }
	 part { name: "shadow2";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       rel1.relative: 0.0 1.0;
	       rel1.offset: 0 -4;
	       image.normal: "dia_botshad.png";
	       fill {
		  smooth: 0;
		  size {
		     relative: 0.0 1.0;
		     offset: 64 0;
		  }
	       }
	    }
	 }
	 part { name: "separator";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 16 2;
	       rel1 {
		  relative: 0.0  1.0;
		  offset:   4    -1;
		  to_y:     "e.swallow.content";
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset:   -5   0;
		  to_y:     "e.swallow.content";
	       }
	       image {
		  normal: "menu_sep.png";
		  border: 2 2 0 0;
	       }
	       fill.smooth: 0;
	    }
	 }
	 part {
	    name:          "e.swallow.content";
	    type:          SWALLOW;
	    description { state: "default" 0.0;
	       align: 0.5 0.5;
	       min: 320 200;
	       rel1.offset: 24 5;
	       rel2.offset: -25 -35;
	    }
	 }
	 part {
	    name: "e.swallow.button";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       align: 0.5 1.0;
	       fixed: 1 1;
	       rel1 {
		  to_y: "e.swallow.content";
		  relative: 0.5 1.0;
		  offset:   0   2;
	       }
	       rel2.relative: 0.5 1.0;
	       rel2.offset:   0  -2;
	    }
	 }
      }
   }

/////////////////////////////////////////////////////////////////////////////
   /*** MOVE/RESIZE BOX ***/

   group { name: "e/widgets/border/default/move";
      images.image: "menu_bg.png";
      parts {
	 part { name: "base";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       align: 0.5 0.0;
	       image {
		  normal: "menu_bg.png";
		  border: 2 2 2 2;
	       }
	       fill.smooth: 0;
	    }
	 }
	 part { name: "e.text.label";
	    type: TEXT;
	    effect: SHADOW;
	    description { state: "default" 0.0;
	       rel1.offset: 4 4;
	       rel2.offset: -5 -5;
	       color: 0 0 0 255;
	       color3: 255 255 255 64;
	       color_class: "move_text";
	       text { text: "X Y";
		  font: "Sans,Edje-Vera";
		  size: 10;
		  align: 0.5 0.5;
		  min: 1 1;
		  text_class: "move_text";
	       }
	    }
	 }
      }
   }

   group { name: "e/widgets/border/default/resize";
      images.image: "menu_bg.png";
      parts {
	 part { name: "base";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       align: 0.5 0.0;
	       image {
		  normal: "menu_bg.png";
		  border: 2 2 2 2;
	       }
	       fill.smooth: 0;
	    }
	 }
	 part { name: "e.text.label";
	    type: TEXT;
	    effect: SHADOW;
	    description { state: "default" 0.0;
	       rel1.offset: 4 4;
	       rel2.offset: -5 -5;
	       color: 0 0 0 255;
	       color3: 255 255 255 64;
	       color_class: "resize_text";
	       text { text: "WxH";
		  font: "Sans,Edje-Vera";
		  size: 10;
		  align: 0.5 0.5;
		  min: 1 1;
		  text_class: "resize_text";
	       }
	    }
	 }
      }
   }

/////////////////////////////////////////////////////////////////////////////
   /*** TOOLBAR ***/
// FIXME: DO

/////////////////////////////////////////////////////////////////////////////
   /*** TRANSITIONS ***/
// NOTE: can be same as current default
// FIXME: DO

/////////////////////////////////////////////////////////////////////////////
   /*** WIDGETS ***/
   group { name: "e/widgets/check";
      images {
	 image: "check_base.png" COMP;
	 image: "check_on.png" COMP;
	 image: "check_sel.png" COMP;
      }
      parts {
	 part { name: "base";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 16 16;
	       max: 16 16;
	       align: 0.0 0.5;
	       fixed: 1 1;
	       rel1 {
		  relative: 0.0  0.0;
		  offset:   2    2;
	       }
	       rel2 {
		  relative: 0.0  1.0;
		  offset:   2   -3;
	       }
	       image.normal: "check_base.png";
	    }
	 }
	 part { name: "mark";
	    mouse_events: 0;
	    clip_to: "mark_hold";
	    description { state: "default" 0.0;
	       rel1.to: "mark_hold";
	       rel2.to: "mark_hold";
	       image.normal: "check_on.png";
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "check_sel.png";
	    }
	 }
	 part { name: "mark_hold";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  to: "base";
		  offset: -5 -5;
	       }
	       rel2 {
		  to: "base";
		  offset: 4 4;
	       }
	    }
	    description { state: "on" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1.offset: 0 0;
	       rel2.offset: -1 -1;
	    }
	 }
	 part { name: "e.text.label";
	    type: TEXT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min:      16 16;
	       rel1 {
		  to_x:     "base";
		  relative: 1.0  0.0;
		  offset:   2 2;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset:   -2 -2;
	       }
	       color: 0 0 0 255;
	       color_class: "check_text";
	       text {
		  font:     "Sans,Edje-Vera";
		  size:     10;
		  min:      1 1;
		  align:    0.0 0.5;
		  text_class: "check_button";
	       }
	    }
	    description { state:    "disabled" 0.0;
	       inherit:  "default" 0.0;
	       color:    0   0   0 128;
	       color_class: "check_text_disabled";
	    }
	 }
	 part { name: "event";
	    type: RECT;
            ignore_flags: ON_HOLD;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	    }
	    description { state: "disabled" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
      }
      programs {
	 program { name: "on"; /* if the checkmark is to be displayed */
	    signal: "e,state,checked";
	    source: "e";
	    action: STATE_SET "on" 0.0;
	    transition: LINEAR 0.15;
	    target: "mark_hold";
	 }
	 program { name: "off"; /* check mark is not to be displayed */
	    signal: "e,state,unchecked";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.2;
	    target: "mark_hold";
	 }
	 program { name: "click";
	    signal: "mouse,up,1";
	    source: "event";
	    action: SIGNAL_EMIT "e,action,toggle" "";
	 }
      }
   }
   group { name: "e/widgets/check_icon";
      images {
	 image: "check_base.png" COMP;
	 image: "check_on.png" COMP;
	 image: "check_sel.png" COMP;
      }
      parts {
	 part { name: "base";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 16 16;
	       max: 16 16;
	       align: 0.0 0.5;
	       fixed: 1 1;
	       rel1 {
		  relative: 0.0  0.0;
		  offset:   2    2;
	       }
	       rel2 {
		  relative: 0.0  1.0;
		  offset:   2   -3;
	       }
	       image.normal: "check_base.png";
	    }
	 }
	 part { name: "mark";
	    mouse_events: 0;
	    clip_to: "mark_hold";
	    description { state: "default" 0.0;
	       rel1.to: "mark_hold";
	       rel2.to: "mark_hold";
	       image.normal: "check_on.png";
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "check_sel.png";
	    }
	 }
	 part { name: "mark_hold";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  to: "base";
		  offset: -5 -5;
	       }
	       rel2 {
		  to: "base";
		  offset: 4 4;
	       }
	    }
	    description { state: "on" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1.offset: 0 0;
	       rel2.offset: -1 -1;
	    }
	 }
	 part { name: "e.swallow.icon";
	    type: SWALLOW;
	    clip_to: "icon_clip";
	    description { state: "default" 0.0;
	       min: 16 16;
	       rel1 {
		  to_x: "base";
		  relative: 1.0  0.0;
		  offset: 2 2;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset: -2 -2;
	       }
	    }
	    description { state: "label_visible" 0.0;
	       inherit: "default" 0.0;
	       min: 16 16;
	       rel2 {
		  to_y: "base";
		  relative: 1.0  0.0;
		  offset:   -2 -2;
	       }
	    }
	 }
	 part { name: "icon_clip";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "label_clip";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	    }
	    description { state: "label_visible" 0.0;
	       visible: 1;
	    }
	 }
	 part { name: "e.text.label";
	    type: TEXT;
	    mouse_events: 0;
	    clip_to: "label_clip";
	    description { state: "default" 0.0;
	       min: 16 16;
	       rel1 {
		  to_x: "base";
		  relative: 1.0  0.0;
		  offset: 2 2;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset: -2 -2;
	       }
	       color: 0 0 0 255;
	       color_class: "check_text";
	       text {
		  font: "Sans,Edje-Vera";
		  size: 10;
		  min: 1 1;
		  align: 0.0 0.5;
		  text_class: "check_button";
	       }
	    }
	    description { state:    "disabled" 0.0;
	       inherit:  "default" 0.0;
	       color:    0   0   0 128;
	       color_class: "check_text_disabled";
	    }
	 }
	 part { name: "event";
	    type: RECT;
            ignore_flags: ON_HOLD;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	    }
	    description { state: "disabled" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
      }
      programs {
	 program { name: "on"; /* if the checkmark is to be displayed */
	    signal: "e,state,checked";
	    source: "e";
	    action: STATE_SET "on" 0.0;
	    transition: LINEAR 0.15;
	    target: "mark_hold";
	 }
	 program { name: "off"; /* check mark is not to be displayed */
	    signal: "e,state,unchecked";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.2;
	    target: "mark_hold";
	 }
	 program { name: "click";
	    signal: "mouse,up,1";
	    source: "event";
	    action: SIGNAL_EMIT "e,action,toggle" "";
	 }
	 program { name: "label_on";
	    signal: "e,state,labeled";
	    source: "e";
	    action: STATE_SET "label_visible" 0.0;
	    target: "e.swallow.icon";
	    target: "label_clip";
	 }
      }
   }

   /* for a radio menu item - same as check, but only one of a group of radio
    * menu item can be selected at any one time */
   group { name: "e/widgets/radio";
      images {
	 image: "radio_base.png" COMP;
	 image: "radio_on.png" COMP;
	 image: "radio_sel.png" COMP;
      }
      parts {
	 part { name: "base";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 16 16;
	       max: 16 16;
	       align: 0.0 0.5;
	       fixed: 1 1;
	       rel1 {
		  relative: 0.0  0.0;
		  offset:   2    2;
	       }
	       rel2 {
		  relative: 0.0  1.0;
		  offset:   2   -3;
	       }
	       image.normal: "radio_base.png";
	    }
	 }
	 part { name: "mark";
	    mouse_events: 0;
	    clip_to: "mark_hold";
	    description { state: "default" 0.0;
	       rel1.to: "mark_hold";
	       rel2.to: "mark_hold";
	       image.normal: "radio_on.png";
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "radio_sel.png";
	    }
	 }
	 part { name: "mark_hold";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  to: "base";
		  offset: -5 -5;
	       }
	       rel2 {
		  to: "base";
		  offset: 4 4;
	       }
	    }
	    description { state: "on" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1.offset: 0 0;
	       rel2.offset: -1 -1;
	    }
	 }
	 part { name: "e.text.label";
	    type: TEXT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min:      16 16;
	       rel1 {
		  to_x:     "base";
		  relative: 1.0  0.0;
		  offset:   2 2;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset:   -2 -2;
	       }
	       color: 0 0 0 255;
	       color_class: "radio_text";
	       text {
		  font:     "Sans,Edje-Vera";
		  size:     10;
		  min:      1 1;
		  align:    0.0 0.5;
		  text_class: "radio_button";
	       }
	    }
	    description { state:    "disabled" 0.0;
	       inherit:  "default" 0.0;
	       color:    0   0   0 128;
	       color_class: "radio_text_disabled";
	    }
	 }
	 part { name: "event";
	    type: RECT;
            ignore_flags: ON_HOLD;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	    }
	    description { state: "disabled" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
      }
      programs {
	 program { name: "on"; /* if the checkmark is to be displayed */
	    signal: "e,state,on";
	    source: "e";
	    action: STATE_SET "on" 0.0;
	    transition: LINEAR 0.15;
	    target: "mark_hold";
	 }
	 program { name: "off"; /* check mark is not to be displayed */
	    signal: "e,state,off";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.2;
	    target: "mark_hold";
	 }
	 program { name: "click";
	    signal: "mouse,up,1";
	    source: "event";
	    action: SIGNAL_EMIT "e,action,toggle" "";
	 }
      }
   }
   group { name: "e/widgets/radio_icon";
      images {
	 image: "radio_base.png" COMP;
	 image: "radio_on.png" COMP;
	 image: "radio_sel.png" COMP;
      }
      parts {
	 part { name: "base";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 16 16;
	       max: 16 16;
	       align: 0.0 0.5;
	       fixed: 1 1;
	       rel1 {
		  relative: 0.0  0.0;
		  offset:   2    2;
	       }
	       rel2 {
		  relative: 0.0  1.0;
		  offset:   2   -3;
	       }
	       image.normal: "radio_base.png";
	    }
	 }
	 part { name: "mark";
	    mouse_events: 0;
	    clip_to: "mark_hold";
	    description { state: "default" 0.0;
	       rel1.to: "mark_hold";
	       rel2.to: "mark_hold";
	       image.normal: "radio_on.png";
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "radio_sel.png";
	    }
	 }
	 part { name: "mark_hold";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  to: "base";
		  offset: -5 -5;
	       }
	       rel2 {
		  to: "base";
		  offset: 4 4;
	       }
	    }
	    description { state: "on" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1.offset: 0 0;
	       rel2.offset: -1 -1;
	    }
	 }
	 part { name: "e.swallow.icon";
	    type: SWALLOW;
	    clip_to: "icon_clip";
	    description { state: "default" 0.0;
	       min: 16 16;
	       rel1 {
		  to_x: "base";
		  relative: 1.0  0.0;
		  offset: 2 2;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset: -2 -2;
	       }
	    }
	    description { state: "label_visible" 0.0;
	       inherit: "default" 0.0;
	       min: 16 16;
	       rel2 {
		  to_y: "e.text.label";
		  relative: 1.0  0.0;
		  offset:   -2 -2;
	       }
	    }
	 }
 	 part { name: "icon_clip";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "label_clip";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	    }
	    description { state: "label_visible" 0.0;
	       visible: 1;
	    }
	 }
	 part { name: "e.text.label";
	    type: TEXT;
	    mouse_events: 0;
	    clip_to: "label_clip";
	    description { state: "default" 0.0;
	       min: 16 16;
	       rel1 {
		  to_x: "base";
		  relative: 1.0  0.5;
		  offset: 2 1;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset: -2 -2;
	       }
	       color: 0 0 0 255;
	       color_class: "radio_text";
	       text {
		  font: "Sans,Edje-Vera";
		  size: 10;
		  min: 1 1;
		  align: 0.0 0.5;
		  text_class: "radio_button";
	       }
	    }
	    description { state:    "disabled" 0.0;
	       inherit:  "default" 0.0;
	       color:    0   0   0 128;
	       color_class: "radio_text_disabled";
	    }
	 }
	 part { name: "event";
	    type: RECT;
            ignore_flags: ON_HOLD;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	    }
	    description { state: "disabled" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
      }
      programs {
	 program { name: "on"; /* if the radiomark is to be displayed */
	    signal: "e,state,on";
	    source: "e";
	    action: STATE_SET "on" 0.0;
	    transition: LINEAR 0.15;
	    target: "mark_hold";
	 }
	 program { name: "off"; /* radio mark is not to be displayed */
	    signal: "e,state,off";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    transition: LINEAR 0.2;
	    target: "mark_hold";
	 }
	 program { name: "click";
	    signal: "mouse,up,1";
	    source: "event";
	    action: SIGNAL_EMIT "e,action,toggle" "";
	 }
	 program { name: "label_on";
	    signal: "e,state,labeled";
	    source: "e";
	    action: STATE_SET "label_visible" 0.0;
	    target: "e.swallow.icon";
	    target: "label_clip";
	 }
      }
   }

   group {
      name: "e/widgets/button";
      images {
	 image: "bt_base1.png" COMP;
	 image: "bt_base2.png" COMP;
	 image: "bt_hilight.png" COMP;
	 image: "bt_shine.png" COMP;
	 image: "bt_dis_base.png" COMP;
	 image: "bt_dis_hilight.png" COMP;
      }
      parts {
	 part { name: "button_image";
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       min: 32 16;
	       image {
		  normal: "bt_base2.png";
		  border: 7 7 7 7;
	       }
	    }
	    description { state: "clicked" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "bt_base1.png";
	    }
	    description { state: "disabled" 0.0;
	       inherit:  "default" 0.0;
	       image {
		  normal: "bt_dis_base.png";
		  border: 4 4 4 4;
	       }
	    }
	 }
	 part {
	    name: "e.swallow.icon";
	    type: SWALLOW;
	    description {
	       state: "default" 0.0;
	       align: 0.0 0.5;
	       rel1 {
		  relative: 0.0 0.0;
		  offset:   3   3;
		  to: "button_image";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset:   3  -4;
		  to: "button_image";
	       }
	    }
	    description {
	       state: "combo" 0.0;
	       inherit: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       align: 0.0 0.5;
	       rel1 {
		  relative: 0.0 0.0;
		  offset:   3  3;
		  to: "button_image";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  offset:   3   -4;
		  to: "button_image";
	       }
	    }
	    description {
	       state: "icon" 0.0;
	       inherit: "default" 0.0;
	       aspect: 1.0 1.0;
	       aspect_preference: BOTH;
	       align: 0.5 0.5;
	       rel1 {
		  relative: 0.0 0.0;
		  offset:   3  3;
		  to: "button_image";
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset:   -4   -4;
		  to: "button_image";
	       }
	    }
	 }
	 part {
	    name:          "e.text.label";
	    type:          TEXT;
	    effect:        SOFT_SHADOW;
	    mouse_events:  0;
	    description {
	       state:    "default" 0.0;
	       rel1 {
		  relative: 1.0  0.0;
		  offset:   2    3;
		  to_x:   "e.swallow.icon";
		  to_y:   "button_image";
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset:   -4   -4;
		  to:     "button_image";
	       }
	       color: 224 224 224 255;
	       color3: 0 0 0 64;
	       color_class: "button_text";
	       text {
		  font:     "Sans,Edje-Vera";
		  size:     10;
		  min:      1 1;
		  align:    0.5 0.5;
		  text_class: "button";
	       }
	    }
	    description { state: "disabled" 0.0;
	       inherit: "default" 0.0;
	       color: 0 0 0 128;
	       color3: 0 0 0 0;
	       color_class: "button_text_disabled";
	    }
	    description { state: "icon" 0.0;
	       inherit: "default" 0.0;
	       visible: 0;
	    }
	 }
	 part { name: "over1";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel2.relative: 1.0 0.5;
	       image {
		  normal: "bt_hilight.png";
		  border: 7 7 7 0;
	       }
	    }
	    description { state: "disabled" 0.0;
	       inherit:  "default" 0.0;
	       image {
		  normal: "bt_dis_hilight.png";
		  border: 4 4 4 0;
	       }
	    }
	 }
	 part { name: "over2";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       image {
		  normal: "bt_shine.png";
		  border: 7 7 7 7;
	       }
	    }
	    description { state: "disabled" 0.0;
	       inherit:  "default" 0.0;
	       visible: 0;
	    }
	 }
 	 part { name: "disabler";
	    type: RECT;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       visible: 0;
	    }
	    description { state: "disabled" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
      }
      programs {
	 program {
	    name:   "button_click";
	    signal: "mouse,down,1";
	    source: "button_image";
	    action: STATE_SET "clicked" 0.0;
	    target: "button_image";
	 }
	 program {
	    name:   "button_unclick";
	    signal: "mouse,up,1";
	    source: "button_image";
	    action: STATE_SET "default" 0.0;
	    target: "button_image";
	 }
	 program {
	    name:   "button_unclick2";
	    signal: "mouse,clicked,1";
	    source: "button_image";
	    action: SIGNAL_EMIT "e,action,click" "";
	 }
	 program {
	    name: "text_state";
	    signal: "e,state,text";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "e.swallow.icon";
	    target: "e.text.label";
	 }
	 program {
	    name: "icon_state";
	    signal: "e,state,icon";
	    source: "e";
	    action: STATE_SET "icon" 0.0;
	    target: "e.swallow.icon";
	    target: "e.text.label";
	 }
	 program {
	    name: "combo_state";
	    signal: "e,state,combo";
	    source: "e";
	    action: STATE_SET "combo" 0.0;
	    target: "e.swallow.icon";
	    target: "e.text.label";
	 }
	 program {
	    name: "disable";
	    signal: "e,state,disabled";
	    source: "e";
	    action: STATE_SET "disabled" 0.0;
	    target: "button_image";
	    target: "over1";
	    target: "e.text.label"; 
	    target: "disabler"; 
	 }
	 program {
	    name: "enable";
	    signal: "e,state,enabled";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "button_image";
	    target: "over1";
	    target: "e.text.label"; 
	    target: "disabler"; 
	 }
      }
   }

   group { name: "e/widgets/scrollframe";
      images {
	 image: "shelf_inset.png" COMP;
	 image: "arrow_left.png" COMP;
	 image: "arrow_right.png" COMP;
	 image: "arrow_up.png" COMP;
	 image: "arrow_down.png" COMP;
	 image: "bt_sm_base1.png" COMP;
	 image: "bt_sm_base2.png" COMP;
	 image: "bt_sm_shine.png" COMP;
	 image: "bt_sm_hilight.png" COMP;
	 image: "sb_runnerh.png" COMP;
	 image: "sb_runnerv.png" COMP;
      }
      parts {
         part { name: "bg";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.offset: 1 1;
	       rel2.offset: -2 -2;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "clipper";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "bg";
	       rel2.to: "bg";
	    }
	 }
	 part { name: "e.swallow.content";
	    clip_to: "clipper";
	    type: SWALLOW;
	    description {
	       state: "default" 0.0;
	       rel1.offset: 1 1;
	       rel2 {
		  relative: 0.0  0.0;
		  offset:   -1   -1;
		  to_x: "sb_vbar";
		  to_y: "sb_hbar";
	       }
	    }
	 }
	 part { name: "conf_over";
	    mouse_events:  0;
	    description { state: "default" 0.0;
	       image {
		  normal: "shelf_inset.png";
		  border: 7 7 7 7;
		  middle: 0;
	       }
	       fill.smooth : 0;
	    }
	 }
	 part { name: "sb_vbar";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 16 16;
	       align: 1.0 0.0;
	       rel1 {
		  to: "bg";
		  relative: 1.0 0.0;
		  offset:   -2 1;
	       }
	       rel2 {
		  to: "bg";
		  relative: 1.0 0.0;
		  offset:   -2 -1;
		  to_y:     "sb_hbar";
	       }
	    }	
	    description { state: "hidden" 0.0;
	       visible: 0;
	       max: 0 99999;
	       rel1 {
		  to: "bg";
		  relative: 1.0 0.0;
		  offset:   -1 0;
	       }
	       rel2 {
		  to: "bg";
		  relative: 1.0 0.0;
		  offset:   -1 -1;
		  to_y:     "sb_hbar";
	       }
	    }
	 }
	 part { name: "sb_vbar_base";
	    type: RECT;
	    clip_to: "sb_vbar";
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       rel1 {
		  relative: 0.0  1.0;
		  offset:   0	 -2;
		  to:       "sb_vbar_a1";
	       }
	       rel2 {
		  relative: 1.0  0.0;
		  offset:   -1	 1;
		  to:       "sb_vbar_a2";
	       }
	    }
	 }
	 part { name: "sb_vbar_runner";
	    clip_to: "sb_vbar";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       max: 3 99999;
	       rel1.to:       "sb_vbar_base";
	       rel1.offset:   1 0;
	       rel2.to:       "sb_vbar_base";
	       image {
		  normal: "sb_runnerv.png";
		  border: 0 0 4 4;
	       }
	       fill.smooth: 0;
	    }
	 }
	 part { name: "sb_vbar_p1";
	    type: RECT;
	    clip_to: "sb_vbar";
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       rel1 {
		  relative: 0.0 1.0;
		  to:       "sb_vbar_a1";
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  to:       "e.dragable.vbar";
	       }
	    }
	 }
	 part { name: "sb_vbar_p2";
	    type: RECT;
	    clip_to: "sb_vbar";
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       rel1 {
		  relative: 0.0 1.0;
		  to:       "e.dragable.vbar";
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  to:       "sb_vbar_a2";
	       }
	    }
	 }
	 part { name: "e.dragable.vbar";
	    clip_to: "sb_vbar";
	    mouse_events: 1;
	    dragable {
	       x: 0 0 0;
	       y: 1 1 0;
	       confine: "sb_vbar_base";
	    }
	    description { state: "default" 0.0;
	       min: 17 32;
	       rel1 {
		  relative: 0.5  0.5;
		  offset:   0    0;
		  to: "sb_vbar_base";
	       }
	       rel2 {
		  relative: 0.5  0.5;
		  offset:   0    0;
		  to: "sb_vbar_base";
	       }
	       image {
		  normal: "bt_sm_base2.png";
		  border: 6 6 6 6;
	       }
	    }
	    description { state: "clicked" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "bt_sm_base1.png";
	    }
	 }
	 part { name: "sb_vbar_over1";
	    clip_to: "sb_vbar";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "e.dragable.vbar";
	       rel2.relative: 1.0 0.5;
	       rel2.to: "e.dragable.vbar";
	       image {
		  normal: "bt_sm_hilight.png";
		  border: 6 6 6 0;
	       }
	    }
	 }
	 part { name: "sb_vbar_over2";
	    clip_to: "sb_vbar";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "e.dragable.vbar";
	       rel2.to: "e.dragable.vbar";
	       image {
		  normal: "bt_sm_shine.png";
		  border: 6 6 6 0;
	       }
	    }
	 }
	 
	 part { name: "sb_vbar_a1";
	    type: RECT;
	    clip_to: "sb_vbar";
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       min: 17 17;
	       align: 0.5 0.0;
	       aspect_preference: HORIZONTAL;
	       color: 0 0 0 0;
	       rel1 { to: "sb_vbar";
		  relative: 0.0  0.0;
		  offset:   0    0;
	       }
	       rel2 { to: "sb_vbar";
		  relative: 1.0  0.0;
		  offset:   -1   0;
	       }
	    }
	 }
	 part { name: "sb_vbar_a1_arrow";
	    mouse_events: 0;
	    clip_to: "sb_vbar";
	    description { state: "default" 0.0;
	       max: 9 9;
	       rel1.to: "sb_vbar_a1";
	       rel2.to: "sb_vbar_a1";
	       image.normal: "arrow_up.png";
	    }
	    description { state: "clicked" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 -1;
	       rel2.offset: -1 -2;
	    }
	 }

	 part { name: "sb_vbar_a2";
	    type: RECT;
	    clip_to: "sb_vbar";
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       min: 17 17;
	       align: 0.5 1.0;
	       aspect: 1.0 1.0;
	       aspect_preference: HORIZONTAL;
	       color: 0 0 0 0;
	       rel1 {
		  to: "sb_vbar";
		  relative: 0.0  1.0;
		  offset:   0    0;
	       }
	       rel2 {
		  to: "sb_vbar";
		  relative: 1.0  1.0;
		  offset:   -1   0;
	       }
	    }
	 }
	 part { name: "sb_vbar_a2_arrow";
	    type: IMAGE;
	    mouse_events: 0;
	    clip_to: "sb_vbar";
	    description { state: "default" 0.0;
	       max: 9 9;
	       rel1.to: "sb_vbar_a2";
	       rel2.to: "sb_vbar_a2";
	       image.normal: "arrow_down.png";
	    }
	    description { state: "clicked" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 0 1;
	       rel2.offset: -1 0;
	    }
	 }

	 part { name: "sb_hbar";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 17 17;
	       align: 0.0 1.0;
	       rel1 {
		  to: "bg";
		  relative: 0.0 1.0;
		  offset:   1 -2;
	       }
	       rel2 {
		  to: "bg";
		  relative: 0.0 1.0;
		  offset:   -1 -2;
		  to_x:     "sb_vbar";
	       }
	    }
	    description { state: "hidden" 0.0;
	       visible: 0;
	       rel1 {
		  to: "bg";
		  relative: 0.0  1.0;
		  offset:   0    -1;
	       }
	       rel2 {
		  to: "bg";
		  relative: 0.0  1.0;
		  offset:   -1   -1;
		  to_x:     "sb_vbar";
	       }
	    }
	 }
	 part { name: "sb_hbar_base";
	    type: RECT;
	    clip_to: "sb_hbar";
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       rel1 {
		  relative: 1.0  0.0;
		  offset:   -2   0;
		  to:       "sb_hbar_a1";
	       }
	       rel2 {
		  relative: 0.0  1.0;
		  offset:   1   -1;
		  to:       "sb_hbar_a2";
	       }
	    }
	 }
	 part { name: "sb_hbar_runner";
	    clip_to: "sb_hbar";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       max: 99999 2;
	       rel1.to:       "sb_hbar_base";
	       rel1.offset:   0 1;
	       rel2.to:       "sb_hbar_base";
	       image {
		  normal: "sb_runnerh.png";
		  border: 4 4 0 0;
	       }
	       fill.smooth: 0;
	    }
	 }
	 part { name: "sb_hbar_p1";
	    type: RECT;
	    clip_to: "sb_hbar";
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       rel1 {
		  relative: 1.0 0.0;
		  to:       "sb_hbar_a1";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  to:       "e.dragable.hbar";
	       }
	    }
	 }
	 part { name: "sb_hbar_p2";
	    type: RECT;
	    clip_to: "sb_hbar";
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       rel1 {
		  relative: 1.0 0.0;
		  to:       "e.dragable.hbar";
	       }
	       rel2 {
		  relative: 0.0 1.0;
		  to:       "sb_hbar_a2";
	       }
	    }
	 }
	 part { name: "e.dragable.hbar";
	    clip_to: "sb_hbar";
	    mouse_events: 1;
	    dragable {
	       x: 1 1 0;
	       y: 0 0 0;
	       confine: "sb_hbar_base";
	    }
	    description { state: "default" 0.0;
	       min: 32 17;
	       rel1 {
		  relative: 0.5  0.5;
		  offset:   0    0;
		  to: "sb_hbar_base";
	       }
	       rel2 {
		  relative: 0.5  0.5;
		  offset:   0    0;
		  to: "sb_hbar_base";
	       }
	       image {
		  normal: "bt_sm_base2.png";
		  border: 6 6 6 6;
	       }
	    }
	    description { state: "clicked" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "bt_sm_base1.png";
	    }
	 }
	 part { name: "sb_hbar_over1";
	    clip_to: "sb_hbar";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "e.dragable.hbar";
	       rel2.relative: 1.0 0.5;
	       rel2.to: "e.dragable.hbar";
	       image {
		  normal: "bt_sm_hilight.png";
		  border: 6 6 6 0;
	       }
	    }
	 }
	 part { name: "sb_hbar_over2";
	    clip_to: "sb_hbar";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "e.dragable.hbar";
	       rel2.to: "e.dragable.hbar";
	       image {
		  normal: "bt_sm_shine.png";
		  border: 6 6 6 0;
	       }
	    }
	 }

	 part { name: "sb_hbar_a1";
	    type: RECT;
	    clip_to: "sb_hbar";
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       min: 17 17;
	       align: 0.0 0.5;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       color: 0 0 0 0;
	       rel1 {
		  to: "sb_hbar";
		  relative: 0.0  0.0;
		  offset:   0    0;
	       }
	       rel2 {
		  to: "sb_hbar";
		  relative: 0.0  1.0;
		  offset:   0   -1;
	       }
	    }
	 }
	 part { name: "sb_hbar_a1_arrow";
	    type: IMAGE;
	    mouse_events: 0;
	    clip_to: "sb_hbar";
	    description { state: "default" 0.0;
	       max: 9 9;
	       rel1.to: "sb_hbar_a1";
	       rel2.to: "sb_hbar_a1";
	       image.normal: "arrow_left.png";
	    }
	    description { state: "clicked" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: -1 0;
	       rel2.offset: -2 -1;
	    }
	 }

	 part { name: "sb_hbar_a2";
	    type: RECT;
	    clip_to: "sb_hbar";
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       min: 17 17;
	       align: 1.0 0.5;
	       aspect: 1.0 1.0;
	       aspect_preference: VERTICAL;
	       color: 0 0 0 0;
	       rel1 {
		  to: "sb_hbar";
		  relative: 1.0  0.0;
		  offset:   -1    0;
	       }
	       rel2 {
		  to: "sb_hbar";
		  relative: 1.0  1.0;
		  offset:   -1   -1;
	       }
	    }
	 }
	 part { name: "sb_hbar_a2_arrow";
	    type: IMAGE;
	    mouse_events: 0;
	    clip_to: "sb_hbar";
	    description { state: "default" 0.0;
	       max: 9 9;
	       rel1.to: "sb_hbar_a2";
	       rel2.to: "sb_hbar_a2";
	       image.normal: "arrow_right.png";
	    }
	    description { state: "clicked" 0.0;
	       inherit: "default" 0.0;
	       rel1.offset: 1 0;
	       rel2.offset: 0 -1;
	    }
	 }
      }
      programs {	 
	 program { name: "sb_vbar_show";
	    signal: "e,action,show,vbar";
	    source: "e";
	    action:  STATE_SET "default" 0.0;
	    target: "sb_vbar";
	 }
	 program { name: "sb_vbar_hide";
	    signal: "e,action,hide,vbar";
	    source: "e";
	    action:  STATE_SET "hidden" 0.0;
	    target: "sb_vbar";
	 }
	 program { name: "sb_hbar_show";
	    signal: "e,action,show,hbar";
	    source: "e";
	    action:  STATE_SET "default" 0.0;
	    target: "sb_hbar";
	 }
	 program { name: "sb_hbar_hide";
	    signal: "e,action,hide,hbar";
	    source: "e";
	    action:  STATE_SET "hidden" 0.0;
	    target: "sb_hbar";
	 }

	 program { name: "sb_vbar_a1_down";
	    signal: "mouse,down,1";
	    source: "sb_vbar_a1";
	    action:  STATE_SET "clicked" 0.0;
	    target: "sb_vbar_a1_arrow";
	 }
	 program { name: "sb_vbar_a1_down2";
	    signal: "mouse,down,1";
	    source: "sb_vbar_a1";
	    action:  DRAG_VAL_STEP 0.0 -1.0;
	    target: "e.dragable.vbar";
	 }
	 program { name: "sb_vbar_a1_up";
	    signal: "mouse,up,1";
	    source: "sb_vbar_a1";
	    action:  STATE_SET "default" 0.0;
	    target: "sb_vbar_a1_arrow";
	 }
	 program { name: "sb_vbar_a2_down";
	    signal: "mouse,down,1";
	    source: "sb_vbar_a2";
	    action:  STATE_SET "clicked" 0.0;
	    target: "sb_vbar_a2_arrow";
	 }
	 program { name: "sb_vbar_a2_down2";
	    signal: "mouse,down,1";
	    source: "sb_vbar_a2";
	    action:  DRAG_VAL_STEP 0.0 1.0;
	    target: "e.dragable.vbar";
	 }
	 program { name: "sb_vbar_a2_up";
	    signal: "mouse,up,1";
	    source: "sb_vbar_a2";
	    action:  STATE_SET "default" 0.0;
	    target: "sb_vbar_a2_arrow";
	 }
	 program { name: "sb_vbar_p1_down";
	    signal: "mouse,down,1";
	    source: "sb_vbar_p1";
	    action:  DRAG_VAL_PAGE 0.0 -1.0;
	    target: "e.dragable.vbar";
	 }
	 program { name: "sb_vbar_p2_down";
	    signal: "mouse,down,1";
	    source: "sb_vbar_p2";
	    action:  DRAG_VAL_PAGE  0.0 1.0;
	    target: "e.dragable.vbar";
	 }
	 program { name: "sb_vbar_down";
	    signal: "mouse,down,1";
	    source: "e.dragable.vbar";
	    action:  STATE_SET "clicked" 0.0;
	    target: "e.dragable.vbar";
	 }
	 program { name: "sb_vbar_up";
	    signal: "mouse,up,1";
	    source: "e.dragable.vbar";
	    action:  STATE_SET "default" 0.0;
	    target: "e.dragable.vbar";
	 }
	 program { name: "sb_hbar_a1_down";
	    signal: "mouse,down,1";
	    source: "sb_hbar_a1";
	    action:  STATE_SET "clicked" 0.0;
	    target: "sb_hbar_a1_arrow";
	 }
	 program { name: "sb_hbar_a1_down2";
	    signal: "mouse,down,1";
	    source: "sb_hbar_a1";
	    action:  DRAG_VAL_STEP -1.0 0.0;
	    target: "e.dragable.hbar";
	 }
	 program { name: "sb_hbar_a1_up";
	    signal: "mouse,up,1";
	    source: "sb_hbar_a1";
	    action:  STATE_SET "default" 0.0;
	    target: "sb_hbar_a1_arrow";
	 }
	 program { name: "sb_hbar_a2_down";
	    signal: "mouse,down,1";
	    source: "sb_hbar_a2";
	    action:  STATE_SET "clicked" 0.0;
	    target: "sb_hbar_a2_arrow";
	 }
	 program { name: "sb_hbar_a2_down2";
	    signal: "mouse,down,1";
	    source: "sb_hbar_a2";
	    action:  DRAG_VAL_STEP 1.0 0.0;
	    target: "e.dragable.hbar";
	 }
	 program { name: "sb_hbar_a2_up";
	    signal: "mouse,up,1";
	    source: "sb_hbar_a2";
	    action:  STATE_SET "default" 0.0;
	    target: "sb_hbar_a2_arrow";
	 }
	 program { name: "sb_hbar_p1_down";
	    signal: "mouse,down,1";
	    source: "sb_hbar_p1";
	    action:  DRAG_VAL_PAGE -1.0 0.0;
	    target: "e.dragable.hbar";
	 }
	 program { name: "sb_hbar_p2_down";
	    signal: "mouse,down,1";
	    source: "sb_hbar_p2";
	    action:  DRAG_VAL_PAGE  1.0 0.0;
	    target: "e.dragable.hbar";
	 }
	 program { name: "sb_hbar_down";
	    signal: "mouse,down,1";
	    source: "e.dragable.hbar";
	    action:  STATE_SET "clicked" 0.0;
	    target: "e.dragable.hbar";
	 }
	 program { name: "sb_hbar_up";
	    signal: "mouse,up,1";
	    source: "e.dragable.hbar";
	    action:  STATE_SET "default" 0.0;
	    target: "e.dragable.hbar";
	 }
      }
   }

// FIXME: Make the e.swallow.icon draw a correctly sized
//	  box even when there isnt an icon there. This fixes
//	  the size of ilist items without icons so they 
//	  are regular. Is this a fixme for ilist.c?

// FIXME: ilist stacking and raising isnt working quite right.

   group { name: "e/widgets/ilist";
      data.item: "stacking" "above";
      data.item: "selectraise" "on"; 
      images {
         image: "bt_sm_base1.png" COMP;
	 image: "bt_sm_shine.png" COMP;
	 image: "bt_sm_hilight.png" COMP;
	 image: "ilist_1.png" COMP;
	 image: "ilist_item_shadow.png" COMP;
      }
      parts {
	 part {
	    name: "base_sh";
	    mouse_events: 0;
	    description {
	       state: "default" 0.0;
	       aspect: 6.4 6.4;
	       aspect_preference: HORIZONTAL;
	       align: 0.0 0.0;
	       rel1 {
		  to: "base";
		  relative: 0.0 1.0;
		  offset: 0 0;
	       }
	       rel2 {
		  to: "base";
		  relative: 1.0 1.0;
		  offset: -1 0;
	       }
	       image {
		  normal: "ilist_item_shadow.png";
	       }
	    }
	 }
	 part {
	    name: "base";
	    mouse_events: 0;
	    description {
	       state: "default" 0.0;
	       image {
		  normal: "ilist_1.png";
		  border: 2 2 2 2;
	       }
	    }
	 }
	 part { name: "bg";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -5 -5;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 4 4;
	       }
	       image {
		  normal: "bt_sm_base1.png";
		  border: 6 6 6 6;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -2 -2;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 1 1;
	       }
	    }
	 }
	 part {
	    name:          "e.swallow.icon";
	    type:          SWALLOW;
	    description {
	       state:    "default" 0.0;
	       align:    0.0 0.5;
	       aspect:   1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0  0.0;
		  offset:   4    4;
	       }
	       rel2 {
		  relative: 0.0  1.0;
		  offset:   4   -5;
	       }
	    }
	 }
	 part {
	    name:           "e.text.label";
	    type:           TEXT;
	    effect:         SOFT_SHADOW;
	    mouse_events:   0;
	    description {
	       state: "default" 0.0;
	       min:      16 16;
	       rel1 {
		  to_x:     "e.swallow.icon";
		  relative: 1.0  0.0;
		  offset:   4 4;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset:   -5 -5;
	       }
	       color: 0 0 0 255;
	       color3: 0 0 0 0;
	       color_class: "ilist_item";
	       text {
		  font: "Sans,Edje-Vera";
		  size: 10;
		  min: 1 1;
		  align: 0.0 0.5;
		  text_class: "ilist_item";
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 255;
	       color3: 0 0 0 64;
	       color_class: "ilist_item";
	    }
	 }
         part { name: "fg1";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1.to: "bg";
	       rel2.relative: 1.0 0.5;
	       rel2.to: "bg";
	       image {
		  normal: "bt_sm_hilight.png";
		  border: 6 6 6 0;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "fg2";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1.to: "bg";
	       rel2.to: "bg";
	       image {
		  normal: "bt_sm_shine.png";
		  border: 6 6 6 0;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part {
	    name:           "event";
	    type:           RECT;
	    description {
	       state: "default" 0.0;
	       color: 0 0 0 0;
	    }
	 }
      }
      programs {
	 program {
	    name:    "go_active";
	    signal:  "e,state,selected";
	    source:  "e";
	    action:  STATE_SET "selected" 0.0;
	    target:  "bg";
	    target:  "fg1";
	    target:  "fg2";
	    target:  "e.text.label";
	    transition: LINEAR 0.2;
	 }
	 program {
	    name:    "go_passive";
	    signal:  "e,state,unselected";
	    source:  "e";
	    action:  STATE_SET "default" 0.0;
	    target:  "bg";
	    target:  "fg1";
	    target:  "fg2";
	    target:  "e.text.label";
	    transition: LINEAR 0.1;
	 }
      }
   }
   
   group { name: "e/widgets/ilist_odd";
      data.item: "stacking" "below";
      data.item: "selectraise" "on"; 
      images {
         image: "bt_sm_base1.png" COMP;
	 image: "bt_sm_shine.png" COMP;
	 image: "bt_sm_hilight.png" COMP;
	 image: "ilist_2.png" COMP;
      }
      parts {
	 part {
	    name: "base";
	    mouse_events: 0;
	    description {
	       state: "default" 0.0;
	       image {
		  normal: "ilist_2.png";
		  border: 2 2 2 2;
	       }
	    }
	 }
	 part { name: "bg";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -5 -5;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 4 4;
	       }
	       image {
		  normal: "bt_sm_base1.png";
		  border: 6 6 6 6;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -2 -2;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 1 1;
	       }
	    }
	 }
	 part {
	    name:          "e.swallow.icon";
	    type:          SWALLOW;
	    description {
	       state:    "default" 0.0;
	       align:    0.0 0.5;
	       aspect:   1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0  0.0;
		  offset:   4    4;
	       }
	       rel2 {
		  relative: 0.0  1.0;
		  offset:   4   -5;
	       }
	    }
	 }
	 part {
	    name:           "e.text.label";
	    type:           TEXT;
	    effect:         SOFT_SHADOW;
	    mouse_events:   0;
	    description {
	       state: "default" 0.0;
	       min:      16 16;
	       rel1 {
		  to_x:     "e.swallow.icon";
		  relative: 1.0  0.0;
		  offset:   4 4;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset:   -5 -5;
	       }
	       color: 0 0 0 255;
	       color3: 0 0 0 0;
	       color_class: "ilist_item";
	       text {
		  font: "Sans,Edje-Vera";
		  size: 10;
		  min: 1 1;
		  align: 0.0 0.5;
		  text_class: "ilist_item";
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 255;
	       color3: 0 0 0 64;
	       color_class: "ilist_item";
	    }
	 }
         part { name: "fg1";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1.to: "bg";
	       rel2.relative: 1.0 0.5;
	       rel2.to: "bg";
	       image {
		  normal: "bt_sm_hilight.png";
		  border: 6 6 6 0;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "fg2";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1.to: "bg";
	       rel2.to: "bg";
	       image {
		  normal: "bt_sm_shine.png";
		  border: 6 6 6 0;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part {
	    name:           "event";
	    type:           RECT;
	    description {
	       state: "default" 0.0;
	       color: 0 0 0 0;
	    }
	 }
      }
      programs {
	 program {
	    name:    "go_active";
	    signal:  "e,state,selected";
	    source:  "e";
	    action:  STATE_SET "selected" 0.0;
	    target:  "bg";
	    target:  "fg1";
	    target:  "fg2";
	    target:  "e.text.label";
	    transition: LINEAR 0.2;
	 }
	 program {
	    name:    "go_passive";
	    signal:  "e,state,unselected";
	    source:  "e";
	    action:  STATE_SET "default" 0.0;
	    target:  "bg";
	    target:  "fg1";
	    target:  "fg2";
	    target:  "e.text.label";
	    transition: LINEAR 0.1;
	 }
      }
   }

   group { name: "e/widgets/ilist_header";
      data.item: "stacking" "above";
      data.item: "selectraise" "on"; 
      images {
         image: "bt_sm_base1.png" COMP;
	 image: "bt_sm_shine.png" COMP;
	 image: "bt_sm_hilight.png" COMP;
	 image: "ilist_header_1.png" COMP;
	 image: "ilist_item_shadow.png" COMP;
      }
      parts {
	 part {
	    name: "base_sh";
	    mouse_events: 0;
	    description {
	       state: "default" 0.0;
	       aspect: 6.4 6.4;
	       aspect_preference: HORIZONTAL;
	       align: 0.0 0.0;
	       rel1 {
		  to: "base";
		  relative: 0.0 1.0;
		  offset: 0 0;
	       }
	       rel2 {
		  to: "base";
		  relative: 1.0 1.0;
		  offset: -1 0;
	       }
	       image {
		  normal: "ilist_item_shadow.png";
	       }
	    }
	 }
	 part {
	    name: "base";
	    mouse_events: 0;
	    description {
	       state: "default" 0.0;
	       image {
		  normal: "ilist_header_1.png";
		  border: 2 2 2 2;
	       }
	    }
	 }
	 part { name: "bg";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -5 -5;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 4 4;
	       }
	       image {
		  normal: "bt_sm_base1.png";
		  border: 6 6 6 6;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -2 -2;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 1 1;
	       }
	    }
	 }
	 part {
	    name:          "e.swallow.icon";
	    type:          SWALLOW;
	    description {
	       state:    "default" 0.0;
	       align:    0.0 0.5;
	       aspect:   1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0  0.0;
		  offset:   4    4;
	       }
	       rel2 {
		  relative: 0.0  1.0;
		  offset:   4   -5;
	       }
	    }
	 }
	 part {
	    name:           "e.text.label";
	    type:           TEXT;
	    effect:         SOFT_SHADOW;
	    mouse_events:   0;
	    description {
	       state: "default" 0.0;
	       min:      16 16;
	       rel1 {
		  to_x:     "e.swallow.icon";
		  relative: 1.0  0.0;
		  offset:   4 4;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset:   -5 -5;
	       }
	       color: 255 255 255 255;
	       color3: 0 0 0 32;
	       color_class: "ilist_item";
	       text {
                  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 16;
		  min: 1 1;
		  align: 0.0 0.5;
		  text_class: "ilist_item";
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 255;
	       color3: 0 0 0 64;
	       color_class: "ilist_item";
	    }
	 }
         part { name: "fg1";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1.to: "bg";
	       rel2.relative: 1.0 0.5;
	       rel2.to: "bg";
	       image {
		  normal: "bt_sm_hilight.png";
		  border: 6 6 6 0;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "fg2";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1.to: "bg";
	       rel2.to: "bg";
	       image {
		  normal: "bt_sm_shine.png";
		  border: 6 6 6 0;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part {
	    name:           "event";
	    type:           RECT;
	    description {
	       state: "default" 0.0;
	       color: 0 0 0 0;
	    }
	 }
      }
      programs {
	 program {
	    name:    "go_active";
	    signal:  "e,state,selected";
	    source:  "e";
	    action:  STATE_SET "selected" 0.0;
	    target:  "bg";
	    target:  "fg1";
	    target:  "fg2";
	    target:  "e.text.label";
	    transition: LINEAR 0.2;
	 }
	 program {
	    name:    "go_passive";
	    signal:  "e,state,unselected";
	    source:  "e";
	    action:  STATE_SET "default" 0.0;
	    target:  "bg";
	    target:  "fg1";
	    target:  "fg2";
	    target:  "e.text.label";
	    transition: LINEAR 0.1;
	 }
      }
   }
   
   group { name: "e/widgets/ilist_header_odd";
      data.item: "stacking" "below";
      data.item: "selectraise" "on"; 
      images {
         image: "bt_sm_base1.png" COMP;
	 image: "bt_sm_shine.png" COMP;
	 image: "bt_sm_hilight.png" COMP;
	 image: "ilist_header_2.png" COMP;
      }
      parts {
	 part {
	    name: "base";
	    mouse_events: 0;
	    description {
	       state: "default" 0.0;
	       image {
		  normal: "ilist_header_2.png";
		  border: 2 2 2 2;
	       }
	    }
	 }
	 part { name: "bg";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -5 -5;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 4 4;
	       }
	       image {
		  normal: "bt_sm_base1.png";
		  border: 6 6 6 6;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: -2 -2;
	       }
	       rel2 {
		  relative: 1.0 1.0;
		  offset: 1 1;
	       }
	    }
	 }
	 part {
	    name:          "e.swallow.icon";
	    type:          SWALLOW;
	    description {
	       state:    "default" 0.0;
	       align:    0.0 0.5;
	       aspect:   1.0 1.0;
	       aspect_preference: VERTICAL;
	       rel1 {
		  relative: 0.0  0.0;
		  offset:   4    4;
	       }
	       rel2 {
		  relative: 0.0  1.0;
		  offset:   4   -5;
	       }
	    }
	 }
	 part {
	    name:           "e.text.label";
	    type:           TEXT;
	    effect:         SOFT_SHADOW;
	    mouse_events:   0;
	    description {
	       state: "default" 0.0;
	       min:      16 16;
	       rel1 {
		  to_x:     "e.swallow.icon";
		  relative: 1.0  0.0;
		  offset:   4 4;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset:   -5 -5;
	       }
	       color: 255 255 255 255;
	       color3: 0 0 0 32;
	       color_class: "ilist_item";
	       text {
                  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 16;
		  min: 1 1;
		  align: 0.0 0.5;
		  text_class: "ilist_item";
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 255;
	       color3: 0 0 0 64;
	       color_class: "ilist_item";
	    }
	 }
         part { name: "fg1";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1.to: "bg";
	       rel2.relative: 1.0 0.5;
	       rel2.to: "bg";
	       image {
		  normal: "bt_sm_hilight.png";
		  border: 6 6 6 0;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "fg2";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       visible: 0;
	       color: 255 255 255 0;
	       rel1.to: "bg";
	       rel2.to: "bg";
	       image {
		  normal: "bt_sm_shine.png";
		  border: 6 6 6 0;
	       }
	    }
	    description { state: "selected" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	       color: 255 255 255 255;
	    }
	 }
	 part {
	    name:           "event";
	    type:           RECT;
	    description {
	       state: "default" 0.0;
	       color: 0 0 0 0;
	    }
	 }
      }
      programs {
	 program {
	    name:    "go_active";
	    signal:  "e,state,selected";
	    source:  "e";
	    action:  STATE_SET "selected" 0.0;
	    target:  "bg";
	    target:  "fg1";
	    target:  "fg2";
	    target:  "e.text.label";
	    transition: LINEAR 0.2;
	 }
	 program {
	    name:    "go_passive";
	    signal:  "e,state,unselected";
	    source:  "e";
	    action:  STATE_SET "default" 0.0;
	    target:  "bg";
	    target:  "fg1";
	    target:  "fg2";
	    target:  "e.text.label";
	    transition: LINEAR 0.1;
	 }
      }
   }

   group { name: "e/widgets/entry";
      min: 12 12;
      images.image: "shelf_inset.png" COMP;
      parts {
	 part { name: "base";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1.offset: 1 1;
	       rel2.offset: -2  -2;
	       color: 255 255 255 255;
	    }
	 }
	 part { name: "e.swallow.text";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  offset: 2 2;
		  to: "base";
	       }
	       rel2 {
		  offset: -3 -3;
		  to: "base";
	       }
	    }
	 }
	 part { name: "overlay";
	    description { state: "default" 0.0;
	       image {
		  normal: "shelf_inset.png";
		  border: 7 7 7 7;
		  middle: 0;
	       }
	       fill.smooth : 0;
	    }
	 }
      }
   }

   group { name: "e/widgets/entry/text";
      parts {
	 part { name: "e.text.text";
	    type: TEXT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       color: 0 0 0 255;
	       color_class: "entry_text";
	       text {
		  text: "";
		  font: "Edje-Vera";
		  size: 10;
		  min: 1 1;
		  align: 0.0 0.0;
		  text_class: "entry";
	       }
	    }
	    description { state: "disabled" 0.0;
	       inherit:  "default" 0.0;
	       color: 164 164 164 255;
	    }
	 }
      }
      programs {
	 program { name: "disable";
	       signal: "e,state,disabled";
	       source: "e";
	       action: STATE_SET "disabled" 0.0;
	       target: "e.text.text"; 
	 }
	 program { name: "enable";
	       signal: "e,state,enabled";
	       source: "e";
	       action: STATE_SET "default" 0.0;
	       target: "e.text.text"; 
	 }
      }
   }

   group { name: "e/widgets/entry/cursor";
      min: 1 0;
      parts {
	 part { name: "cursor";
	    type: RECT;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	    }
	    description { state: "visible" 0.0;
	       color: 0 0 0 255;
	    }
	 }
      }
      programs {
	 program { name: "on_cursor_show";
	    signal:  "e,action,show,cursor";
	    source:  "e";
	    action: ACTION_STOP;
	    target: "cursor_show";
	    target: "cursor_hide";
	    target: "cursor_show_timer";
	    target: "cursor_hide_timer";
	    after: "cursor_show";
	 }
	 program { name: "cursor_show";
	    action: STATE_SET "visible" 0.0;
	    target: "cursor";
	    after: "cursor_show_timer";
	 }
	 program { name: "cursor_hide";
	    action: STATE_SET "default" 0.0;
	    target: "cursor";
	    transition: SINUSOIDAL 0.2;
	    after: "cursor_hide_timer";
	 }
	 program { name: "cursor_show_timer";
	    in: 0.55 0.0;
	    after: "cursor_hide";
	 }
	 program { name: "cursor_hide_timer";
	    in: 0.2 0.0;
	    after: "cursor_show";
	 }
      }
   }
   
   group { name: "e/widgets/entry/selection";
      data.item: "on_foreground" "1";
      parts {
	 part { name: "selection";
	    type: RECT;
	    description { state: "default" 0.0;
	       color: 164 164 164 100;
	    }
	 }
      }
   }   
      
   group { name: "e/widgets/preview";
      images.image: "shelf_inset.png" COMP;
      parts {
	 part { name: "clip";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "e.swallow.content";
	       rel2.to: "e.swallow.content";
	    }
	 }
	 part { name: "e.swallow.content";
	    clip_to: "clip";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1.offset: 1 1;
	       rel2.offset: -2 -2;
	    }
	 }
	 part { name:          "border";
	    mouse_events:  0;
	    description { state:    "default" 0.0;
	       image {
		  normal: "shelf_inset.png";
		  border: 7 7 7 7;
		  middle: 0;
	       }
	       fill.smooth : 0;
	    }
	 }
      }
   }

   group { name: "e/widgets/deskpreview/desk";
      images.image: "shelf_inset.png" COMP;
      parts {
	 part { name: "clip";
	    type: RECT;
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       rel1.to: "e.swallow.content";
	       rel2.to: "e.swallow.content";
	    }
	 }
	 part { name: "e.swallow.content";
	    clip_to: "clip";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1.offset: 1 1;
	       rel2.offset: -2 -2;
	    }
	 }
	 part { name:          "border";
	    mouse_events:  0;
	    description { state:    "default" 0.0;
	       image {
		  normal: "shelf_inset.png";
		  border: 7 7 7 7;
		  middle: 0;
	       }
	       fill.smooth : 0;
	    }
	 }
	 part { name: "e.event.menu";
	    type: RECT;
	    description { state: "default" 0.0;
	      color: 0 0 0 0;
	    }
	 }
      }
   }

   group { name: "e/widgets/color_well";
      alias:  "e/widgets/gradpreview";
      images.image: "shelf_inset.png" COMP;
      parts {
	 part { name:  "content_clip";
	    type:  RECT;
	    mouse_events:  0;
	    description { state:    "default" 0.0;
	       rel1.to:  "e.swallow.content";
	       rel2.to:  "e.swallow.content";
	       color: 255 255 255 255;
	    }
	 }
	 part { name:  "e.swallow.content";
	    type:  SWALLOW;
	    clip_to:  "content_clip";
	    description { state:    "default" 0.0;
	       rel1.offset:   4  4;
	       rel2.offset:   -5  -5;
	    }
	 }
	 part { name:          "border";
	    mouse_events:  1;
	    description { state:    "default" 0.0;
	       rel1 {
		  to:  "e.swallow.content";
		  offset: -1 -1;
	       }
	       rel2 {
		  to:  "e.swallow.content";
		  offset: 0 0;
	       }
	       image {
		  normal: "shelf_inset.png";
		  border: 7 7 7 7;
		  middle: 0;
	       }
	       fill.smooth : 0;
	    }
	 }
     }
      programs {
	 program { name: "send_click";
	    signal: "mouse,clicked,1";
	    source: "border";
	    action: SIGNAL_EMIT "e,action,click" "";
	 }

// FIXME: Is this used? The 'disabled' state from the old
//             theme was 'inherit: default' and nothing else.
/*
	 program {
	     name: "disable";
	     signal: "e,state,disabled";
	     source: "e";
	     action: STATE_SET "disabled" 0.0;
	     target: "overlay";
	 }
	 program {
	     name: "enable";
	     signal: "e,state,enabled";
	     source: "e";
	     action: STATE_SET "default" 0.0;
	     target: "overlay";
	 }
*/
      }
   }
   
   group { name: "e/widgets/spectrum";
      images.image: "shelf_inset.png" COMP;
      parts {
	 part { name:  "content_clip";
	    type:  RECT;
	    mouse_events:  0;
	    description { state:    "default" 0.0;
	       rel1.to:  "e.swallow.content";
	       rel2.to:  "e.swallow.content";
	       color: 255 255 255 255;
	    }
	 }
	 part { name:  "e.swallow.content";
	    type:  SWALLOW;
	    clip_to:  "content_clip";
	    description { state:    "default" 0.0;
	       rel1.offset:   4  4;
	       rel2.offset:   -5  -5;
	    }
	 }
	 part { name:          "border";
	    mouse_events:  1;
	    description { state:    "default" 0.0;
	       rel1 {
		  to:  "e.swallow.content";
		  offset: -1 -1;
	       }
	       rel2 {
		  to:  "e.swallow.content";
		  offset: 0 0;
	       }
	       image {
		  normal: "shelf_inset.png";
		  border: 7 7 7 7;
		  middle: 0;
	       }
	       fill.smooth : 0;
	    }
	 }
	 part { name: "e.dragable.cursor";
	    type: RECT;
	    dragable {
	       confine: "e.swallow.content";
	       x: 1 1 0;
	       y: 1 1 0;
	    }
	    description { state: "default" 0.0;
	       min: 1 1;
	       max: 1 1;
	       fixed: 1 1;
	       visible: 0;
	       rel1 {
		  to: "e.swallow.content";
		  relative: 0.5 0.5;
		  offset: 0 0;
	       }
	       rel2 {
		  to: "e.swallow.content";
		  relative: 0.5 0.5;
		  offset: 0 0;
	       }
	    }
	 }
	 part { name: "cursor_x";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  to_x: "e.dragable.cursor";
		  to_y: "e.swallow.content";
	       }
	       rel2 {
		  to_x: "e.dragable.cursor";
		  to_y: "e.swallow.content";
	       }
	       color: 255 255 255 150;
	    }
	 }
	 part { name: "cursor_y";
	    type: RECT;
	    description { state: "default" 0.0;
	       rel1 {
		  to_x: "e.swallow.content";
		  to_y: "e.dragable.cursor";
	       }
	       rel2 {
		  to_x: "e.swallow.content";
		  to_y: "e.dragable.cursor";
	       }
	       color: 255 255 255 150;
	    }
	 }
      }
   }

   group { name: "e/widgets/cslider";
      images.image: "shelf_inset.png" COMP;
      parts {
	 part { name:  "content_clip";
	    type:  RECT;
	    mouse_events:  0;
	    description { state:    "default" 0.0;
	       rel1.to:  "e.swallow.content";
	       rel2.to:  "e.swallow.content";
	       color: 255 255 255 255;
	    }
	 }
	 part { name:  "e.swallow.content";
	    type:  SWALLOW;
	    clip_to:  "content_clip";
	    description { state:    "default" 0.0;
	       min: 50 20;
	       rel1.offset:   4    4;
	       rel2.offset:   -5    -5;
	    }
	    description { state: "vertical" 0.0;
	       inherit: "default" 0.0;
	       min: 20 50;
	    }
	 }
	 part { name: "border";
	    mouse_events:  1;
	    description { state:    "default" 0.0;
	       rel1 {
		  to:  "e.swallow.content";
		  offset: -1 -1;
	       }
	       rel2 {
		  to:  "e.swallow.content";
		  offset: 0 0;
	       }
	       image {
		  normal: "shelf_inset.png";
		  border: 7 7 7 7;
		  middle: 0;
	       }
	       fill.smooth : 0;
	    }
	 }
	 part { name: "e.dragable.cursor";
	    type: RECT;
	    clip_to:       "content_clip";
	    dragable {
	       confine: "e.swallow.content";
	       x: 1 1 0;
	       y: -1 1 0;
	    }
	    description { state: "default" 0.0;
	       min: 1 24;
	       max: 1 9999;
	       fixed: 1 1;
	       rel1 {
		  to: "e.swallow.content";
		  relative: 0.5 0.0;
		  offset: 0 0;
	       }
	       rel2 {
		  to: "e.swallow.content";
		  relative: 0.5 1.0;
		  offset: 0 -1;
	       }
	       color: 255 255 255 150;
	    }
	    description { state: "vertical" 0.0;
	       min: 24 1;
	       max: 9999 1;
	       fixed: 1 1;
	       rel1 {
		  to: "e.swallow.content";
		  relative: 0.0 0.5 ;
		  offset: 0 0;
	       }
	       rel2 {
		  to: "e.swallow.content";
		  relative: 1.0 0.5;
		  offset: -1 0;
	       }
	       color: 255 255 255 150;
	    }
	 }
      }
      programs {
	 program { name: "go_vertical";
	    signal: "e,state,direction,v";
	    source: "e";
	    action: STATE_SET "vertical" 0.0;
	    target: "e.dragable.cursor";
	    target: "e.swallow.content";
	 } 
      }
   }

// FIXME: Better graphics.
// FIXME: Wallpaper scale. % sign messes with the alignment?

   group { name: "e/widgets/slider_vertical";
      images {
	 image: "slider.png" COMP;
	 image: "slider_clicked.png" COMP;
	 image: "sb_runnerh.png" COMP;
	 image: "shelf_inset.png" COMP;
      }
      parts {
	 part { name: "base";
	    type: RECT;
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       min: 22 0;
	       rel1.offset: 2 2;
	       rel2.offset: -3 -3;
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel2 {
		  to_y: "label";
		  relative: 1.0  0.0;
		  offset:   -3   -1;
	       }
	    }
	 }
	 part { name: "runner";
	    mouse_events: 0;
	    clip_to: "clip";
	    description { state: "default" 0.0;
	       max: 3 99999;
	       rel1.to: "base";
	       rel2.to: "base";
	       image {
		  normal: "sb_runnerv.png";
		  border: 0 0 4 4;
	       }
	       fill.smooth: 0;
	    }
	 }
	 part { name: "label_base";
	    clip_to: "clip";
	    type: RECT;
	    description { state: "default" 0.0;
	       color: 255 255 255 255;
	       visible: 0;
	       rel1.to: "label";
	       rel2.to: "label";
	    }
	    description { state:  "active" 0.0;
	       inherit: "default" 0.0;
	       visible:  1;
	    }
	 }
	 part { name:  "label";
	    mouse_events:  0;
	    clip_to: "clip";
	    description { state:  "default" 0.0;
	       visible:  0;
	    }
	    description { state:  "active" 0.0;
	       min: 20 0;
	       rel1 {
		  to:  "e.text.label";
		  offset:  -4  -2;
	       }
	       rel2 {
		  to:  "e.text.label";
		  offset:  2  1;
	       }
	       image {
		  normal: "shelf_inset.png";
		  border: 7 7 7 7;
		  middle: 0;
	       }
	       fill.smooth : 0;
	    }
	 }
	 part { name:  "e.text.label";
	    type:  TEXT;
	    mouse_events:   0;
	    clip_to: "clip";
	    description { state:  "default" 0.0;
	       visible:  0;
	    }
	    description { state: "active" 0.0;
	       align: 0.5 0.5;
	       fixed: 1 1;
	       rel1 {
		  relative: 0.0  1.0;
		  offset:   7    -8;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset:   -8  -8;
	       }
	       color: 0 0 0 255;
	       color_class: "slider_text";
	       text { text:     "0.0";
		  font:     "Edje-Vera";
		  size:     10;
		  min:      1 1;
		  align:    0.5 0.5;
		  text_class: "slider";	       
	       }
	    }
	 }
	 part { name: "sld_p1";
	    type: RECT;
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       rel2 {
		  relative: 1.0 0.0;
		  to:  "e.dragable.slider";
	       }
	    }
	 }
	 part { name: "sld_p2";
	    type: RECT;
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       rel1 {
		  relative: 0.0 1.0;
		  to:  "e.dragable.slider";
	       }
	    }
	 }
	 part { name: "e.dragable.slider";
	    type: RECT;
	    mouse_events: 1;
	    dragable {
	       x: 0 0 0;
	       y: -1 1 0;
	       confine: "base";
	    }
	    description { state: "default" 0.0;
	       min: 11 11;
	       fixed: 1 1;
	       rel1 {
		  relative: 0.5  0.5;
		  offset:   0    0;
		  to: "base";
	       }
	       rel2 {
		  relative: 0.5  0.5;
		  offset:   0    0;
		  to: "base";
	       }
	       color: 0 0 0 0;
	    }
	 }
	 part { name: "button";
	    mouse_events: 0;
	    description { state: "default" 0.0;
	       min: 22 22;
	       fixed: 1 1;
	       rel1.to: "e.dragable.slider";
	       rel2.to: "e.dragable.slider";
	       image.normal: "slider.png";
	    }
	    description { state: "clicked" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "slider_clicked.png";
	    }
	 }
	 part { name: "clip";
	    type: RECT;
	    description { state: "default" 0.0; 
	       color: 255 255 255 255;
	    }
	    description { state: "disabled" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 128;
	    }
	 }
	 part { name: "event";
	    type: RECT;
	    mouse_events: 1;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 0 0 0 0;
	    }
	    description {
	       state: "disabled" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
      }
      programs {	 
	 program { name: "sld_p1_down";
	    signal: "mouse,down,1";
	    source: "sld_p1";
	    action:  DRAG_VAL_PAGE 0.0 -1.0;
	    target: "e.dragable.slider";
	 }
	 program { name: "sld_p2_down";
	    signal: "mouse,down,1";
	    source: "sld_p2";
	    action:  DRAG_VAL_PAGE  0.0 1.0;
	    target: "e.dragable.slider";
	 }
	 program { name: "button_down";
	    signal: "mouse,down,1";
	    source: "e.dragable.slider";
	    action:  STATE_SET "clicked" 0.0;
	    target: "button";
	 }
	 program { name: "button_up";
	    signal: "mouse,up,1";
	    source: "e.dragable.slider";
	    action:  STATE_SET "default" 0.0;
	    target: "button";
	 }
	 program { name: "show_label";
	    signal: "e,action,show,label";
	    source: "e";
	    action: STATE_SET "active" 0.0;
	    target: "base";
	    target: "label";
	    target: "label_base";
	    target: "e.text.label";
	 }
	 program { name: "hide_label";
	    signal: "e,action,hide,label";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "base";
	    target: "label";
	    target: "label_base";
	    target: "e.text.label";
	 }
	 program { name: "disable";
	    signal: "e,state,disabled";
	    source: "e";
	    action: STATE_SET "disabled" 0.0;
	    target: "clip";
	    target: "event";
	 }
	 program { name: "enable";
	    signal: "e,state,enabled";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "clip";
	    target: "event";
	 }
      }
   }
   
   group { name: "e/widgets/slider_horizontal";
      images {
	 image: "slider.png" COMP;
	 image: "slider_clicked.png" COMP;
	 image: "sb_runnerv.png" COMP;
	 image: "shelf_inset.png" COMP;
      }
      parts {
	 part { name: "base";
	    type: RECT;
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       min: 0 22;
	       rel1.offset: 2 2;
	       rel2.offset: -3 -3;
	    }
	    description { state: "active" 0.0;
	       inherit: "default" 0.0;
	       rel2 {
		  to_x: "label";
		  relative: 0.0  1.0;
		  offset:   -1   -3;
	       }
	    }
	 }
	 part { name: "runner";
	    mouse_events: 0;
	    clip_to: "clip";
	    description { state: "default" 0.0;
	       max: 99999 3;
	       rel1.to:  "base";
	       rel2.to:  "base";
	       image {
		  normal: "sb_runnerh.png";
		  border: 4 4 0 0;
	       }
	       fill.smooth: 0;
	    }
	 }
	 part { name: "label_base";
	    clip_to: "clip";
	    type: RECT;
	    description { state: "default" 0.0;
	       color: 255 255 255 255;
	       visible: 0;
	       rel1.to: "label";
	       rel2.to: "label";
	    }
	    description { state:  "active" 0.0;
	       inherit: "default" 0.0;
	       visible:  1;
	    }
	 }
	 part { name:  "label";
	    mouse_events:  0;
	    clip_to: "clip";
	    description { state:  "default" 0.0;
	       visible:  0;
	    }
	    description { state:  "active" 0.0;
	       min: 20 0;
	       rel1 {
		  to:  "e.text.label";
		  offset:  -4 -2;
	       }
	       rel2 {
		  to:       "e.text.label";
		  offset:   2   1;
	       }
	       image {
		  normal: "shelf_inset.png";
		  border: 7 7 7 7;
		  middle: 0;
	       }
	       fill.smooth : 0;
	    }
	 }
	 part { name:  "e.text.label";
	    type:  TEXT;
	    mouse_events:  0;
	    clip_to: "clip";
	    description { state:  "default" 0.0;
	       visible:  0;
	    }
	    description { state: "active" 0.0;
	       align: 0.5 0.5;
	       fixed: 1 0;	    
	       rel1 {
		  relative: 1.0  0.0;
		  offset:   -12   7;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset:   -12 -8;
	       }
	       color: 0 0 0 255;
	       color_class: "slider_text";
	       text { text:  "0.0";
		  font:     "Edje-Vera";
		  size:     10;
		  min:      1 1;
		  align:    0.5 0.5;
		  text_class: "slider";	       
	       }
	    }
	 }
	 part { name: "sld_p1";
	    type: RECT;
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       rel2 {
		  relative: 0.0 1.0;
		  to:  "e.dragable.slider";
	       }
	    }
	 }
	 part { name: "sld_p2";
	    type: RECT;
	    mouse_events: 1;
	    description { state: "default" 0.0;
	       color: 0 0 0 0;
	       rel1 {
		  relative: 1.0 0.0;
		  to:  "e.dragable.slider";
	       }
	    }
	 }
	 part { name: "e.dragable.slider";
	    type: RECT;
	    mouse_events: 1;
	    dragable {
	       x: 1 1 0;
	       y: 0 0 0;
	       confine: "base";
	    }
	    description { state: "default" 0.0;
	       min: 11 11;
	       fixed: 1 1;
	       rel1 {
		  relative: 0.5  0.5;
		  to: "base";
	       }
	       rel2 {
		  relative: 0.5  0.5;
		  offset:   0    0;
		  to: "base";
	       }
	       color: 0 0 0 0;
	    }
	 }
	 part { name: "slider";
	    mouse_events: 0;
	    clip_to: "clip";
	    description { state: "default" 0.0;
	       min: 22 22;
	       fixed: 1 1;
	       rel1.to: "e.dragable.slider";
	       rel2.to: "e.dragable.slider";
	       image.normal: "slider.png";
	    }
	    description { state: "clicked" 0.0;
	       inherit: "default" 0.0;
	       image.normal: "slider_clicked.png";
	    }
	 }
	 part { name: "clip";
	    type: RECT;
	    description { state: "default" 0.0; }
	    description { state: "disabled" 0.0;
	       inherit: "default" 0.0;
	       color: 255 255 255 128;
	    }
	 }
	 part { name: "event";
	    type: RECT;
	    mouse_events: 1;
	    description {
	       state: "default" 0.0;
	       visible: 0;
	       color: 0 0 0 0;
	    }
	    description {
	       state: "disabled" 0.0;
	       inherit: "default" 0.0;
	       visible: 1;
	    }
	 }
      }
      programs {	 
	 program { name: "sld_p1_down";
	    signal: "mouse,down,1";
	    source: "sld_p1";
	    action:  DRAG_VAL_PAGE -1.0 0.0;
	    target: "e.dragable.slider";
	 }
	 program { name: "sld_p2_down";
	    signal: "mouse,down,1";
	    source: "sld_p2";
	    action:  DRAG_VAL_PAGE  1.0 0.0;
	    target: "e.dragable.slider";
	 }
	 program { name: "sld_down";
	    signal: "mouse,down,1";
	    source: "e.dragable.slider";
	    action:  STATE_SET "clicked" 0.0;
	    target: "slider";
	 }
	 program { name: "sld_up";
	    signal: "mouse,up,1";
	    source: "e.dragable.slider";
	    action:  STATE_SET "default" 0.0;
	    target: "slider";
	 }
	 program { name: "show_label";
	    signal: "e,action,show,label";
	    source: "e";
	    action: STATE_SET "active" 0.0;
	    target: "base";
	    target: "label";
	    target: "label_base";
	    target: "e.text.label";
	 }
	 program { name: "hide_label";
	    signal: "e,action,hide,label";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "base";
	    target: "label";
	    target: "label_base";
	    target: "e.text.label";
	 }
	 program { name: "disable";
	    signal: "e,state,disabled";
	    source: "e";
	    action: STATE_SET "disabled" 0.0;
	    target: "clip";
	    target: "event";
	 }
	 program { name: "enable";
	    signal: "e,state,enabled";
	    source: "e";
	    action: STATE_SET "default" 0.0;
	    target: "clip";
	    target: "event";
	 }
      }
   }

   group { name: "e/widgets/frame";
      images {
	 image: "frame_1.png" COMP;
	 image: "frame_2.png" COMP;
      }
      parts {
	 part { name: "base";
	    mouse_events:  0;
	    description { state:    "default" 0.0;
	       image {
		  normal: "frame_2.png";
		  border: 5 5 32 26;
		  middle: 0;
	       }
	       fill.smooth : 0;
	    }
	 }
	 part { name: "e.swallow.content";
	    type: SWALLOW;
	    description { state: "default" 0.0;
	       rel1 {
		  to_y: "e.text.label";
		  relative: 0.0 1.0;
		  offset: 8 2;
	       }
	       rel2.offset: -9 -9;
	    }
	 }
	 part { name: "e.text.label";
	    type: TEXT;
	    mouse_events:   0;
	    description { state: "default" 0.0;
	       align: 0.0 0.0;
	       fixed: 0 1;
	       rel1 {
		  relative: 0.0 0.0;
		  offset: 6 6;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset: -7 6;
	       }
	       color: 0 0 0 64;
	       text {
		  font: "Sans:style=Bold,Edje-Vera-Bold";
		  size: 10;
		  min: 1 1;
		  max: 1 1;
		  align: 0.0 0.0;
		  text_class: "frame";
	       }
	    }
	 }
	 part { name: "over";
	    mouse_events:  0;
	    description { state:    "default" 0.0;
	       rel1.offset: 4 4;
	       rel2.offset: -5 -5;
	       image {
		  normal: "frame_1.png";
		  border: 2 2 28 22;
		  middle: 0;
	       }
	       fill.smooth : 0;
	    }
	 }
      }
   }


/////////////////////////////////////////////////////////////////////////////
   /*** ICONS ***/
// FIXME: DO

/////////////////////////////////////////////////////////////////////////////
   /*** MOD: WIZARD ***/
// FIXME: DO
}
