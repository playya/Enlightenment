* Eina 1.1
	- implement multiple level of hash for eina_hash depending on number of child.
	- improve benchmark (add more real use case, provide option for tracking result more easily)
	- improve mempool repacker to take a more fine grained lock.

* Eet
	- add inheritance
	- add Eet_Config api (eet_config_open, eet_config_load, eet_config_save, eet_config_close).
	- make it possible to have text and binary Eet_Config file with section per .cfg file in a directory.
	- add support for variable number of backup file

* Evas
	- add _stringshared version for evas_event_feed_*
	- add joystick support
	- cleanup sdl engine
	- add a prepare phase that could be used by all engine when we got many main CPU to prepare font, polygon and load image in parallel (should work also with dsp)
h	- try quadtree support
	- fix Evas_Object_Polygon resize issue and API.
	- use eina_file_map

* Edje 1.1
	- Add REVERSE to edje possible program action
	- Add continue: (ABORT|CONTINUE|CHAIN) to edje STATE_SET argument
	- Make it possible to catch requested file and to rewrite it
	- Reuse match automate between edje object of the same type
h	- Add specialized task for each match automate case
	- Add internationalization support
	- Add an optimizer to change edje layout for better performance
	- Add benchmark tools.
	- Try to improve speed of object destruction by moving them to another thread.
	- Add group { text, drag } setter.
	- Add group inheritance.
	- Add group interface, and make it possible to move from one theme of the interface to another, without loosing swallowed and external object state.
	- Add virtual part and program support.
	- Merge edje parser and edje preprocessor.
	- Move the parser into edje and expose an Edje AST API.
	- use ecore_animator_timeline_add.

* Elixir
h	- add eet -> js object
	- add elementary binding
	- add physique binding
h	- add eio binding
	- use eet connection
	- add explicit binding

* Explicit
	- add server
h	- add client library
	- integrate with edje (so we can request url image from lua, embryo or with USER directive)
	- integrate with elementary

* Efo
	- write module interface
	- write info manipulation library

* Et
	- write basic contact/place efo module
	- write elementary interface (pan + efo)

* Emap
	- write location efo module
	- write extraction code for devs info.txt
	- write elementary interface (pan + efo + maps)

* Eyelight
	- write own layout function
h	- fix expose and thumbnail display to be fully async
	- fix keyboard handling

* Eio 1.0
h	- add notify support
h	- use dirfd helper (partial support with eina 1.0 and full with 1.1)
h	- add tutorial
	- add tests suite
	- use ecore_thread_reschedule_after and take device id into account
	during IO operation to limit a one disk per thread load.
	- handle all io in another process
	- pack result for same filename when calling eio_file_direct_stat (add a new set of call for that purpose).
	- add eina_file_map support
	- make it possible to get current dirfd inside eio_*_ls operation

* Efreet 1.0
	- make mime check thread safe
	- make it a dbus daemon.

* Ecore 1.1
	- add ecore_thread_batch_run/ecore_thread_batch_feedback_run (to create
	batch, a list of data instead of creating one ecore_thread per data)
	- add ecore_thread_reschedule_after.
	- use eina_lock
	- add ecore_thread_ugly_run (better name: ecore_thread_message_run ?).
	- make it possible to send message async/sync from thread to main loop (for msg_run).
	- make it possible to make async/sync call from thread to main loop (for msg_run).
	- make it possible to send message async from main loop to thread (for msg_run).
	- make it possible to make async call from main loop to thread (for msg_run).
	- make it possible to raise priority of a worker job.
	- make it possible to create another worker job from a worker job.
	- add ecore_timer_dump to help track timer allocator and reduce number of wakeup.

* ethumb
	- make it possible to have one slave per available CPU.

* enlil
	- use eio
	- improve use of multi cpu
	- make sync faster


h: half done
d: done
