
<section>
<sectioninfo>
  <author>
    <firstname>dan</firstname>
    <surname>sinclair</surname>
    <email>zero@perplexity.org</email>
    <othername>'dj2'</othername>
  </author>
  <date>28 July 2004</date>
</sectioninfo>

<title>Receta: Introducción a los objetos inteligentes Evas</title>

<para>
Cuando trabajes mas con Evas, empezarás a tener varios <literal>Evas_Object</literal> con los cuales estás trabajando y aplicando las mismas operaciones para mantenerlos en sincronía. Sería mucho mas conveniente agrupar todos esos <literal>Evas_Object</literal> en un único objeto al que todas las transformaciones pueden ser aplicadas.
</para>

<para>
Los objetos inteligentes Evas proveen la capacidad de escribir tus propios objetos y tener a Evas llamando a tus funciones para hacer el movimiento, redimensionado, ocultamiento, capas y todas las cosas que un <literal>Evas_Object</literal> es responsable de manejar. Junto con los callback normales de <literal>Evas_Object</literal>, los objetos inteligentes te permiten definir tus propias funciones para manejar operaciones especiales que puedas requerir.
</para>

<para>
Esta introducción está partida en 3 archivos: foo.h, foo.c y main.c. El objeto inteligente creado se llama <literal>foo</literal> y es definido en los archivos foo.[ch]. maic.c está para mostrar como el nuevo objeto inteligente puede ser usado.
</para>

<para>
El objeto inteligente es solamente dos cuadrados, uno dentro del otro, con el interno separado un 10% del borde del externo. Conforme el programa se ejecute un callback de temporizador Ecore reposicionará y actualizará el tamaño del objecto inteligente.
</para>

<para>
El archivo básico para este objeto inteligente es de una plantilla Evas Smart Object por Atmos localizada en: <literal><ulink url="http://www.atmos.org/code/src/evas_smart_template_atmos.c">www.atmos.org/code/src/evas_smart_template_atmos.c</ulink></literal> que a su vez estaba basada en una plantilla por Rephorm.
</para>

<para>
Primero necesitamos definir el interfaz externo a nuestro objeto inteligente. En este caso solo necesitamos una llamada para crear el nuevo objeto.
<example>
<title>foo.h</title>
<programlisting>
#ifndef _FOO_H_
#define _FOO_H_ 
   
#include &lt;Evas.h&gt;

Evas_Object *foo_new(Evas *e);

#endif
</programlisting>
</example>
</para>

<para>
Con eso fuera del camino, nos metemos en las oscuras entra;as de la bestia, el código del objeto inteligente.
<example>
<title>foo.c</title>
<programlisting>
#include &lt;Evas.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

typedef struct _Foo_Object Foo_Object;
struct _Foo_Object {
	Evas_Object *clip;
	Evas_Coord x, y, w, h;

	Evas_Object *outer;
	Evas_Object *inner;
};  
</programlisting>
</example>
<literal>Foo_Object</literal> almacenará toda la información que necesitamos para nuestro objeto. En este caso es el objecto caja externa, el objeto caja interna, un objeto de clipping y la actual posición y tamaño del objeto.
</para>

<para>
<programlisting>
static Evas_Smart *_foo_object_smart_get();
static Evas_Object *foo_object_new(Evas *evas);
static void _foo_object_add(Evas_Object *o);
static void _foo_object_del(Evas_Object *o);
static void _foo_object_layer_set(Evas_Object *o, int l);
static void _foo_object_raise(Evas_Object *o);
static void _foo_object_lower(Evas_Object *o);
static void _foo_object_stack_above(Evas_Object *o, Evas_Object *above);
static void _foo_object_stack_below(Evas_Object *o, Evas_Object *below);
static void _foo_object_move(Evas_Object *o, Evas_Coord x, Evas_Coord y);
static void _foo_object_resize(Evas_Object *o, Evas_Coord w, Evas_Coord h);
static void _foo_object_show(Evas_Object *o);
static void _foo_object_hide(Evas_Object *o);
static void _foo_object_color_set(Evas_Object *o, int r, int g, int b, int a);
static void _foo_object_clip_set(Evas_Object *o, Evas_Object *clip);
static void _foo_object_clip_unset(Evas_Object *o);
</programlisting>
Las predeclaraciones requeridas para el objeto inteligente. Estas serán explicadas conforme lleguemos a la implementación.
</para>

<para>
<programlisting>
Evas_Object *foo_new(Evas *e) {
    Evas_Object *result = NULL;
    Foo_Object *data = NULL;

    if ((result = foo_object_new(e))) {
        if ((data = evas_object_smart_data_get(result)))
            return result;
        else
            evas_object_del(result);
    }

    return NULL;
}
</programlisting>
<function>foo_new()</function> es nuestro único interfaz externo y es responsable de configurar el propio objeto. La llamada a <function>foo_object_new()</function> hará el trabajo pesado en la creación del objeto. La <function>evas_object_smart_data_get()</function> es mas una comprobación de error que otra cosa. Cuando <function>foo_object_new()</function> se ejecuta añadirá el objeto inteligente al evas y esto resultará en una llamada <literal>add</literal> creará un <literal>Foo_Object</literal>. Así , solamente estamos comprobando que <literal>Foo_Object</literal> ha sido creado.
</para>

<para>
<programlisting>
static Evas_Object *foo_object_new(Evas *evas) {
    Evas_Object *foo_object;

    foo_object = evas_object_smart_add(evas, _foo_object_smart_get());
    return foo_object;
}
</programlisting>
Nuestra función <function>foo_object_new()</function> tiene la simple tarea de añadir nuestro objeto inteligente en un Evas dado. Esto se hace a través de <function>evas_object_smart_add()</function> pasando el Evas y el objeto <literal>Evas_Smart *</literal>. Nuestro <literal>Evas_Smart *</literal> es producido por la llamada <function>_foo_object_smart_get()</function>.
</para>

<para>
<programlisting>
static Evas_Smart *_foo_object_smart_get() {
    static Evas_Smart *smart = NULL;
    if (smart)
        return (smart);

    smart = evas_smart_new("foo_object",
                            _foo_object_add,
                            _foo_object_del,
                            _foo_object_layer_set,
                            _foo_object_raise,
                            _foo_object_lower,
                            _foo_object_stack_above,
                            _foo_object_stack_below,
                            _foo_object_move,
                            _foo_object_resize,
                            _foo_object_show,
                            _foo_object_hide,
                            _foo_object_color_set,
                            _foo_object_clip_set,
                            _foo_object_clip_unset,
                            NULL
                          );
    return smart;
}
</programlisting>
Notarás que <literal>Evas_Smart *smart</literal> en esta función es declarado <literal>static</literal>.Esto es porque no importa cuantos <literal>Evas_Object</literal> creemos , sólo habrá un objeto <literal>Evas_Smart</literal>. Tal como Raster lo pone, <literal>Evas_Smart</literal> es como una definición de clase C++, no una instancia. El <literal>Evas_Object</literal> es la instancia del <literal>Evas_Smart</literal>.
</para>

<para>
El objeto inteligente en sí es creado a través de la llamada a la función <function>evas_smart_new()</function>. A esta función pasamos el nombre del objeto inteligente, todas las rutinas callback para el objeto inteligente, y cualesquiera datos de usuario. En este caso no tenemos datos de usuario así que usamos NULL.
</para>

<para>
<programlisting>
static void _foo_object_add(Evas_Object *o) {
    Foo_Object *data = NULL;
    Evas *evas = NULL;

    evas = evas_object_evas_get(o);

    data = (Foo_Object *)malloc(sizeof(Foo_Object));
    memset(data, 0, sizeof(Foo_Object));

    data-&gt;clip = evas_object_rectangle_add(evas);
    data-&gt;outer = evas_object_rectangle_add(evas);
    evas_object_color_set(data-&gt;outer, 0, 0, 0, 255);
    evas_object_clip_set(data-&gt;outer, data-&gt;clip);
    evas_object_show(data-&gt;outer);

    data-&gt;inner = evas_object_rectangle_add(evas);
    evas_object_color_set(data-&gt;inner, 255, 255, 255, 126);
    evas_object_clip_set(data-&gt;inner, data-&gt;clip);
    evas_object_show(data-&gt;inner);

    data-&gt;x = 0;
    data-&gt;y = 0;
    data-&gt;w = 0;
    data-&gt;h = 0;

    evas_object_smart_data_set(o, data);
}
</programlisting>
Cuando <function>evas_object_smart_add()</function> es llamada en <function>foo_object_new()</function>, esta función <function>_foo_object_add()</function> será llamada de manera que podemos configurar cualesquiera datos internos para este objeto inteligente.
</para>

<para>
Para este objeto inteligente tres <literal>Evas_Object</literal> internos. Siendo estos <literal>data-&gt;clip</literal>, usado para hacer clipping con los otros dos objectos, <literal>data-&gt;outer</literal>, nuestro rectángulo externo y <literal>data-&gt;inner</literal>, nuestro rectángulo interno. Los rectángulos interno y externo tienen el clipping puesto en el objeto clip y son mostrados inmediatamente. El objeto clip no es mostrado, lo será cuando el usuario llame <function>evas_object_show()</function> en este objecto.
</para>

<para>
Finalmente llamamos <function>evas_object_smart_data_set()</function> para colocar nuestro nuevo <literal>Foo_Object</literal> como datos para este objecto inteligente. Estos datos serán obtenidos en otras funciones de este objeto llamando a <function>evas_object_smart_data_get()</function>.
</para>

<para>
<programlisting>
static void _foo_object_del(Evas_Object *o) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        evas_object_del(data-&gt;clip);
        evas_object_del(data-&gt;outer);
        evas_object_del(data-&gt;inner);
        free(data);
    }
}
</programlisting>
El callback <function>_foo_object_del()</function> será ejecutado si el usuario llama <function>evas_object_del()</function> en nuestro objeto. Para este objecto es tan simple como llamar a <function>evas_object_del</function> en nuestros 3 rectangulos y liberar la estructura <literal>Foo_Object</literal>.
</para>

<para>
<programlisting>
static void _foo_object_layer_set(Evas_Object *o, int l) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        evas_object_layer_set(data-&gt;clip, l);
    }
}

static void _foo_object_raise(Evas_Object *o) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        evas_object_raise(data-&gt;clip);
    }
}

static void _foo_object_lower(Evas_Object *o) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        evas_object_lower(data-&gt;clip);
    }
}

static void _foo_object_stack_above(Evas_Object *o, Evas_Object *above) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        evas_object_stack_above(data-&gt;clip, above);
    }
}

static void _foo_object_stack_below(Evas_Object *o, Evas_Object *below) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        evas_object_stack_below(data-&gt;clip, below);
    }
}
</programlisting>
Este grupo de funciones: <function>_foo_object_layer_set()</function>,
<function>_foo_object_raise()</function>,
<function>_foo_object_lower()</function>,
<function>_foo_object_stack_above()</function>, y
<function>_foo_object_stack_below()</function> funcionan todos de la misma manera, aplicando la función requerida <function>evas_object_*</function> al objeto <literal>data-&gt;clip</literal>.
</para>

<para>
Estas funciones son activadas por el uso de:
<function>evas_object_layer_set()</function>,
<function>evas_object_raise()</function>,
<function>evas_object_lower()</function>,
<function>evas_object_stack_above()</function>, y
<function>evas_object_stack_below()</function> respectivamente.
</para>

<para>
<programlisting>
static void _foo_object_move(Evas_Object *o, Evas_Coord x, Evas_Coord y) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        float ix, iy;
        ix = (data-&gt;w - (data-&gt;w * 0.8)) / 2;
        iy = (data-&gt;h - (data-&gt;h * 0.8)) / 2;

        evas_object_move(data-&gt;clip, x, y);
        evas_object_move(data-&gt;outer, x, y);
        evas_object_move(data-&gt;inner, x + ix, y + iy);

        data-&gt;x = x;
        data-&gt;y = y;
    }
}
</programlisting>
El callback <function>_foo_object_move()</function> será accionado cuando
<function>evas_object_move()</function> sea llamado en nuestro objecto. Cada uno de los
objetos internos es movido a su posición correcta con llamadas a
<function>evas_object_move()</function>.
</para>

<para>
<programlisting>
static void _foo_object_resize(Evas_Object *o, Evas_Coord w, Evas_Coord h) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        float ix, iy, iw, ih;
        iw = w * 0.8;
        ih = h * 0.8;

        ix = (w - iw) / 2;
        iy = (h - iw) / 2;

        evas_object_resize(data-&gt;clip, w, h);
        evas_object_resize(data-&gt;outer, w, h);

        evas_object_move(data-&gt;inner, data-&gt;x + ix, data-&gt;y + iy);
        evas_object_resize(data-&gt;inner, iw, ih);

        data-&gt;w = w;
        data-&gt;h = h;
    }
}
</programlisting>
El callback <function>_foo_object_resize()</function> será accionado cuando
el usuario llame <function>evas_object_resize()</function> en nuestro objeto. Así, 
para nuestro objecto, necesitamos redimensionar <literal>data-&gt;clip</literal> y 
<literal>data-&gt;outer</literal> al tamaño completo disponible para nuestro objecto.
Esto es hecho con las llamadas a <function>evas_object_resize()</function>.
Entonces necesitamos mover y redimensionar el objeto <literal>data-&gt;inner</literal> de manera que
permanezca en la posición correcta en el rectángulo externo. Esto es hecho
con <function>evas_object_move()</function> y
<function>evas_object_resize()</function> respectivamente. Entonces almacenamos de nuevo
la anchura y altura en nuestro objeto de manera que podemos referenciarlas mas tarde.
</para>

<para>
<programlisting>
static void _foo_object_show(Evas_Object *o) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o)))
            evas_object_show(data-&gt;clip);
}
</programlisting>
El callback <function>_foo_object_show()</function> será accionado cuando
<function>evas_object_show()</function> sea llamada en nuestro objecto. Para
mostrar nuestro objeto todo lo que necesitamos es mostrar la región de clip, dado
que nuestros rectángulos están en ella. Esto se hace en la llamada a 
<function>evas_object_show()</function>.
</para>

<para>
<programlisting>
static void _foo_object_hide(Evas_Object *o) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o)))
        evas_object_hide(data-&gt;clip);
}
</programlisting>
El callback <function>_foo_object_hide()</function> será accionado cuando
una llamada a <function>evas_object_hide()</function> sea hecha en nuestro objecto.
Como estamos usando un objeto de clipping interno solo necesitamos esconder el
objecto clip, <literal>data-&gt;clip</literal>, para esconder nuestro objecto inteligente.
Esto se hace por medio de la llamada a <function>evas_object_hide()</function>.
</para>

<para>
<programlisting>
static void _foo_object_color_set(Evas_Object *o, int r, int g, int b, int a) {
}
</programlisting>
La función  <function>_foo_object_color_set()</function> será llamada
cuando <function>evas_object_color_set()</function> sea llamada en nuestro
<literal>Evas_Object</literal>. Pero, dado que no quiero que mi objeto cambie de 
colores, ignoro este callback.
</para>

<para>
<programlisting>
static void _foo_object_clip_set(Evas_Object *o, Evas_Object *clip) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o)))
        evas_object_clip_set(data-&gt;clip, clip);
}
</programlisting>
El callback <function>_foo_object_clip_set()</function> será accionado cuando la llamada
<function>evas_object_clip_set()</function> sea hecha en nuestro objeto. En este caso 
propagamos esto a nuestro objeto de clipping interno por medio de la llamada a
<function>evas_object_clip_set()</function>.
</para>

<para>
<programlisting>
static void _foo_object_clip_unset(Evas_Object *o) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o)))
        evas_object_clip_unset(data-&gt;clip);
}
</programlisting>
El callback <function>_foo_object_clip_unset()</function> será accionado cuando una
llamada a <function>evas_object_clip_unset()</function> sea hecha en nuestro
objecto. Simplemente borramos el clip interno por medio de la llamada a  
<function>evas_object_clip_unset()</function>.
</para>

<para>
Una vez el código de objeto inteligente está completo podemos crear nuestro programa principal para utilizar el nuevo objeto inteligente.
<example>
<title>main.c</title>
<programlisting>
#include &lt;stdio.h&gt;
#include &lt;Ecore_Evas.h&gt;
#include &lt;Ecore.h&gt;
#include "foo.h"

#define WIDTH 400
#define HEIGHT 400
#define STEP 10

static int dir = -1;
static int cur_width = WIDTH;
static int cur_height = HEIGHT;

static int timer_cb(void *data);

int main() {
    Ecore_Evas  *ee;
    Evas        *evas;
    Evas_Object *o;

    ecore_init();

    ee = ecore_evas_software_x11_new(NULL, 0, 0, 0, WIDTH, HEIGHT);
    ecore_evas_title_set(ee, "Smart Object Example");
    ecore_evas_borderless_set(ee, 0);
    ecore_evas_show(ee);

    evas = ecore_evas_get(ee);

    o = evas_object_rectangle_add(evas);
    evas_object_resize(o, (double)WIDTH, (double)HEIGHT);
    evas_object_color_set(o, 200, 200, 200, 255);
    evas_object_layer_set(o, -255);
    evas_object_show(o);

    o = foo_new(evas);
    evas_object_move(o, 0, 0);
    evas_object_resize(o, (double)WIDTH, (double)HEIGHT);
    evas_object_layer_set(o, 0);
    evas_object_show(o);

    ecore_timer_add(0.1, timer_cb, o);
    ecore_main_loop_begin();

    return 0;
}   
        
static int timer_cb(void *data) {
    Evas_Object *o = (Evas_Object *)data;
    Evas_Coord x, y;

    cur_width += (dir * STEP);
    cur_height += (dir * STEP);

    x = (WIDTH - cur_width) / 2;
    y = (HEIGHT - cur_height) / 2;

    if ((cur_width &lt; STEP) || (cur_width &gt; (WIDTH - STEP)))
        dir *= -1;

    evas_object_move(o, x, y);
    evas_object_resize(o, cur_width, cur_height);
    return 1;
}
</programlisting>
</example>
La mayor parte de este programa es el mismo que el dado en la receta dada previamente usando Ecore_Evas. La creación de nuestro nuevo objeto inteligente es vista en el fragmento de código:
<programlisting>
    o = foo_new(evas);
    evas_object_move(o, 0, 0);
    evas_object_resize(o, (double)WIDTH, (double)HEIGHT);
    evas_object_layer_set(o, 0);
    evas_object_show(o);
</programlisting>
Una vez tu nueva <function>foo_new()</function> devuelve nuestro objeto podemos manipularlo con las llamadas Evas normales, así que procedemos a colocar su posición , tamaño, capa y entonces a mostrar el objeto.
</para>

<para>
Una vez el nuvo objeto inteligente es creado y mostrado configuramos un temporizador Ecore para accionarse cada 0.1 segundos. Cuando el evento sea accionado ejecutará la función <function>timer_cb()</function>. Esta función callback disminuirá o aumentará el tamaño de nuestro objeto inteligente a la vez que lo mantiene centrado en la ventana principal.
</para>

<para>
Compilar este ejemplo es tan simple como:
<example>
<title>Compilación</title>
<screen>
zero@oberon [evas_smart] -&gt; gcc -o foo foo.c main.c \
    `ecore-config --cflags --libs` `evas-config --cflags --libs`
</screen>
</example>
</para>

<para>
Los objetos inteligentes Esmart son simples de crear pero proveen un potente mecanismo para abstraer piezas de tu programa. Para ver mas objetos inteligentes echa un vistazo a cualquiera de los objetos Esmart, Etox o Emotion.
</para>
</section>

