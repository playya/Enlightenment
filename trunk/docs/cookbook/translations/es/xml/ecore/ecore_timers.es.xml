
<section>
<sectioninfo>
  <author>
    <firstname>dan</firstname>
    <surname>sinclair</surname>
    <email>zero@perplexity.org</email>
    <othername>'dj2'</othername>
  </author>
  <date>29 July 2004</date>
</sectioninfo>

<title>Receta:Temporizadores  Ecore</title>
<para>
Si necesitas que un callback se accione en un determinado momento, con posibilidad de repetir el temporizador continuamente, entonces <literal>Ecore_Timer</literal> es lo que estás buscando.
</para>

<para>
<example>
<title>Temporizadores Ecore</title>
<programlisting>
#include &lt;stdio.h&gt;
#include &lt;Ecore.h&gt;

static int timer_one_cb(void *data);
static int timer_two_cb(void *data);

int main(int argc, char ** argv) {
    ecore_init();

    ecore_timer_add(1, timer_one_cb, NULL);
    ecore_timer_add(0.5, timer_two_cb, NULL);

    ecore_main_loop_begin();
    ecore_shutdown();

    return 0;
}

static int timer_one_cb(void *data) {
    printf("1");
    fflush(stdout);
    return 1;
}

static int timer_two_cb(void *data) {
    printf("2");
    fflush(stdout);
    return 1;
}
</programlisting>
</example>
</para>

<para>
La creación de los temporizadores es tan simple como llamar a <function>ecore_timer_add()</function>.
Esto devolverá un <literal>Ecore_Timer</literal> o NULL en caso de fallo. En este caso estoy ignorando el valor de retorno. Los tres parámetros son:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para>double timeout</para></listitem>
 <listitem><para>int (*callback)(void *data)</para></listitem>
 <listitem><para>const void *user_data</para></listitem>
</itemizedlist>
</para>

<para>
El timeout da el numero de segundos en que expirará este temporizador. En el caso de este ejemplo le damos 1 segundo y 0.5 segundos respectivamente. La función callback es la que será ejecutada cuando el temporizador expire y user_data son los datos que pasar a la función callback.
</para>

<para>
Las funciones callback tienen todas la misma firma <literal>int callback(void *data)</literal>. El valor de retorno del temporizador debiera ser 0 o 1. Si devuelves 0 el temporizador expirará y <emphasis>no</emphasis> se ejecutará otra vez. Si devuelves 1, el temporizador será programado para re-ejecutarse en el periodo de tiempo dado por el timeout. Esto te permite activar o continuar el temporizador como requiera tu programa.
</para>

<para>
Si tienes un temporizador que deseas eliminar en algun punto del futuro puedes llamar a <function>ecore_timer_del(Ecore_Timer *)</function>. Si la eliminación se lleva a cabo con éxito el puntero será devuelto, de otra manera NULL será devuelto. Despues de llamar a la función de borrado la estructura <literal>Ecore_Timer</literal> será invalida y no deberías usarla de nuevo en tu programa.
</para>

<para>
Compilar el ejemplo es tan simple como:
<example>
<title>Compilación</title>
<screen>
gcc -Wall -o etimer etimer.c `ecore-config --cflags --libs`
</screen>
</example>
Si ejecutas el programa deberías ver una serie de unos y doses en pantalla con el doble de doses que de unos.
</para>

<para>
Los temporizadores <literal>Ecore_Timer</literal> son fáciles de iniciar y usar y proveen un poptente mecanismo de temporización a tus programas.
</para>

</section>


