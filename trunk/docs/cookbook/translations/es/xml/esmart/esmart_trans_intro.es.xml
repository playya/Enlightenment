<!--
#######################################################
A simple recipe to get an esmart trans window up 
#######################################################
-->
<section>
<sectioninfo>
  <author>
    <firstname>dan</firstname>
    <surname>sinclair</surname>
    <email>zero@perplexity.org</email>
    <othername>'dj2'</othername>
  </author>
  <date>25 April 2004</date>
</sectioninfo>

<title>Receta: Introducci&#243;n a Esmart_Trans</title>

<para>
Transparencia est&#225; convirtiendose cada vez m&#225;s en un rasgo com&#250;n de las aplicaciones. Con este objeto, el 
objecto Esmart_Trans ha sido creado. Este objeto har&#225; todo el trabajo duro para producir un fondo 
transparente para tu programa.
</para>

<para>
Esmart_Trans hace muy facil la integraci&#243;n de un fondo transparente en tu aplicaci&#243;n. Necesitas crear el 
objeto trans, y entonces asegurarte de actualizarlo conforme la ventana sea movida o redimensionada.
</para>

<example>
<title>Includes y declaraciones</title>
<programlisting>
#include &lt;stdio.h&gt;
#include &lt;Ecore.h&gt;
#include &lt;Ecore_Evas.h&gt;
#include &lt;Esmart/Esmart_Trans_X11.h&gt;

int sig_exit_cb(void *data, int ev_type, void *ev);
void win_del_cb(Ecore_Evas *ee);
void win_resize_cb(Ecore_Evas *ee);
void win_move_cb(Ecore_Evas *ee);

static void _freshen_trans(Ecore_Evas *ee);
void make_gui();
</programlisting>
</example>
<para>
Cada aplicaci&#243;n que use un objeto Esmart_Trans va a necesitar Ecore, Ecore_Evas, y los archivos de cabecera 
de Esmart/Esmart_Trans.

Las cuatro declaraciones siguientes son callbacks desde ecore para eventos en nuestra ventana, salida, borrado, 
redimensionado, y movimiento respectivamente.

Las &#250;ltimas dos declaraciones son funciones de conveniencia que se usan en el ejemplo y no necesitan estar 
en tu programa.
</para>

<example>
<title>main</title>
<programlisting>
int main(int argc, char ** argv) {
    int ret = 0;
        
    if (!ecore_init()) {
        printf("Error initializing ecore\n");
        ret = 1;
        goto ECORE_SHUTDOWN;
    }

    if (!ecore_evas_init()) {
        printf("Error initializing ecore_evas\n");
        ret = 1;
        goto ECORE_SHUTDOWN;
    }
    make_gui();
    ecore_main_loop_begin();
        
    ecore_evas_shutdown();

ECORE_SHUTDOWN:
    ecore_shutdown();
                
    return ret;
}               
</programlisting>
</example>
<para>
La rutina principal para este programa es bastante simple. Ecore y Ecore_Evas son ambos inicializados, con 
la apropiada comprobaci&#243;n de errores. Entonces creamos el gui y empezamos el ciclo de eventos principal de 
ecore. Cuando ecore sale cerramos todo y retornamos.
</para>

<example>
<title>callbacks de salida y borrado</title>
<programlisting>
int sig_exit_cb(void *data, int ev_type, void *ev) {
    ecore_main_loop_quit();
    return 1;
}

void win_del_cb(Ecore_Evas *ee) {
    ecore_main_loop_quit();
}
</programlisting>
</example>
<para>
Los callbacks de salida y borrado son los callbacks ecore gen&#233;ricos. El callback de salida no es estrictamente 
necesario, dado que Ecore llamar&#225; a <function>ecore_main_loop_quit()</function> si no hay ningun manejador registrado, 
pero se incluye para mostrar como se hace.
</para>

<example>
<title>_freshen_trans</title>
<programlisting>
static void _freshen_trans(Ecore_Evas *ee) {
    int x, y, w, h;
    Evas_Object *o;

    if (!ee) return;

    ecore_evas_geometry_get(ee, &amp;x, &amp;y, &amp;w, &amp;h);
    o = evas_object_name_find(ecore_evas_get(ee), "bg");

    if (!o) {
        fprintf(stderr, "Trans object not found, bad, very bad\n");
        ecore_main_loop_quit();
    }
    esmart_trans_x11_freshen(o, x, y, w, h);
}
</programlisting>
</example>
<para>
La rutina <function>_freshen_trans</function> es una rutina de ayude para actualizar la imagen a la que la 
transparencia se muestra. Esta ser&#225; llamada cuando necesitemos actualizar nuestra imagen a lo que est&#225; en ese 
momento bajo la ventana.

La funci&#243;n captura el tama&#241;o actual del ecore_evas, y entonces adquiere el objeto con el nombre &quot;bg&quot; 
( este nombre es el mismo que damos a nuestra trans cuando la creamos ).Entonces, siempre que el objeto exista, 
le decimos a esmart que refresque la imagen siendo mostrada.
</para>

<example>
<title>resize_cb</title>
<programlisting>
void win_resize_cb(Ecore_Evas *ee) {
    int w, h;
    int minw, minh;
    int maxw, maxh;
    Evas_Object *o = NULL;

    if (ee) {
        ecore_evas_geometry_get(ee, NULL, NULL, &amp;w, &amp;h);
        ecore_evas_size_min_get(ee, &amp;minw, &amp;minh);
        ecore_evas_size_max_get(ee, &amp;maxw, &amp;maxh);

        if ((w &gt;= minw) &amp;&amp; (h &gt;= minh) &amp;&amp; (h &lt;= maxh) &amp;&amp; (w &lt;= maxw)) {
            if ((o = evas_object_name_find(ecore_evas_get(ee), "bg")))
                evas_object_resize(o, w, h);
        }
    }
    _freshen_trans(ee);
}
</programlisting>
</example>
<para>
Cuando la ventana sea redimensionada necesitamos redimensionar nuestro evas al tama&#241;o correcto y entonces 
actualizar el objeto trans para mostrar ese pedazo de background.

Capturamos el tama&#241;o actual de la ventana con <function>ecore_evas_geometry_get</function> y el tama&#241;o m&#225;ximo 
y m&#237;nimo de la ventana. Mientras nuestro tama&#241;o deseado est&#233; entre los l&#237;mites m&#225;ximo y m&#237;nimo de la ventana, 
capturamos el objeto &quot;bg&quot; ( de nuevo el mismo que el t&#237;tulo ) y lo redimensionamos.

Una vez hemos hecho el redimensionado, llamamos a la rutina <function>_freshen_trans</function> para actualizar 
la imagen mostrada en el fondo.
</para>

<example>
<title>move_cb</title>
<programlisting>
void win_move_cb(Ecore_Evas *ee) {
    _freshen_trans(ee);
}
</programlisting>
</example>
<para>
Cuando la ventana  es movida necesitamos refrescar la im&#225;gen mostrada como transparencia.
</para>

<example>
<title>Iniciar ecore/ecore_evas</title>
<programlisting>
void make_gui() {
    Evas *evas = NULL;
    Ecore_Evas *ee = NULL;
    Evas_Object *trans = NULL;
    int x, y, w, h;

    ecore_event_handler_add(ECORE_EVENT_SIGNAL_EXIT, sig_exit_cb, NULL);

    ee = ecore_evas_software_x11_new(NULL, 0, 0, 0, 300, 200);
    ecore_evas_title_set(ee, "trans demo");

    ecore_evas_callback_delete_request_set(ee, win_del_cb);
    ecore_evas_callback_resize_set(ee, win_resize_cb);
    ecore_evas_callback_move_set(ee, win_move_cb);

    evas = ecore_evas_get(ee);
</programlisting>
</example>
<para>
La primera porci&#243;n de make_gui se encarga de iniciar ecore y ecore_evas. Primero al callback de salida es 
conectado en ECORE_EVENT_SIGNAL_EXIT, entonces el objeto Ecore_Evas es creado con el motor software X11. 
Se inicia el t&#237;tulo de la ventana y conectamos los callbacks escritos arriba, delete, resize y move. 
Finalmente capturamos el evas para el Ecore_Evas creado.
</para>

<example>
<title>Creando el objeto Esmart_Trans</title>
<programlisting>
    trans = esmart_trans_x11_new(evas);
    evas_object_move(trans, 0, 0);
    evas_object_layer_set(trans, -5);
    evas_object_name_set(trans, "bg");

    ecore_evas_geometry_get(ee, &amp;x, &amp;y, &amp;w, &amp;h);
    evas_object_resize(trans, w, h);

    evas_object_show(trans);
    ecore_evas_show(ee);

    esmart_trans_x11_freshen(trans, x, y, w, h);
}
</programlisting>
</example>
<para>
Una vez todo est&#225; iniciado podemos crear el objeto trans. El trans ha de ser creado en el evas devuelto por 
<function>ecore_evas_get</function>. Esta creaci&#243;n inicial es hecha mediante la llamada a <function>esmart_trans_x11_new</function>. 
En cuanto tenemos el objeto, lo movemos de manera que empiece en la posici&#243;n ( 0 , 0 ) ( la esquina superior 
izquierda ), iniciamos la capa a -5 y llamamos al objeto &quot;bg&quot; ( como usamos mas arriba ).

Entonces capturamos el tama&#241;o actual del ecore_evas y lo usamos para redimensionar el objeto trans al tama&#241;o 
de la ventana. Cuando todo ha sido redimensionado mostramos trans y el ecore_evas.

Como paso final, refrescamos la imagen en la transparencia a la que est&#225; actualmente bajo la ventana de 
manera que est&#233; actualizada.
</para>

<example>
<title>makefile sencilla</title>
<programlisting>
CFLAGS = `ecore-config --cflags` `evas-config --cflags` `esmart-config --cflags`
LIBS = `ecore-config --libs` `evas-config --libs` `esmart-config --libs` \
            -lesmart_trans_x11

all:
    gcc -o trans_example trans_example.c $(CFLAGS) $(LIBS)
</programlisting>
</example>
<para>
Para compilar el programa de arriba necesitamos incluir la informaci&#243;n de librer&#237;a para ecore, ecore_evas y 
esmart. Esto es hecho por medio de las scripts -config para cada librer&#237;a. Estas scripts -config saben donde 
est&#225; cada uno de los includes y librer&#237;as e inicia los paths de include y enlazado apropiados para la compilaci&#243;n.
</para>
</section>


