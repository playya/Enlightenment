
<section>
<sectioninfo>
  <author>
    <firstname>dan</firstname>
    <surname>sinclair</surname>
    <email>zero@perplexity.org</email>
    <othername>'dj2'</othername>
  </author>
  <date>29 de Julho 2004</date>
</sectioninfo>

<title>Receita: Temporizadores Ecore</title>
<para>
Se você precisa que um callback seja disparado num determinado momento com a 
possibilidade de repetir o temporizador continuamente, então <literal>Ecore_Timer</literal> 
é o que você procura.
</para>

<para>
<example>
<title>Temporizadores Ecore</title>
<programlisting>
#include &lt;stdio.h&gt;
#include &lt;Ecore.h&gt;

static int timer_one_cb(void *data);
static int timer_two_cb(void *data);

int main(int argc, char ** argv) {
    ecore_init();

    ecore_timer_add(1, timer_one_cb, NULL);
    ecore_timer_add(0.5, timer_two_cb, NULL);

    ecore_main_loop_begin();
    ecore_shutdown();

    return 0;
}

static int timer_one_cb(void *data) {
    printf("1");
    fflush(stdout);
    return 1;
}

static int timer_two_cb(void *data) {
    printf("2");
    fflush(stdout);
    return 1;
}
</programlisting>
</example>
</para>

<para>
A criação dos temporizadores é simples bastando chamar <function>ecore_timer_add()</function>.
Isto retornará uma estrutura <literal>Ecore_Timer</literal> ou NULL se a chamada falhar. Neste 
caso eu estou ignorando o valor de retorno. Os três parâmetros são:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para>double timeout</para></listitem>
 <listitem><para>int (*callback)(void *data)</para></listitem>
 <listitem><para>const void *user_data</para></listitem>
</itemizedlist>
</para>

<para>
O parâmetro timeout dá o número de segundos que expirará o temporizador. No caso do exemplo, demos 
1 segundo e 0.5 segundos respectivamente. A função callback é a que será executada quando o 
temporizador expirar e user_data é qualquer dado para ser passado para a função callback.
</para>

<para>
As funções callback tem a mesma assinatura <literal>int callback(void *data)</literal>. O 
valor de retorno do temporizador deve ser 0 ou 1. Se você retornar 0 o temporizador expirará e 
<emphasis>não</emphasis> será executado novamente. Se você retornar 1, o temporizador será 
re-agendado para se executar novamanete após o fim do tempo dado pelo parâmetro 
timeout. Isto permite que você ative ou continue com o temporizador do jeito que 
necessitar seu programa.
</para>

<para>
Se você tem um temporizador que deseja remover em um determinado momento basta 
chamar <function>ecore_timer_del(Ecore_Timer *)</function>. Se a eliminação for 
bem sucedida o ponteiro será retornado, caso contrário será retornado NULL. 
Depois disto a estrutura <literal>Ecore_Timer</literal> será invalidada e você não 
poderá mais usar novamente no seu programa.
</para>

<para>
Compilar o exemplo é bem simples:
<example>
<title>Compilação</title>
<screen>
gcc -Wall -o etimer etimer.c `ecore-config --cflags --libs`
</screen>
</example>
Se você executar o programa deverá ver uma série de '1's e '2's na tela com duas vezes mais '2's que '1's.
</para>

<para>
Os temporizadores <literal>Ecore_Timer</literal> são fáceis de usar provendo um potente mecanismo de temporização para seus programas.
</para>

</section>


