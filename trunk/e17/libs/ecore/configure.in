dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_ISC_POSIX
AM_INIT_AUTOMAKE(ecore, 0.9.9.041)
AM_CONFIG_HEADER(config.h)

AC_C_BIGENDIAN
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)
AM_ENABLE_SHARED
AM_PROG_LIBTOOL
AC_C___ATTRIBUTE__

if test "x${bindir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    PACKAGE_BIN_DIR="${ac_default_prefix}/bin"
  else
    PACKAGE_BIN_DIR="${prefix}/bin"
  fi
else
  PACKAGE_BIN_DIR="${bindir}"
fi
AC_SUBST(PACKAGE_BIN_DIR)

if test "x${libdir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    PACKAGE_LIB_DIR="${ac_default_prefix}/lib"
  else
    PACKAGE_LIB_DIR="${prefix}/lib"
  fi
else
  PACKAGE_LIB_DIR="${libdir}"
fi
AC_SUBST(PACKAGE_LIB_DIR)

if test "x${prefix}" = "xNONE"; then
  PACKAGE_DATA_DIR="${ac_default_prefix}/share/${PACKAGE}"
else
  PACKAGE_DATA_DIR="${prefix}/share/${PACKAGE}"
fi
AC_SUBST(PACKAGE_DATA_DIR)

dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

AC_HEADER_SYS_WAIT

# define pkg-config requirements for all our submodules.
# only the trivial requirements go here.
requirements_ecore_con=""
requirements_ecore_config=""
requirements_ecore_desktop=""
requirements_ecore_directfb=""
requirements_ecore_evas="evas"
requirements_ecore_fb=""
requirements_ecore_file=""
requirements_ecore_ipc=""
requirements_ecore_job=""
requirements_ecore_txt=""
requirements_ecore_x=""
requirements_ecore_win32=""
requirements_ecore_sdl=""

dnl The first call to PKG_CHECK_MODULES is done conditionally,
dnl so we should include this here:
PKG_PROG_PKG_CONFIG

AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(strlcpy)

AC_CHECK_HEADERS(netinet/in.h)

winsock_libs=""
create_shared_lib=""
ecore_file_win32_lib=""
case "$host_os" in
	mingw|mingw32)
		winsock_libs="-lwsock32"
		create_shared_lib="-no-undefined"
		ecore_file_win32_lib="-lole32 -luuid"
		;;
esac

AC_SUBST(winsock_libs)
AC_SUBST(create_shared_lib)
AC_SUBST(ecore_file_win32_lib)

iconv_cflags=""
iconv_libs=""
have_iconv="no"
AC_ARG_WITH(iconv-link,
  [  --with-iconv-link=ICONV_LINK     explicitly specify an iconv link option],
  [
    iconv_libs=$withval
    have_iconv="yes"
  ]
)
AC_MSG_CHECKING(for explicit iconv link options)
AC_MSG_RESULT($iconv_libs)

if test "x$have_iconv" = "xno" ; then
  AC_CHECK_LIB(iconv, libiconv,
    [
     iconv_libs="-liconv"
     have_iconv="yes"
    ]
  )

  if test "x$have_iconv" != "xyes"; then
    AC_CHECK_LIB(iconv, iconv,
      [
       iconv_libs="-liconv"
       have_iconv="yes"
      ]
    )
  fi

  if test "x$have_ecore_txt" != "xyes"; then
    AC_CHECK_LIB(c, libiconv,
      [
       have_iconv="yes"
      ]
    )
  fi

  if test "x$have_ecore_txt" != "xyes"; then
    AC_CHECK_LIB(c, iconv,
      [
       have_iconv="yes"
      ]
    )
  fi
fi

AC_SUBST(iconv_cflags)
AC_SUBST(iconv_libs)

ECORE_CHECK_MODULE([Txt], [yes], [$have_iconv],
  [ecore_txt_libs="$ecore_txt_libs $iconv_libs"])

dnl Check for XCB
have_ecore_x="no"
have_ecore_x_xcb="no"

AC_ARG_ENABLE(ecore-x-xcb,
  AC_HELP_STRING(
    [--enable-ecore-x-xcb],
    [enable the ecore_x module with XCB backend. [[default=disabled]]]),
  [ want_ecore_x_xcb=$enableval ],
  [ want_ecore_x_xcb="no" ])

AC_MSG_CHECKING(whether ecore_x with XCB backend is to be built)
AC_MSG_RESULT($want_ecore_x_xcb)

if test "x$want_ecore_x_xcb" = "xyes" ; then
  PKG_CHECK_MODULES(XCB, xcb xcb-icccm xcb-image xcb-keysyms,
    [ have_ecore_x_xcb="yes" ],
    [ have_ecore_x_xcb="no" ])

  if test "x$have_ecore_x_xcb" = "xyes" ; then
    PKG_CHECK_MODULES(XCB_DAMAGE, xcb-damage,
      [ have_ecore_x_xcb_damage="yes"
      AC_DEFINE(ECORE_XCB_DAMAGE, 1, [Build support for XCB damage]) ],
      [ have_ecore_x_xcb_damage="no" ])

    PKG_CHECK_MODULES(XCB_DPMS, xcb-dpms,
      [ have_ecore_x_xcb_dpms="yes"
      AC_DEFINE(ECORE_XCB_DPMS, 1, [Build support for XCB dpms]) ],
      [ have_ecore_x_xcb_dpms="no" ])

    PKG_CHECK_MODULES(XCB_RANDR, xcb-randr,
      [ have_ecore_x_xcb_randr="yes"
      AC_DEFINE(ECORE_XCB_RANDR, 1, [Build support for XCB randr]) ],
      [ have_ecore_x_xcb_randr="no" ])

    PKG_CHECK_MODULES(XCB_RENDER, xcb-render,
      [ have_ecore_x_xcb_render="yes"
      AC_DEFINE(ECORE_XCB_RENDER, 1, [Build support for XCB render]) ],
      [ have_ecore_x_xcb_render="no" ])

    PKG_CHECK_MODULES(XCB_SCREENSAVER, xcb-screensaver,
      [ have_ecore_x_xcb_screensaver="yes"
      AC_DEFINE(ECORE_XCB_SCREENSAVER, 1, [Build support for XCB screensaver]) ],
      [ have_ecore_x_xcb_screensaver="no" ])

    PKG_CHECK_MODULES(XCB_SHAPE, xcb-shape,
      [ have_ecore_x_xcb_shape="yes"
      AC_DEFINE(ECORE_XCB_SHAPE, 1, [Build support for XCB shape]) ],
      [ have_ecore_x_xcb_shape="no" ])

    PKG_CHECK_MODULES(XCB_SYNC, xcb-sync,
      [ have_ecore_x_xcb_sync="yes"
      AC_DEFINE(ECORE_XCB_SYNC, 1, [Build support for XCB sync]) ],
      [ have_ecore_x_xcb_sync="no" ])

    PKG_CHECK_MODULES(XCB_XFIXES, xcb-xfixes,
      [ have_ecore_x_xcb_xfixes="yes"
      AC_DEFINE(ECORE_XCB_FIXES, 1, [Build support for XCB xfixes]) ],
      [ have_ecore_x_xcb_xfixes="no" ])

    PKG_CHECK_MODULES(XCB_XINERAMA, xcb-xinerama,
      [ have_ecore_x_xcb_xinerama="yes"
      AC_DEFINE(ECORE_XCB_XINERAMA, 1, [Build support for XCB xinerama]) ],
      [ have_ecore_x_xcb_xinerama="no" ])

    PKG_CHECK_MODULES(XCB_XPRINT, xcb-xprint,
      [ have_ecore_x_xcb_xprint="yes"
      AC_DEFINE(ECORE_XCB_XPRINT, 1, [Build support for XCB xprint]) ],
      [ have_ecore_x_xcb_xprint="no" ])

    AC_DEFINE(BUILD_ECORE_X, 1, [Build Ecore_X Module (XCB backend)])
    AC_DEFINE(HAVE_ECORE_X_XCB, 1, [Defined to 1 if XCB backend is enabled.])

    requirements_ecore_evas="$requirements_ecore_evas ecore-x"
    have_ecore_x_xcb_define="-DHAVE_ECORE_X_XCB"
    have_ecore_x="yes"
    AC_SUBST(have_ecore_x_xcb_define)
  fi
fi

have_x="no"
x_dir="";
x_includes="";
x_cflags="";
x_libs="";
if test "x$have_ecore_x_xcb" != "xyes" ; then
AC_PATH_XTRA
AC_CHECK_HEADER(X11/X.h,
  [
   have_x="yes"
   x_dir=${x_dir:-/usr/X11R6}
   x_cflags=${x_cflags:--I${x_includes:-$x_dir/include}}
   x_libs="${x_libs:--L${x_libraries:-$x_dir/lib}} -lX11 -lXext"
  ]
)

AC_SUBST(x_cflags)
AC_SUBST(x_includes)
AC_SUBST(x_libs)

ECORE_CHECK_MODULE([X], [yes], [$have_x],
  [ecore_x_libs="$ecore_x_libs $x_libs"])

if test "x$have_ecore_x" = "xyes"; then
  Xcursor_libs=""
  Xcursor_cflags=""
  use_Xcursor="no"
  PCFLAGS=$CFLAGS
  CFLAGS=$x_cflags" "$x_includes
  AC_CHECK_HEADER(X11/Xcursor/Xcursor.h,
    [
      AC_CHECK_LIB(Xcursor, XcursorImageLoadCursor,
        [
          AC_DEFINE(ECORE_XCURSOR, 1, [Build support for Xcursor])
          Xcursor_cflags=""
          Xcursor_libs="-lXcursor"
          use_Xcursor="yes"
        ], [
          Xcursor_cflags=""
          Xcursor_libs=""
          use_Xcursor="no"
        ], [
          $x_libs -lXrender
        ]
      )
    ], [
      Xcursor_cflags=""
      Xcursor_libs=""
      use_Xcursor="no"
    ], [
      #include <X11/Xlib.h>
    ]
  )
  CFLAGS=$PCFLAGS

  AC_SUBST(Xcursor_cflags)
  AC_SUBST(Xcursor_libs)

  ECORE_CHECK_X_EXTENSION([Xdamage], [Xdamage.h], [Xdamage], [XDamageSubtract])
  ECORE_CHECK_X_EXTENSION([Xdpms], [dpms.h], [Xdpms], [DPMSQueryExtension])
  if test "x$use_xdpms" = "xno" ; then
    ECORE_CHECK_X_EXTENSION([Xdpms], [dpms.h], [Xext], [DPMSQueryExtension])
  fi
  ECORE_CHECK_X_EXTENSION([Xfixes], [Xfixes.h], [Xfixes], [XFixesExpandRegion])
  ECORE_CHECK_X_EXTENSION([Xinerama], [Xinerama.h], [Xinerama], [XineramaQueryScreens])
  ECORE_CHECK_X_EXTENSION([Xprint], [Print.h], [Xp], [XpQueryScreens])
  ECORE_CHECK_X_EXTENSION([Xrandr], [Xrandr.h], [Xrandr], [XRRSizes])
  ECORE_CHECK_X_EXTENSION([Xrender], [Xrender.h], [Xrender], [XRenderFindVisualFormat])
  ECORE_CHECK_X_EXTENSION([Xss], [scrnsaver.h], [Xss], [XScreenSaverSelectInput])

  requirements_ecore_evas="$requirements_ecore_evas ecore-x"
fi

fi

AC_CHECK_HEADER(ddraw.h,
  [ have_ddraw="yes"
    AC_DEFINE(HAVE_DIRECTDRAW, 1, [Build Ecore_Win32 with DirectDraw Code])
    ddraw_libs="-lddraw -ldxguid" ],
  [ have_ddraw="no" ]
)
AC_SUBST(ddraw_libs)

AC_CHECK_HEADERS(d3d9.h d3dx9.h,
  [ have_direct3d="yes"
    AC_DEFINE(HAVE_DIRECT3D, 1, [Build Ecore_Win32 with Direct3D Code])
    direct3d_libs="-ld3d9 -ld3dx9d" ],
  [ have_direct3d="no" ]
)
AC_SUBST(direct3d_libs)

have_win32="no"
if test "x${have_ddraw}" = "xyes" -o "x${have_direct3d}" = "xyes"; then
  have_win32="yes"
fi

ECORE_CHECK_MODULE([Win32], [no], [$have_win32],
  [ecore_win32_libs="$ecore_win32_libs $ddraw_libs $direct3d_libs"])

if test "x${have_ecore_win32}" = "xyes" -a "x${have_ddraw}" = "xyes"; then
  AC_DEFINE(BUILD_ECORE_EVAS_DIRECTDRAW, 1, [Support for DirectDraw Engine in Ecore_Evas])
fi

if test "x${have_ecore_win32}" = "xyes" -a "x${have_direct3d}" = "xyes"; then
  AC_DEFINE(BUILD_ECORE_EVAS_DIRECT3D, 1, [Support for Direct3D Engine in Ecore_Evas])
fi

ECORE_CHECK_MODULE([Job], [yes])

PKG_CHECK_MODULES(DIRECTFB, directfb >= 0.9.16,
  [ have_directfb="yes" ],
  [ have_directfb="no" ]
)

ECORE_CHECK_MODULE([DirectFB], [yes], [$have_directfb],
  [requirements_ecore_directfb="directfb"])

have_fb="no"
AC_CHECK_HEADER(linux/fb.h,
  [
   AC_CHECK_HEADER(linux/input.h, [ have_fb="yes" ])
  ]
)

ECORE_CHECK_MODULE([FB], [no], [$have_fb],
  [requirements_ecore_evas="$requirements_ecore_evas ecore-fb"])

tslib_libs=""
if test "x$have_ecore_fb" = "xyes" ; then
AC_CHECK_HEADER(tslib.h,
  [
   tslib_libs="-ltslib"
   AC_DEFINE(HAVE_TSLIB, 1, [Build Ecore_FB Touchscreen Code])
  ]
)
fi
AC_SUBST(tslib_libs)

PKG_CHECK_MODULES(EVAS, [evas >= 0.9.9],
  [ have_evas="yes" ],
  [ have_evas="no" ]
)

ECORE_CHECK_MODULE([Evas], [yes], [$have_evas])

have_ecore_evas_gl="no";

AC_ARG_ENABLE(ecore-evas-gl,
  AC_HELP_STRING(
    [--enable-ecore-evas-gl],
    [disable GL support in the ecore_evas module. [[default=enabled]]]
  ), [
    want_ecore_evas_gl=$enableval
  ], [
    want_ecore_evas_gl=yes
  ]
)

AC_MSG_CHECKING(whether ecore_evas gl support is to be built)
AC_MSG_RESULT($want_ecore_evas_gl)

dnl GL support requires X support, so we should
dnl handle the case where our user is on crack
dnl i.e. user disables X but enables GL
PCFLAGS=$CFLAGS
CFLAGS="$EVAS_CFLAGS $CFLAGS"
if test "x$want_ecore_evas_gl" = "xyes" -a "x$have_ecore_x" = "xyes"; then
  AC_CHECK_HEADER(Evas_Engine_GL_X11.h,
    [
      AC_DEFINE(BUILD_ECORE_EVAS_GL, 1, [Support for GL Engine in Ecore_Evas])
      have_ecore_evas_gl="yes";
    ], [
      dummy=no
    ], [
      #include <Evas.h>
    ]
  )
else
  if test "x$want_ecore_evas_gl" = "xyes"; then
    AC_MSG_WARN(Silly monkey: ecore_evas_gl requires ecore_x ... disabling ecore_evas_gl)
  fi
fi
PCFLAGS=$CFLAGS

have_ecore_evas_xrender="no";

AC_ARG_ENABLE(ecore-evas-xrender,
  AC_HELP_STRING(
    [--enable-ecore-evas-xrender],
    [disable XRender support in the ecore_evas module. [[default=enabled]]]
  ), [
    want_ecore_evas_xrender=$enableval
  ], [
    want_ecore_evas_xrender=yes
  ]
)

AC_MSG_CHECKING(whether ecore_evas xrender support is to be built)
AC_MSG_RESULT($want_ecore_evas_xrender)

dnl Xrender support requires X support, so we should
dnl handle the case where our user is on crack
dnl i.e. user disables X but enables Xrender
PCFLAGS=$CFLAGS
CFLAGS="$EVAS_CFLAGS $CFLAGS"
if test "x$want_ecore_evas_xrender" = "xyes" -a "x$have_ecore_x" = "xyes"; then
  AC_CHECK_HEADER(Evas_Engine_XRender_X11.h,
    [
      AC_DEFINE(BUILD_ECORE_EVAS_XRENDER, 1, [Support for XRender Engine in Ecore_Evas])
      have_ecore_evas_xrender="yes";
    ], [
      dummy=no
    ], [
      #include <Evas.h>
    ]
  )
else
  if test "x$want_ecore_evas_xrender" = "xyes"; then
    AC_MSG_WARN(Silly monkey: ecore_evas_xrender requires ecore_x ... disabling ecore_evas_xrender)
  fi
fi
PCFLAGS=$CFLAGS

have_ecore_evas_x11_16="no";

AC_ARG_ENABLE(ecore-evas-x11-16,
  AC_HELP_STRING(
    [--enable-ecore-evas-x11-16],
    [enable 16bpp optimized mode support in the ecore_evas module. [[default=disabled]]]
  ), [
    want_ecore_evas_x11_16=$enableval
  ], [
    want_ecore_evas_x11_16=no
  ]
)

AC_MSG_CHECKING(whether ecore_evas x11-16 support is to be built)
AC_MSG_RESULT($want_ecore_evas_x11_16)

dnl X11 16bpp support requires X support, so we should
dnl handle the case where our user is on crack
dnl i.e. user disables X but enables X11 16bpp
PCFLAGS=$CFLAGS
CFLAGS="$EVAS_CFLAGS $CFLAGS"
if test "x$want_ecore_evas_x11_16" = "xyes" -a "x$have_ecore_x" = "xyes"; then
  AC_CHECK_HEADER(Evas_Engine_Software_16_X11.h,
    [
      AC_DEFINE(BUILD_ECORE_EVAS_X11_16, 1, [Support for X11 16bpp Engine in Ecore_Evas])
      have_ecore_evas_x11_16="yes";
    ], [
      dummy=no
    ], [
      #include <Evas.h>
    ]
  )
else
  if test "x$want_ecore_evas_x11_16" = "xyes"; then
    AC_MSG_WARN(Silly monkey: ecore_evas_x11_16 requires ecore_x ... disabling ecore_evas_x11_16)
  fi
fi
PCFLAGS=$CFLAGS

AC_MSG_CHECKING(whether ecore_evas DirectFB support is to be built)
AC_ARG_ENABLE(ecore-evas-dfb,
  [  --disable-ecore-evas-dfb      disable DirectFB in the ecore_evas module],
  [
    if test "x$enableval" = "xno" ; then
      want_ecore_evas_dfb=no
    else
      want_ecore_evas_dfb=yes
    fi
  ], [
    want_ecore_evas_dfb=maybe
  ]
)
AC_MSG_RESULT($want_ecore_evas_dfb)

have_ecore_evas_dfb="no"
if test "x$want_ecore_evas_dfb" != "xno" ; then
  save_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS $DIRECTFB_CFLAGS"
  AC_CHECK_HEADER(Evas_Engine_DirectFB.h,
    [
      AC_DEFINE(BUILD_ECORE_EVAS_DIRECTFB, 1, [Support for DirectFB in Ecore_Evas])
      have_ecore_evas_dfb="yes"
    ], [
      if test "x$want_ecore_evas_dfb" = "xyes" ; then
        AC_MSG_ERROR(DirectFB requested but support not found)
      fi
    ], [
      #include <Evas.h>
    ]
  )
  CFLAGS="$save_CFLAGS"
fi

want_ecore_evas_fb="no";
have_ecore_evas_fb="no";

AC_MSG_CHECKING(whether ecore_evas fb support is to be built)
AC_ARG_ENABLE(ecore-evas-fb,
  [  --enable-ecore-evas-fb       enable fb in the ecore_evas module],
  [
    if test x"$enableval" = x"yes" ; then
      AC_MSG_RESULT(yes)
      want_ecore_evas_fb="yes"
    else
      AC_MSG_RESULT(no)
    fi
  ], [
    AC_MSG_RESULT(no)
  ]
)
if test "x$want_ecore_evas_fb" = "xyes" -a "x$have_ecore_fb" = "xyes"; then
  AC_CHECK_HEADER(Evas_Engine_FB.h,
    [
      AC_DEFINE(BUILD_ECORE_EVAS_FB, 1, [Support for Linux FB in Ecore_Evas])
      have_ecore_evas_fb="yes"
    ], [
      dummy=no
    ], [
      #include <Evas.h>
    ]
  )
fi

## SDL
AC_ARG_WITH(sdl-config, [  --with-sdl-config=SDL_CONFIG     use sdl-config specified],
[ SDL_CONFIG=$withval;
  echo "using "$SDL_CONFIG" for sdl-config"; ],
[ if test -z "$SDL_CONFIG"; then
    AC_PATH_PROG(SDL_CONFIG, "sdl-config", "", $PATH)
  fi
])
if test -z "$SDL_CONFIG" ; then SDL_CONFIG="sdl-config"; fi

have_sdl="no"
AC_CHECK_HEADER(SDL/SDL.h,
	[ have_sdl="yes" ],
	[ have_sdl="no" ]
)

ECORE_CHECK_MODULE([SDL], [yes], [$have_sdl],
  [requirements_ecore_evas="$requirements_ecore_evas ecore-sdl"])

want_ecore_evas_sdl="yes";
have_ecore_evas_sdl="no";
sdl_cflags="";
sdl_libs="";

AC_MSG_CHECKING(whether ecore_evas sdl support is to be built)
AC_ARG_ENABLE(ecore-evas-sdl,
  [  --enable-ecore-evas-sdl	   enable sdl in the ecore_evas module],
  [
    if test x"$enableval" = x"yes"; then
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      want_ecore_evas_sdl="no"
    fi
  ], [
    AC_MSG_RESULT(yes)
  ]
)
if test "x$want_ecore_evas_sdl" = "xyes"; then
  sdl_cflags=`$SDL_CONFIG --cflags`
  sdl_libs=`$SDL_CONFIG --libs`

  save_CFLAGS=$CFLAGS
  CFLAGS=$CFLAGS" $sdl_cflags"
  AC_CHECK_HEADER(Evas_Engine_SDL.h,
    [
      AC_DEFINE(BUILD_ECORE_EVAS_SDL, 1, [Support for SDL in Ecore_Evas])
      have_ecore_evas_sdl="yes"
    ], [
      dummy=no
    ], [
      #include <Evas.h>
    ]
  )
  CFLAGS=$save_CFLAGS
fi

if test "x$have_ecore_evas_sdl" = "xyes"; then
  PKG_CHECK_MODULES(SDL, sdl >= 1.3.0,
    [ AC_DEFINE(BUILD_ECORE_EVAS_SDL_130, 1, [Support for SVN SDL]) ],
    [ dummy=no ]);
fi

AC_SUBST(sdl_cflags)
AC_SUBST(sdl_libs)

want_ecore_evas_buffer="yes";
have_ecore_evas_buffer="no";

AC_MSG_CHECKING(whether ecore_evas buffer support is to be built)
AC_ARG_ENABLE(ecore-evas-buffer,
  [  --disable-ecore-evas-buffer   disable buffer in the ecore_evas module],
  [
    if test x"$enableval" = x"yes" ; then
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      want_ecore_evas_buffer="no"
    fi
  ], [
    AC_MSG_RESULT(yes)
  ]
)

if test "x$want_ecore_evas_buffer" = "xyes"; then
  AC_CHECK_HEADER(Evas_Engine_Buffer.h,
    [
      AC_DEFINE(BUILD_ECORE_EVAS_BUFFER, 1, [Support for Buffers in Ecore_Evas])
      have_ecore_evas_buffer="yes"
    ], [
      dummy=no
    ], [
      #include <Evas.h>
    ]
  )
fi

AC_ARG_ENABLE(openssl,
  AC_HELP_STRING(
    [--enable-openssl],
    [enable openssl support @<:@default=auto@:>@]
  ),
  [ use_openssl=$enableval ],
  [ use_openssl=yes ]
)

if test "x$use_openssl" = "xyes"; then
  PKG_CHECK_MODULES(SSL, openssl,
    [
       use_openssl=yes
       AC_DEFINE(USE_OPENSSL, 1, [Use OpenSSL])
       requirements_ecore_con="$requirements_ecore_con openssl"
       # no need to add it to req_ecore_{ipc,dbus}, since they
       # depends on ecore_con anyway.
    ],
    [ use_openssl=no ]
  )
fi

AC_ARG_ENABLE(curl,
  AC_HELP_STRING(
    [--enable-curl],
    [enable curl support @<:@default=auto@:>@]
  ),
  [ use_curl=$enableval ],
  [ use_curl=yes ]
)

if test "x$use_curl" = "xyes"; then
  PKG_CHECK_MODULES(CURL, libcurl,
    [
      AC_DEFINE(HAVE_CURL, 1, [ Downloading with CURL ])
      requirements_ecore_file="$requirements_ecore_file libcurl"
      requirements_ecore_con="$requirements_ecore_con libcurl"
    ], [
      use_curl=no
    ]
  )
fi

want_abstract_sockets="yes"
AC_ARG_ENABLE(abstract-sockets,
  AC_HELP_STRING(
    [--disable-abstract-sockets],
    [disable abstract sockets. [[default=enabled]]]
    ),
  [ want_abstract_sockets=$enableval ],
  [ want_abstract_sockets="yes"]
)
if test "x$want_abstract_sockets" = "xyes"; then
  AC_DEFINE(HAVE_ABSTRACT_SOCKETS, 1, [Have abstract sockets namespace])
fi

ECORE_CHECK_MODULE([Con], [yes])

ECORE_CHECK_MODULE([Ipc], [yes], [$have_ecore_con])

ECORE_CHECK_MODULE([DBus], [yes])

PKG_CHECK_MODULES(EET, [eet >= 0.9.10],
  [ have_eet="yes" ],
  [ have_eet="no" ]
)

ecore_config_deps="no"
if test "x$have_eet" = "xyes" -a "x$have_ecore_ipc" = "xyes" ; then
  ecore_config_deps="yes"
fi
ECORE_CHECK_MODULE([Config], [yes], [$ecore_config_deps],
  [requirements_ecore_config="$requirements_ecore_config ecore-ipc eet"])

ECORE_CHECK_MODULE([File], [yes])

use_fam="no"
use_inotify="yes"
use_poll="yes"
use_curl="yes"

if test "x$have_ecore_file" = "xyes"; then
  dnl We need to check if the right inotify version is accessible
  AC_MSG_CHECKING(whether inotify is to be used for filemonitoring)
  AC_ARG_ENABLE(inotify,
    [  --disable-inotify             disable inotify in the ecore_file module],
    [
      if test "$enableval" = "yes"; then
        AC_MSG_RESULT(yes)
      else
        AC_MSG_RESULT(no)
        use_inotify="no"
      fi
    ], [
      AC_MSG_RESULT(yes)
    ]
  )

  dnl It's hard to find a good test on how to check the correct
  dnl inotify version. They changed the headers a lot.
  dnl in kernel 2.6.13 __NR_inotify_init was added to the defined syscalls
  dnl in asm/unistd.h and IN_MOVE_SELF was added to linux/inotify.h
  dnl so with this check you need a very new kernel and kernel-headers!
  if test "x$use_inotify" = "xyes"; then
    AC_CHECK_LIB(c, inotify_init, [
        AC_DEFINE(HAVE_INOTIFY, 1, [ File monitoring with Inotify ])
        AC_DEFINE(HAVE_SYS_INOTIFY, 1, [ File monitoring with Inotify - sys/inotify.h ])
      ],
      [
        AC_TRY_COMPILE(
          [
            #include <asm/unistd.h>
            #include <linux/inotify.h>
          ],
          [ int a = __NR_inotify_init; int b = IN_MOVE_SELF; ],
          [
            AC_DEFINE(HAVE_INOTIFY, 1, [ File monitoring with Inotify ])
          ], [
            use_inotify="no"
          ]
	)
      ]
    )
  fi

  #AC_MSG_CHECKING(whether FAM is to be used for filemonitoring)
  #AC_ARG_ENABLE(fam,
  #  [  --enable-fam              enable fam in the ecore_file module],
  #  [
  #    if test "$enableval" = "yes"; then
  #      AC_MSG_RESULT(yes)
  #      use_fam="yes"
  #    else
  #      AC_MSG_RESULT(no)
  #    fi
  #  ], [
  #    AC_MSG_RESULT(no)
  #  ]
  #)

  fam_libs=""
  #if test "x$use_fam" = "xyes"; then
  #  AC_CHECK_LIB(fam, FAMOpen,
  #    [
  #      AC_DEFINE(HAVE_FAM, 1, [ File monitoring with FAM ])
  #      fam_libs="-lfam"
  #      ecore_file_libs="$ecore_file_libs $fam_libs"
  #    ], [
  #      use_fam="no"
  #    ]
  #  )
  #fi

  AC_MSG_CHECKING(whether polling is to be used for filemonitoring)
  AC_ARG_ENABLE(poll,
    [  --disable-poll                disable poll in the ecore_file module],
    [
      if test "$enableval" = "yes"; then
        AC_MSG_RESULT(yes)
      else
        AC_MSG_RESULT(no)
        use_poll="no"
      fi
    ], [
      AC_MSG_RESULT(yes)
    ]
  )

  if test "x$use_poll" = "xyes"; then
    AC_DEFINE(HAVE_POLL, 1, [ File monitoring with polling ])
  fi
fi

AC_SUBST(fam_libs)

ECORE_CHECK_MODULE([Desktop], [no], [$have_ecore_file],
  [requirements_ecore_desktop="ecore-file"])

AC_CHECK_LIB(dl, dlopen, dlopen_libs=-ldl)
AC_SUBST(dlopen_libs)

dnl Checking for Perl:
AC_PATH_PROG(PERL,perl,0)
AC_SUBST(PERL)

AC_SUBST(requirements_ecore_con)
AC_SUBST(requirements_ecore_config)
AC_SUBST(requirements_ecore_desktop)
AC_SUBST(requirements_ecore_directfb)
AC_SUBST(requirements_ecore_evas)
AC_SUBST(requirements_ecore_fb)
AC_SUBST(requirements_ecore_file)
AC_SUBST(requirements_ecore_ipc)
AC_SUBST(requirements_ecore_job)
AC_SUBST(requirements_ecore_txt)
AC_SUBST(requirements_ecore_x)
AC_SUBST(requirements_ecore_sdl)

# set up conditionals
AM_CONDITIONAL(BUILD_ECORE_X, test $have_ecore_x = yes -a $have_ecore_x_xcb = no)
AM_CONDITIONAL(BUILD_ECORE_X_XCB, test $have_ecore_x_xcb = yes)
AM_CONDITIONAL(BUILD_ECORE_EVAS_GL, test $have_ecore_evas_gl = yes)
AM_CONDITIONAL(BUILD_ECORE_EVAS_XRENDER, test $have_ecore_evas_xrender = yes)
AM_CONDITIONAL(BUILD_ECORE_EVAS_X11_16, test $have_ecore_evas_x11_16 = yes)
AM_CONDITIONAL(BUILD_ECORE_EVAS_DIRECTFB, test $have_ecore_evas_dfb = yes)
AM_CONDITIONAL(BUILD_ECORE_EVAS_FB, test $have_ecore_evas_fb = yes)
AM_CONDITIONAL(BUILD_ECORE_EVAS_BUFFER, test $have_ecore_evas_buffer = yes)

AC_OUTPUT([
Makefile
ecore-con.pc
ecore-config.pc
ecore-desktop.pc
ecore-directfb.pc
ecore-evas.pc
ecore-fb.pc
ecore-file.pc
ecore-ipc.pc
ecore-job.pc
ecore-txt.pc
ecore-x.pc
ecore-win32.pc
ecore-sdl.pc
ecore.pc
src/Makefile
src/bin/Makefile
src/lib/Makefile
src/lib/ecore/Makefile
src/lib/ecore_job/Makefile
src/lib/ecore_x/Makefile
src/lib/ecore_fb/Makefile
src/lib/ecore_sdl/Makefile
src/lib/ecore_evas/Makefile
src/lib/ecore_con/Makefile
src/lib/ecore_ipc/Makefile
src/lib/ecore_txt/Makefile
src/lib/ecore_config/Makefile
src/lib/ecore_file/Makefile
src/lib/ecore_desktop/Makefile
src/lib/ecore_directfb/Makefile
src/lib/ecore_win32/Makefile
README
ecore.spec
debian/changelog
])

echo
echo "$PACKAGE $VERSION"
echo
echo "Optional Modules:"
echo
echo "  Ecore_Job....................: $have_ecore_job"
echo "  Ecore_Con....................: $have_ecore_con (OpenSSL: $use_openssl) (CURL: $use_curl)"
echo "  Ecore_Txt....................: $have_ecore_txt"
if test "x$have_ecore_x_xcb" = "xyes" ; then
echo "  Ecore_X (XCB backend)........: $have_ecore_x_xcb (Xprint: $have_ecore_x_xcb_xprint) (Xinerama: $have_ecore_x_xcb_xinerama) (Xrandr: $have_ecore_x_xcb_randr) (Xscreensaver: $have_ecore_x_xcb_screensaver) (Xshape: $have_ecore_x_xcb_shape) (Xsync: $have_ecore_x_xcb_sync) (Xrender: $have_ecore_x_xcb_render) (Xfixes: $have_ecore_x_xcb_xfixes) (Xdamage: $have_ecore_x_xcb_damage) (Xdpms: $have_ecore_x_xcb_dpms)"
else
  echo "  Ecore_X (Xlib backend).......: $have_ecore_x (Xcursor: $use_Xcursor) (Xprint: $use_xprint) (Xinerama: $use_xinerama) (Xrandr: $use_xrandr) (Xscreensaver: $use_xss) (Xrender: $use_xrender) (Xfixes: $use_xfixes) (Xdamage: $use_xdamage) (Xdpms: $use_xdpms)"
fi
echo "  Ecore_Win32..................: $have_ecore_win32 (DirectDraw: ${have_ddraw}) (Direct3D: ${have_direct3d})"

echo "  Ecore_FB.....................: $have_ecore_fb"
echo "  Ecore_DFB....................: $have_ecore_directfb"
echo "  Ecore_SDL....................: $have_ecore_sdl"
echo "  Ecore_Evas...................: $have_ecore_evas"
echo "  Ecore_Evas GL Support........: $have_ecore_evas_gl"
echo "  Ecore_Evas XRender Support...: $have_ecore_evas_xrender"
echo "  Ecore_Evas X11 16bpp Support.: $have_ecore_evas_x11_16"
echo "  Ecore_Evas FB Support........: $have_ecore_evas_fb"
echo "  Ecore_Evas SDL Support.......: $have_ecore_evas_sdl"
echo "  Ecore_Evas DFB Support.......: $have_ecore_evas_dfb"
echo "  Ecore_Evas Buffer Support....: $have_ecore_evas_buffer"
echo "  Ecore_Ipc....................: $have_ecore_ipc (OpenSSL: $use_openssl)"
echo "  Ecore_Config.................: $have_ecore_config"
echo "  Ecore_Desktop................: $have_ecore_desktop"
#echo "  Ecore_File...................: $have_ecore_file (Inotify: $use_inotify) (FAM: $use_fam) (Poll: $use_poll)"
echo "  Ecore_File...................: $have_ecore_file (Inotify: $use_inotify) (Poll: $use_poll) (CURL: $use_curl)"
echo
echo "Now type 'make' ('gmake' on some systems) to compile $PACKAGE."
echo
