dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AC_ISC_POSIX
AM_INIT_AUTOMAKE(ecore, 1.0.0_pre4)
AM_CONFIG_HEADER(config.h)

AC_C_BIGENDIAN
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST
AM_ENABLE_SHARED
AM_PROG_LIBTOOL

if test "x${exec_prefix}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    bindir="${ac_default_prefix}/bin";
  else
    bindir="${prefix}/bin";
  fi
else
  if test "x${prefix}" = "xNONE"; then
    bindir="${ac_default_prefix}/bin";
  else
    bindir="${prefix}/bin";
  fi
fi

if test "x${exec_prefix}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    libdir="${ac_default_prefix}/lib";
  else
    libdir="${prefix}/lib";
  fi
else
  if test "x${prefix}" = "xNONE"; then
    libdir="${ac_default_prefix}/lib";
  else
    libdir="${prefix}/lib";
  fi
fi

							
dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}")
fi

dnl Set PACKAGE_BIN_DIR in config.h.
if test "x${bindir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${ac_default_prefix}/bin")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${prefix}/bin")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${bindir}")
fi
		
dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}")
fi

dnl Set PACKAGE_LIB_DIR in config.h.
if test "x${libdir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${ac_default_prefix}/lib")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${prefix}/lib")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${libdir}")
fi
                
dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}")

dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

AC_MSG_CHECKING(whether ecore_txt module is to be built)

iconv_cflags=""
iconv_libs=""

have_ecore_txt="";
ecore_txt_cflags="";
ecore_txt_libs="";

AC_ARG_ENABLE(ecore-txt, 
[  --disable-ecore-txt              disable the ecore_txt module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_txt="yes"
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_txt="yes"
]
)

if test "x$have_ecore_txt" = "xyes"; then
  AC_DEFINE(BUILD_ECORE_TXT)
  AC_CHECK_LIB(c, iconv,
    [
      AM_CONDITIONAL(BUILD_ECORE_TXT, true)
      ecore_txt_libs="-lecore_txt"
    ], AC_CHECK_LIB(iconv, iconv,
         [
           AM_CONDITIONAL(BUILD_ECORE_TXT, true)
           iconv_libs="-liconv"
           ecore_txt_libs="-lecore_txt -liconv"
         ], [
	   AC_CHECK_LIB(c, libiconv,
	     [
	       AM_CONDITIONAL(BUILD_ECORE_TXT, true)
	       ecore_txt_libs="-lecore_txt"
             ], AC_CHECK_LIB(iconv, libiconv,
                  [
                    AM_CONDITIONAL(BUILD_ECORE_TXT, true)
                    iconv_libs="-liconv"
                    ecore_txt_libs="-lecore_txt -liconv"
                  ], [
                    AC_MSG_RESULT("no - disabling ecore_txt")
                    AM_CONDITIONAL(BUILD_ECORE_TXT, false)
                    have_ecore_txt=""
                  ]
                ),
           )
         ]
       ),
  )
else
  AM_CONDITIONAL(BUILD_ECORE_TXT, false)
fi

AC_SUBST(iconv_cflags)
AC_SUBST(iconv_libs)

AC_SUBST(ecore_txt_cflags)
AC_SUBST(ecore_txt_libs)

have_ecore_x="";
ecore_x_cflags="";
ecore_x_libs="";

x_dir="";
x_includes="";
x_cflags="";
x_libs="";
x_ldflags="";

if test "x$have_ecore_txt" = "xyes"; then
  AC_MSG_CHECKING(whether ecore_x module is to be built)
  AC_ARG_ENABLE(ecore-x, 
  [  --disable-ecore-x                disable the ecore_x module], [
    if [ test "$enableval" = "yes" ]; then  
      AC_MSG_RESULT(yes)
      have_ecore_x="yes"
    else
      AC_MSG_RESULT(no)
    fi
  ], [
    AC_MSG_RESULT(yes)
    have_ecore_x="yes"
  ]
  )
else
  AC_MSG_RESULT(ecore_txt not enabled, so ecore_x will not be enabled)
fi

if test "x$have_ecore_x" = "xyes"; then
  AM_CONDITIONAL(BUILD_ECORE_X, true)
  AC_DEFINE(BUILD_ECORE_X)
  x_dir="/usr/X11R6";
  x_includes="";
  x_cflags="-I"$x_dir"/include"
  x_libs="-L"$x_dir"/lib -lX11 -lXext"
  x_ldflags="";
  ecore_x_libs="-lecore_x";
else
  AM_CONDITIONAL(BUILD_ECORE_X, false)
fi

AC_SUBST(x_cflags)
AC_SUBST(x_includes)
AC_SUBST(x_ldflags)
AC_SUBST(x_libs)

AC_SUBST(ecore_x_cflags)
AC_SUBST(ecore_x_libs)

AC_MSG_CHECKING(whether ecore_job module is to be built)

have_ecore_job="";
ecore_job_cflags="";
ecore_job_libs="";

AC_ARG_ENABLE(ecore-job, 
[  --disable-ecore-job              disable the ecore_job module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_job="yes"
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_job="yes"
]
)

if test "x$have_ecore_job" = "xyes"; then
    AM_CONDITIONAL(BUILD_ECORE_JOB, true)
    AC_DEFINE(BUILD_ECORE_JOB)
    ecore_job_libs="-lecore_job";
else
  AM_CONDITIONAL(BUILD_ECORE_JOB, false)
fi

AC_SUBST(ecore_job_cflags)
AC_SUBST(ecore_job_libs)

have_ecore_fb="";
ecore_fb_cflags="";
ecore_fb_libs="";

AC_MSG_CHECKING(whether ecore_fb module is to be built)

AC_ARG_ENABLE(ecore-fb, 
[  --disable-ecore-fb               disable the ecore_fb module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_fb="yes"
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_fb="yes"
]
)

if test "x$have_ecore_fb" = "xyes"; then
  AC_CHECK_HEADER(linux/fb.h,
    [
      AM_CONDITIONAL(BUILD_ECORE_FB, true)
      AC_DEFINE(BUILD_ECORE_FB)
      ecore_fb_libs="-lecore_fb";
    ], [
      AM_CONDITIONAL(BUILD_ECORE_FB, false)
    ]
  )
else
  AM_CONDITIONAL(BUILD_ECORE_FB, false)
fi

AC_SUBST(ecore_fb_cflags)
AC_SUBST(ecore_fb_libs)

ecore_evas_cflags="";
ecore_evas_libs="";

evas_cflags="";
evas_libs="";


AC_ARG_WITH(evas-config,
[  --with-evas-config=EVAS_CONFIG    use evas-config specified ],
[
  PROG_CONFIG=$withval;
  echo "using "$PROG_CONFIG" for evas-config";
],[
  PROG="evas-config";
  AC_PATH_PROG(PROG_CONFIG, $PROG, "", $PATH)
])
EVAS_CONFIG=$PROG_CONFIG

AC_MSG_CHECKING(whether ecore_evas module is to be built)
AC_ARG_ENABLE(ecore-evas, 
[  --disable-ecore-evas             disable the ecore_evas module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_evas="yes";
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_evas="yes";
]
)

if test "x$have_ecore_evas" = "xyes"; then
  AM_CONDITIONAL(BUILD_ECORE_EVAS, true)
  AC_DEFINE(BUILD_ECORE_EVAS)
  if [ test -z $EVAS_CONFIG ]; then
    echo $PROG " is not in your \$PATH. Please ensure it is.";
    echo "Read the manual page for you shell as to how to extend your path.";
    echo "FATAL ERROR. ABORT.";
    exit -1;
  fi
  evas_cflags=`$EVAS_CONFIG --cflags`
  evas_libs=`$EVAS_CONFIG --libs`
  ecore_evas_libs="-lecore_evas";
else
  AM_CONDITIONAL(BUILD_ECORE_EVAS, false)
fi

AC_SUBST(evas_cflags)
AC_SUBST(evas_libs)

AC_SUBST(ecore_evas_cflags)
AC_SUBST(ecore_evas_libs)

have_ecore_evas_gl="";

AC_MSG_CHECKING(whether ecore_evas gl support is to be built)

AC_ARG_ENABLE(ecore-evas-gl, 
[  --disable-ecore-evas-gl          disable gl in the ecore_evas module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_evas_gl="yes"
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_evas_gl="yes"
]
)

if test "x$have_ecore_evas_gl" = "xyes"; then
  AC_CHECK_HEADERS(Evas_Engine_GL_X11.h,
    [
      AM_CONDITIONAL(BUILD_ECORE_EVAS_GL, true)
      AC_DEFINE(BUILD_ECORE_EVAS_GL)
    ], AM_CONDITIONAL(BUILD_ECORE_EVAS_GL, false),
    [
      #include <Evas.h>
    ])
else
  AM_CONDITIONAL(BUILD_ECORE_EVAS_GL, false)
fi

have_ecore_evas_fb="";

AC_MSG_CHECKING(whether ecore_evas fb support is to be built)

AC_ARG_ENABLE(ecore-evas-fb, 
[  --disable-ecore-evas-fb          disable fb in the ecore_evas module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_evas_fb="yes"
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_evas_fb="yes"
]
)

if test "x$have_ecore_evas_fb" = "xyes"; then
  AC_CHECK_HEADERS(Evas_Engine_FB.h,
    [
      AM_CONDITIONAL(BUILD_ECORE_EVAS_FB, true)
      AC_DEFINE(BUILD_ECORE_EVAS_FB)
    ], AM_CONDITIONAL(BUILD_ECORE_EVAS_FB, false),
    [
      #include <Evas.h>
    ])
else
  AM_CONDITIONAL(BUILD_ECORE_EVAS_FB, false)
fi

AC_MSG_CHECKING(whether ecore_con module is to be built)

have_ecore_con="";
ecore_con_cflags="";
ecore_con_libs="";

AC_ARG_ENABLE(ecore-con, 
[  --disable-ecore-con              disable the ecore_con module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_con="yes"
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_con="yes"
]
)

if test "x$have_ecore_con" = "xyes"; then
  AM_CONDITIONAL(BUILD_ECORE_CON, true)
  AC_DEFINE(BUILD_ECORE_CON)
  ecore_con_libs="-lecore_con"
else
  AM_CONDITIONAL(BUILD_ECORE_CON, false)
fi

AC_SUBST(ecore_con_cflags)
AC_SUBST(ecore_con_libs)

have_ecore_ipc="";
ecore_ipc_cflags="";
ecore_ipc_libs="";

if test "x$have_ecore_con" = "xyes"; then
AC_MSG_CHECKING(whether ecore_ipc module is to be built)
  AC_ARG_ENABLE(ecore-ipc, 
  [  --disable-ecore-ipc              disable the ecore_ipc module], [
    if [ test "$enableval" = "yes" ]; then  
      AC_MSG_RESULT(yes)
      have_ecore_ipc="yes"
    else
      AC_MSG_RESULT(no)
    fi
  ], [
    AC_MSG_RESULT(yes)
    have_ecore_ipc="yes"
  ]
  )
else
  AC_MSG_RESULT(ecore_con not enabled, so ecore_ipc will not be enabled)
fi

if test "x$have_ecore_ipc" = "xyes"; then
  AM_CONDITIONAL(BUILD_ECORE_IPC, true)
  AC_DEFINE(BUILD_ECORE_IPC)
  ecore_ipc_libs="-lecore_ipc"
else
  AM_CONDITIONAL(BUILD_ECORE_IPC, false)
fi

AC_SUBST(ecore_ipc_cflags)
AC_SUBST(ecore_ipc_libs)


AC_MSG_CHECKING(whether ecore_config module is to be built)

have_ecore_config="";
ecore_config_cflags="";
ecore_config_libs="";

ewl_cflags=`ewl-config --cflags`
ewl_libs=`ewl-config --libs`
AC_SUBST(ewl_cflags)
AC_SUBST(ewl_libs)

AC_ARG_ENABLE(ecore-config, 
[  --disable-ecore-config              disable the ecore_config module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_config="yes";
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_config="yes";
]
)

if test "x$have_ecore_config" = "xyes"; then
  AC_ARG_WITH(edb-config,
   [   --with-edb-config=EDB_CONFIG      use edb-config specified ],
   [
     PROG_CONFIG=$withval;
     echo "using "$PROG_CONFIG" for edb-config";
   ],[
     PROG="edb-config";
     AC_PATH_PROG(PROG_CONFIG, $PROG, "", $PATH)
   ])
   EDB_CONFIG=$PROG_CONFIG

   AC_CHECK_LIB(edb, e_db_open,
     [
       edb_cflags=`edb-config --cflags`
       edb_libs=`edb-config --libs`
       AM_CONDITIONAL(BUILD_ECORE_CONFIG, true)
       ecore_config_libs="-lecore_config";
       AC_DEFINE(BUILD_ECORE_CONFIG)
       AC_SUBST(edb_libs)
       AC_SUBST(edb_cflags)
     ],
     [echo "I can't find Edb, so I won't build ecore_config."
      AM_CONDITIONAL(BUILD_ECORE_CONFIG, false)
     ]
   )
else
  AM_CONDITIONAL(BUILD_ECORE_CONFIG, false)
fi

AC_SUBST(ecore_config_cflags)
AC_SUBST(ecore_config_libs)

AC_OUTPUT([
Makefile
ecore-config
src/Makefile
src/bin/Makefile
src/lib/Makefile
src/lib/ecore/Makefile
src/lib/ecore_job/Makefile
src/lib/ecore_x/Makefile
src/lib/ecore_fb/Makefile
src/lib/ecore_evas/Makefile
src/lib/ecore_con/Makefile
src/lib/ecore_ipc/Makefile
src/lib/ecore_txt/Makefile
src/lib/ecore_config/Makefile
debian/Makefile
], [
chmod +x ecore-config
]
)
