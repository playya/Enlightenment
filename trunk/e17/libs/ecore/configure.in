dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AC_ISC_POSIX
AM_INIT_AUTOMAKE(ecore, 1.0.0_pre7)
AM_CONFIG_HEADER(config.h)

AC_C_BIGENDIAN
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST
AM_ENABLE_SHARED
AM_PROG_LIBTOOL

if test "x${exec_prefix}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    bindir="${ac_default_prefix}/bin";
  else
    bindir="${prefix}/bin";
  fi
else
  if test "x${prefix}" = "xNONE"; then
    bindir="${ac_default_prefix}/bin";
  else
    bindir="${prefix}/bin";
  fi
fi

if test "x${exec_prefix}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    libdir="${ac_default_prefix}/lib";
  else
    libdir="${prefix}/lib";
  fi
else
  if test "x${prefix}" = "xNONE"; then
    libdir="${ac_default_prefix}/lib";
  else
    libdir="${prefix}/lib";
  fi
fi

							
dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", [Shared Data Directory])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", [Shared Data Directory])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}", [Shared Data Directory])
fi

dnl Set PACKAGE_BIN_DIR in config.h.
if test "x${bindir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${ac_default_prefix}/bin", [Installation Directory for User Executables])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${prefix}/bin", [Installation Directory for User Executables])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${bindir}", [Installation Directory for User Executables])
fi
		
dnl Set PACKAGE_LIB_DIR in config.h.
if test "x${libdir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${ac_default_prefix}/lib", [Installation Directory for Libraries])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${prefix}/lib", [Installation Directory for Libraries])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${libdir}", [Installation Directory for Libraries])
fi
                
dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}", [Source Code Directory])

dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

AC_CHECK_FUNCS(gettimeofday)

AC_CHECK_HEADERS(netinet/in.h)

case "$host_os" in
	mingw|mingw32)
		winsock_libs="-lwsock32"
		;;
esac

AC_SUBST(winsock_libs)

AC_MSG_CHECKING(whether ecore_txt module is to be built)

iconv_cflags=""
iconv_libs=""

have_ecore_txt="no";
ecore_txt_cflags="";
ecore_txt_libs="";

AC_ARG_ENABLE(ecore-txt, 
[  --disable-ecore-txt              disable the ecore_txt module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_txt="yes"
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_txt="yes"
]
)

AC_ARG_WITH(iconv-link,
[  --with-iconv-link=ICONV_LINK     explicitly specify an iconv link option],
[
  v=$withval;
  iconv_libs=$v;
  echo "  Ecore iconv link flags explicitly set to: "$iconv_libs;
])

if test "x$have_ecore_txt" = "xyes"; then
  if test -z "$iconv_libs"; then 
    AC_CHECK_LIB(iconv, libiconv,
      [
        AC_DEFINE(BUILD_ECORE_TXT, 1, [Build Ecore_Txt Module])
        AM_CONDITIONAL(BUILD_ECORE_TXT, true)
        iconv_libs="-liconv"
        ecore_txt_libs="-lecore_txt "$iconv_libs
        have_ecore_txt="yes"
      ], [
        have_ecore_txt="no"
      ]
    )
  
    if test "x$have_ecore_txt" != "xyes"; then
      AC_CHECK_LIB(iconv, iconv,
        [
          AC_DEFINE(BUILD_ECORE_TXT, 1, [Build Ecore_Txt Module])
          AM_CONDITIONAL(BUILD_ECORE_TXT, true)
          iconv_libs="-liconv"
          ecore_txt_libs="-lecore_txt "$iconv_libs
          have_ecore_txt="yes"
        ], [
          have_ecore_txt="no"
        ]
      )
    fi

    if test "x$have_ecore_txt" != "xyes"; then
      AC_CHECK_LIB(c, libiconv,
        [
          AC_DEFINE(BUILD_ECORE_TXT, 1, [Build Ecore_Txt Module])
          AM_CONDITIONAL(BUILD_ECORE_TXT, true)
          ecore_txt_libs="-lecore_txt "$iconv_libs
          have_ecore_txt="yes"
         ], [
          have_ecore_txt="no"
        ]
      )
    fi

    if test "x$have_ecore_txt" != "xyes"; then
      AC_CHECK_LIB(c, iconv,
        [
          AC_DEFINE(BUILD_ECORE_TXT, 1, [Build Ecore_Txt Module])
          AM_CONDITIONAL(BUILD_ECORE_TXT, true)
          ecore_txt_libs="-lecore_txt "$iconv_libs
          have_ecore_txt="yes"
        ], [
          AC_MSG_RESULT("no - disabling ecore_txt")
          AM_CONDITIONAL(BUILD_ECORE_TXT, false)
          have_ecore_txt="no"
        ]
      )
    fi
  else
    AC_DEFINE(BUILD_ECORE_TXT, 1, [Build Ecore_Txt Module])
    AM_CONDITIONAL(BUILD_ECORE_TXT, true)
    ecore_txt_libs="-lecore_txt "$iconv_libs
    have_ecore_txt="yes"
  fi
else
  AM_CONDITIONAL(BUILD_ECORE_TXT, false)
fi

AC_SUBST(iconv_cflags)
AC_SUBST(iconv_libs)

AC_SUBST(ecore_txt_cflags)
AC_SUBST(ecore_txt_libs)

have_ecore_x="no";
ecore_x_cflags="";
ecore_x_libs="";

x_dir="";
x_includes="";
x_cflags="";
x_libs="";
x_ldflags="";

if test "x$have_ecore_txt" = "xyes"; then
  AC_MSG_CHECKING(whether ecore_x module is to be built)
  AC_ARG_ENABLE(ecore-x, 
  [  --disable-ecore-x                disable the ecore_x module], [
    if [ test "$enableval" = "yes" ]; then  
      AC_MSG_RESULT(yes)
      have_ecore_x="yes"
    else
      AC_MSG_RESULT(no)
    fi
  ], [
    AC_MSG_RESULT(yes)
    have_ecore_x="yes"
  ]
  )
else
  AC_MSG_RESULT(ecore_txt not enabled, so ecore_x will not be enabled)
fi

if test "x$have_ecore_x" = "xyes"; then
  AM_CONDITIONAL(BUILD_ECORE_X, true)
  AC_DEFINE(BUILD_ECORE_X, 1, [Build Ecore_X Module])
  BUILD_ECORE_X=1
  x_dir="/usr/X11R6";
  x_includes="";
  x_cflags="-I"$x_dir"/include"
  x_libs="-L"$x_dir"/lib -lX11 -lXext"
  x_ldflags="";
  ecore_x_libs="-lecore_x";
else
  AM_CONDITIONAL(BUILD_ECORE_X, false)
  BUILD_ECORE_X=0
fi

AC_SUBST(BUILD_ECORE_X)

AC_SUBST(x_cflags)
AC_SUBST(x_includes)
AC_SUBST(x_ldflags)
AC_SUBST(x_libs)

AC_SUBST(ecore_x_cflags)
AC_SUBST(ecore_x_libs)

AC_MSG_CHECKING(whether ecore_job module is to be built)

have_ecore_job="no";
ecore_job_cflags="";
ecore_job_libs="";

AC_ARG_ENABLE(ecore-job, 
[  --disable-ecore-job              disable the ecore_job module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_job="yes"
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_job="yes"
]
)

if test "x$have_ecore_job" = "xyes"; then
    AM_CONDITIONAL(BUILD_ECORE_JOB, true)
    AC_DEFINE(BUILD_ECORE_JOB, 1, [Build Ecore_Job Module])
    ecore_job_libs="-lecore_job";
else
  AM_CONDITIONAL(BUILD_ECORE_JOB, false)
fi

AC_SUBST(ecore_job_cflags)
AC_SUBST(ecore_job_libs)

have_ecore_fb="no";
ecore_fb_cflags="";
ecore_fb_libs="";

AC_MSG_CHECKING(whether ecore_fb module is to be built)

AC_ARG_ENABLE(ecore-fb, 
[  --disable-ecore-fb               disable the ecore_fb module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_fb="yes"
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_fb="yes"
]
)

if test "x$have_ecore_fb" = "xyes"; then
  AC_CHECK_HEADER(linux/fb.h,
    [
      AM_CONDITIONAL(BUILD_ECORE_FB, true)
      AC_DEFINE(BUILD_ECORE_FB, 1, [Build Ecore_FB Module])
      ecore_fb_libs="-lecore_fb";
    ], [
      AM_CONDITIONAL(BUILD_ECORE_FB, false)
      have_ecore_fb="no"
    ]
  )
else
  AM_CONDITIONAL(BUILD_ECORE_FB, false)
fi

AC_SUBST(ecore_fb_cflags)
AC_SUBST(ecore_fb_libs)

ecore_evas_cflags="";
ecore_evas_libs="";

evas_cflags="";
evas_libs="";


AC_ARG_WITH(evas-config,
[  --with-evas-config=EVAS_CONFIG    use evas-config specified ],
[
  PROG_CONFIG=$withval;
  echo "using "$PROG_CONFIG" for evas-config";
],[
  PROG="evas-config";
  AC_PATH_PROG(PROG_CONFIG, $PROG, "", $PATH)
])
if [ test -z "$EVAS_CONFIG" ]; then EVAS_CONFIG=$PROG_CONFIG; fi

have_ecore_evas="no"

AC_MSG_CHECKING(whether ecore_evas module is to be built)
AC_ARG_ENABLE(ecore-evas, 
[  --disable-ecore-evas             disable the ecore_evas module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_evas="yes";
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_evas="yes";
]
)

if test "x$have_ecore_evas" = "xyes"; then
  AM_CONDITIONAL(BUILD_ECORE_EVAS, true)
  AC_DEFINE(BUILD_ECORE_EVAS, 1, [Build Ecore_Evas Module])
  if [ test -z $EVAS_CONFIG ]; then
    echo $PROG " is not in your \$PATH. Please ensure it is.";
    echo "Read the manual page for you shell as to how to extend your path.";
    echo "FATAL ERROR. ABORT.";
    exit -1;
  fi
  evas_cflags=`$EVAS_CONFIG --cflags`
  evas_libs=`$EVAS_CONFIG --libs`
  ecore_evas_libs="-lecore_evas";
else
  AM_CONDITIONAL(BUILD_ECORE_EVAS, false)
fi

AC_SUBST(evas_cflags)
AC_SUBST(evas_libs)

AC_SUBST(ecore_evas_cflags)
AC_SUBST(ecore_evas_libs)

have_ecore_evas_gl="no";

AC_MSG_CHECKING(whether ecore_evas gl support is to be built)

AC_ARG_ENABLE(ecore-evas-gl, 
[  --disable-ecore-evas-gl          disable gl in the ecore_evas module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_evas_gl="yes"
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_evas_gl="yes"
]
)

if test "x$have_ecore_evas_gl" = "xyes"; then
  AC_CHECK_HEADER(Evas_Engine_GL_X11.h,
    [
      AM_CONDITIONAL(BUILD_ECORE_EVAS_GL, true)
      AC_DEFINE(BUILD_ECORE_EVAS_GL, 1, [Support for GL Engine in Ecore_Evas])
    ], [
      AM_CONDITIONAL(BUILD_ECORE_EVAS_GL, false)
      have_ecore_evas_gl="no"
    ], [
      #include <Evas.h>
    ]
  )
else
  AM_CONDITIONAL(BUILD_ECORE_EVAS_GL, false)
fi

if test "x$have_ecore_evas_gl" = "xyes"; then
	BUILD_ECORE_EVAS_GL=1
else
	BUILD_ECORE_EVAS_GL=0
fi

AC_SUBST(BUILD_ECORE_EVAS_GL)

have_ecore_evas_fb="no";

AC_MSG_CHECKING(whether ecore_evas fb support is to be built)

AC_ARG_ENABLE(ecore-evas-fb, 
[  --disable-ecore-evas-fb          disable fb in the ecore_evas module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_evas_fb="yes"
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_evas_fb="yes"
]
)

if test "x$have_ecore_evas_fb" = "xyes"; then
  AC_CHECK_HEADER(Evas_Engine_FB.h,
    [
      AM_CONDITIONAL(BUILD_ECORE_EVAS_FB, true)
      AC_DEFINE(BUILD_ECORE_EVAS_FB, 1, [Support for Linux FB in Ecore_Evas])
    ], [
      AM_CONDITIONAL(BUILD_ECORE_EVAS_FB, false)
      have_ecore_evas_fb="no"
    ], [
      #include <Evas.h>
    ]
  )
else
  AM_CONDITIONAL(BUILD_ECORE_EVAS_FB, false)
fi

if test "x$have_ecore_evas_fb" = "xyes"; then
	BUILD_ECORE_EVAS_FB=1
else
	BUILD_ECORE_EVAS_FB=0
fi

AC_SUBST(BUILD_ECORE_EVAS_FB)

AC_MSG_CHECKING(whether ecore_con module is to be built)

have_ecore_con="no";
ecore_con_cflags="";
ecore_con_libs="";

AC_ARG_ENABLE(ecore-con, 
[  --disable-ecore-con              disable the ecore_con module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_con="yes"
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_con="yes"
]
)

if test "x$have_ecore_con" = "xyes"; then
  AM_CONDITIONAL(BUILD_ECORE_CON, true)
  AC_DEFINE(BUILD_ECORE_CON, 1, [Build Ecore_Con Module])
  ecore_con_libs="-lecore_con"
else
  AM_CONDITIONAL(BUILD_ECORE_CON, false)
fi

AC_SUBST(ecore_con_cflags)
AC_SUBST(ecore_con_libs)

AC_ARG_ENABLE(openssl,
  [  --enable-openssl        enable openssl support (default: autodetect)],
  [use_openssl=$enableval], use_openssl=yes)

if test "x$use_openssl" = "xyes"; then
  PKG_CHECK_MODULES(SSL, openssl, use_openssl=yes, use_openssl=no)
fi

if test "x$use_openssl" = "xyes"; then
  USE_OPENSSL=1
else
  USE_OPENSSL=0
fi

AC_SUBST(USE_OPENSSL)
AC_DEFINE_UNQUOTED(USE_OPENSSL, $USE_OPENSSL, [Use OpenSSL])

have_ecore_ipc="no";
ecore_ipc_cflags="";
ecore_ipc_libs="";

if test "x$have_ecore_con" = "xyes"; then
AC_MSG_CHECKING(whether ecore_ipc module is to be built)
  AC_ARG_ENABLE(ecore-ipc, 
  [  --disable-ecore-ipc              disable the ecore_ipc module], [
    if [ test "$enableval" = "yes" ]; then  
      AC_MSG_RESULT(yes)
      have_ecore_ipc="yes"
    else
      AC_MSG_RESULT(no)
    fi
  ], [
    AC_MSG_RESULT(yes)
    have_ecore_ipc="yes"
  ]
  )
else
  AC_MSG_RESULT(ecore_con not enabled, so ecore_ipc will not be enabled)
fi

if test "x$have_ecore_ipc" = "xyes"; then
  AM_CONDITIONAL(BUILD_ECORE_IPC, true)
  AC_DEFINE(BUILD_ECORE_IPC, 1, [Build Ecore_Ipc Module])
  ecore_ipc_libs="-lecore_ipc"
else
  AM_CONDITIONAL(BUILD_ECORE_IPC, false)
fi

AC_SUBST(ecore_ipc_cflags)
AC_SUBST(ecore_ipc_libs)


AC_MSG_CHECKING(whether ecore_config module is to be built)

have_ecore_config="no";
ecore_config_cflags="";
ecore_config_libs="";

AC_ARG_ENABLE(ecore-config, 
[  --disable-ecore-config              disable the ecore_config module], [
  if [ test "$enableval" = "yes" ]; then  
    AC_MSG_RESULT(yes)
    have_ecore_config="yes";
  else
    AC_MSG_RESULT(no)
  fi
], [
  AC_MSG_RESULT(yes)
  have_ecore_config="yes";
]
)

if test "x$have_ecore_config" = "xyes"; then
  AC_ARG_WITH(eet-config,
   [   --with-eet-config=EET_CONFIG      use eet-config specified ],
   [
     PROG_EET_CONFIG=$withval;
     echo "using "$PROG_EET_CONFIG" for eet-config";
   ],[
     PROG="eet-config";
     AC_PATH_PROG(PROG_EET_CONFIG, $PROG, "", $PATH)
   ])
   if [ test -z "$EET_CONFIG" ]; then EET_CONFIG=$PROG_EET_CONFIG; fi
   eet_cflags=`$EET_CONFIG --cflags`
   eet_libs=`$EET_CONFIG --libs`
   AM_CONDITIONAL(BUILD_ECORE_CONFIG, true)
   ecore_config_libs="-lecore_config";
   AC_DEFINE(BUILD_ECORE_CONFIG, 1, [Build Ecore_Config Module])
   AC_SUBST(eet_libs)
   AC_SUBST(eet_cflags)
else
  AM_CONDITIONAL(BUILD_ECORE_CONFIG, false)
fi

AC_ARG_ENABLE(pthreads,
[--disable-pthreads            disable building with pthread support],
[
  if test x$enableval = xyes; then
    pthreads=yes
  else
    pthreads=no
  fi
]
)

if test x$pthreads = xyes ; then
AC_CHECK_HEADERS(pthread.h,pthread_header_ok="yes", pthread_header_ok="no")
   if test "$pthread_header_ok" = "yes"; then
      AC_CHECK_LIB(pthread, main, PTHREAD_LIBS="-lpthread", PTHREAD_LIBS="error")
      if test "$PTHREAD_LIBS" = "error"; then
         AC_CHECK_LIB(c_r, main, PTHREAD_LIBS="-pthread", pthread_lib_ok="no")
      fi
   fi
   if test "$pthread_header_ok" = "no" -o "$pthread_lib_ok" = "no"; then
      HAVE_PTHREADS=0
   else
      HAVE_PTHREADS=1
   fi
   if test "$PTHREAD_LIBS" = "-pthread"; then
      LIBS="$LIBS $PTHREAD_LIBS"
   else
      PTHREAD_CFLAGS="-D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS"
      LIBS="$LIBS $PTHREAD_LIBS"
   fi
else
   HAVE_PTHREADS=0
   PTHREAD_LIBS=""
fi

AC_SUBST(PTHREAD_LIBS)
AC_SUBST(HAVE_PTHREADS)

AC_CHECK_LIB(dl, dlopen, dlopen_libs=-ldl)
AC_SUBST(dlopen_libs)

dnl Checking for Perl:
AC_PATH_PROG(PERL,perl,0)
AC_SUBST(PERL)


AC_SUBST(ecore_config_cflags)
AC_SUBST(ecore_config_libs)

AC_SUBST(USE_OPENSSL)

requirements=""
AC_SUBST(requirements)

AC_OUTPUT([
Makefile
ecore.pc
ecore-config
data/Makefile
data/fonts/Makefile
data/images/Makefile
data/pointers/Makefile
src/Makefile
src/bin/Makefile
src/lib/Makefile
src/lib/ecore/Makefile
src/lib/ecore_job/Makefile
src/lib/ecore_x/Makefile
src/lib/ecore_fb/Makefile
src/lib/ecore_evas/Makefile
src/lib/ecore_con/Makefile
src/lib/ecore_ipc/Makefile
src/lib/ecore_txt/Makefile
src/lib/ecore_config/Makefile
debian/Makefile
examples/Makefile
], [
chmod +x ecore-config
]
)

echo
echo "$PACKAGE $VERSION"
echo
echo "Optional Modules:"
echo
echo "  Ecore_Job...............: $have_ecore_job"
echo "  Ecore_Con...............: $have_ecore_con (OpenSSL: $use_openssl)"
echo "  Ecore_Txt...............: $have_ecore_txt"
echo "  Ecore_X.................: $have_ecore_x"
echo "  Ecore_FB................: $have_ecore_fb"
echo "  Ecore_Evas..............: $have_ecore_evas"
echo "  Ecore_Evas GL Support...: $have_ecore_evas_gl"
echo "  Ecore_Evas FB Support...: $have_ecore_evas_fb"
echo "  Ecore_Ipc...............: $have_ecore_ipc (OpenSSL: $use_openssl)"
echo "  Ecore_Config............: $have_ecore_config"
echo
echo "Now type 'make' ('gmake' on some systems) to compile $PACKAGE."
echo
