dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_ISC_POSIX
AM_INIT_AUTOMAKE(ecore, 0.9.9.037)
AM_CONFIG_HEADER(config.h)

AC_C_BIGENDIAN
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)
AM_ENABLE_SHARED
AM_PROG_LIBTOOL
AC_C___ATTRIBUTE__
							
if test "x${bindir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    PACKAGE_BIN_DIR="${ac_default_prefix}/bin"
  else
    PACKAGE_BIN_DIR="${prefix}/bin"
  fi
else
  PACKAGE_BIN_DIR="${bindir}"
fi
AC_SUBST(PACKAGE_BIN_DIR)
		
if test "x${libdir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    PACKAGE_LIB_DIR="${ac_default_prefix}/lib"
  else
    PACKAGE_LIB_DIR="${prefix}/lib"
  fi
else
  PACKAGE_LIB_DIR="${libdir}"
fi
AC_SUBST(PACKAGE_LIB_DIR)

if test "x${prefix}" = "xNONE"; then
  PACKAGE_DATA_DIR="${ac_default_prefix}/share/${PACKAGE}"
else
  PACKAGE_DATA_DIR="${prefix}/share/${PACKAGE}"
fi
AC_SUBST(PACKAGE_DATA_DIR)

dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

# define pkg-config requirements for all our submodules.
# only the trivial requirements go here.
requirements_ecore_con=""
requirements_ecore_config=""
requirements_ecore_dbus=""
requirements_ecore_desktop=""
requirements_ecore_directfb="directfb"
requirements_ecore_evas="evas"
requirements_ecore_fb=""
requirements_ecore_file=""
requirements_ecore_ipc=""
requirements_ecore_job=""
requirements_ecore_txt=""
requirements_ecore_x=""

AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(strlcpy)

AC_CHECK_HEADERS(netinet/in.h)

case "$host_os" in
	mingw|mingw32)
		winsock_libs="-lwsock32"
		;;
esac

AC_SUBST(winsock_libs)

ecore_txt_cflags=""
ecore_txt_libs=""
AC_ARG_ENABLE(ecore-txt,
  AC_HELP_STRING(
    [--enable-ecore-txt],
    [enable the ecore_txt module. [[default=enabled]]]
  ), [
    want_ecore_txt=$enableval
  ], [
    want_ecore_txt=maybe
  ]
)

iconv_cflags=""
iconv_libs=""
AC_MSG_CHECKING(for explicit iconv link options)
AC_ARG_WITH(iconv-link,
  [  --with-iconv-link=ICONV_LINK     explicitly specify an iconv link option],
  [
    iconv_libs=$withval
    AC_MSG_RESULT($iconv_libs)
  ],[
    AC_MSG_RESULT(none)
  ]
)

have_ecore_txt="no"
if test "x$want_ecore_txt" != "xno" ; then
  if test "x$iconv_libs" = "x" ; then 
    AC_CHECK_LIB(iconv, libiconv,
      [
        iconv_libs="-liconv"
        ecore_txt_libs="-lecore_txt "$iconv_libs
        have_ecore_txt="yes"
      ]
    )
  
    if test "x$have_ecore_txt" != "xyes"; then
      AC_CHECK_LIB(iconv, iconv,
        [
          iconv_libs="-liconv"
          ecore_txt_libs="-lecore_txt "$iconv_libs
          have_ecore_txt="yes"
        ]
      )
    fi

    if test "x$have_ecore_txt" != "xyes"; then
      AC_CHECK_LIB(c, libiconv,
        [
          ecore_txt_libs="-lecore_txt "$iconv_libs
          have_ecore_txt="yes"
        ]
      )
    fi

    if test "x$have_ecore_txt" != "xyes"; then
      AC_CHECK_LIB(c, iconv,
        [
          ecore_txt_libs="-lecore_txt "$iconv_libs
          have_ecore_txt="yes"
        ]
      )
    fi
  else
    ecore_txt_libs="-lecore_txt "$iconv_libs
    have_ecore_txt="yes"
  fi
fi

dnl we already did the tests, now display the result
AC_MSG_CHECKING(whether ecore_txt module is to be built)
AC_MSG_RESULT($have_ecore_txt)

if test "x$have_ecore_txt" = "xyes" ; then
  AC_DEFINE(BUILD_ECORE_TXT, 1, [Build Ecore_Txt Module])
fi

AC_SUBST(iconv_cflags)
AC_SUBST(iconv_libs)

AC_SUBST(ecore_txt_cflags)
AC_SUBST(ecore_txt_libs)

have_ecore_x="no";
ecore_x_cflags="";
ecore_x_libs="";

x_dir="";
x_includes="";
x_cflags="";
x_libs="";

AC_ARG_ENABLE(ecore-x,
  AC_HELP_STRING(
    [--enable-ecore-x],
    [enable the ecore_x module. [[default=enabled]]]
  ), [
    want_ecore_x=$enableval
  ], [
    want_ecore_x=yes
  ]
)

AC_MSG_CHECKING(whether ecore_x module is to be built)

if test "x$have_ecore_txt" = "xyes"; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT([no (ecore_txt not enabled)])
  want_ecore_x="no"
fi

if test "x$want_ecore_x" = "xyes"; then
  AC_PATH_XTRA
  AC_CHECK_HEADER(X11/X.h, [
      AC_DEFINE(BUILD_ECORE_X, 1, [Build Ecore_X Module])
      have_ecore_x="yes"
      x_dir=${x_dir:-/usr/X11R6}
      x_cflags=${x_cflags:--I${x_includes:-$x_dir/include}}
      x_libs="${x_libs:--L${x_libraries:-$x_dir/lib}} -lX11 -lXext"
      ecore_x_libs="-lecore_x $x_libs";
  ])
fi

AC_SUBST(x_cflags)
AC_SUBST(x_includes)
AC_SUBST(x_libs)

if test "x$have_ecore_x" = "xyes"; then
  Xcursor_libs=""
  Xcursor_cflags=""
  use_Xcursor="no"
  PCFLAGS=$CFLAGS
  CFLAGS=$x_cflags" "$x_includes
  AC_CHECK_HEADER(X11/Xcursor/Xcursor.h,
    [
      AC_CHECK_LIB(Xcursor, XcursorImageLoadCursor,
        [
          AC_DEFINE(ECORE_XCURSOR, 1, [Build support for Xcursor])
          Xcursor_cflags=""
          Xcursor_libs="-lXcursor"
          use_Xcursor="yes"
        ], [
          Xcursor_cflags=""
          Xcursor_libs=""
          use_Xcursor="no"
        ], [
          $x_libs -lXrender
        ]
      )
    ], [
      Xcursor_cflags=""
      Xcursor_libs=""
      use_Xcursor="no"
    ], [
      #include <X11/Xlib.h>
    ]
  )
  CFLAGS=$PCFLAGS

  AC_SUBST(Xcursor_cflags)
  AC_SUBST(Xcursor_libs)
  
  AC_CHECK_X_EXTENSION([Xdamage], [Xdamage.h], [Xdamage], [XDamageSubtract])
  AC_CHECK_X_EXTENSION([Xdpms], [dpms.h], [Xdpms], [DPMSQueryExtension])
  if test "x$use_xdpms" = "xno" ; then
    AC_CHECK_X_EXTENSION([Xdpms], [dpms.h], [Xext], [DPMSQueryExtension])
  fi
  AC_CHECK_X_EXTENSION([Xfixes], [Xfixes.h], [Xfixes], [XFixesExpandRegion])
  AC_CHECK_X_EXTENSION([Xinerama], [Xinerama.h], [Xinerama], [XineramaQueryScreens])
  AC_CHECK_X_EXTENSION([Xprint], [Print.h], [Xp], [XpQueryScreens])
  AC_CHECK_X_EXTENSION([Xrandr], [Xrandr.h], [Xrandr], [XRRSizes])
  AC_CHECK_X_EXTENSION([Xrender], [Xrender.h], [Xrender], [XRenderFindVisualFormat])
  AC_CHECK_X_EXTENSION([Xss], [scrnsaver.h], [Xss], [XScreenSaverSelectInput])

  requirements_ecore_evas="$requirements_ecore_evas ecore-x"
fi

AC_SUBST(ecore_x_cflags)
AC_SUBST(ecore_x_libs)

AC_MSG_CHECKING(whether ecore_job module is to be built)

want_ecore_job="yes";
have_ecore_job="no";
ecore_job_cflags="";
ecore_job_libs="";

AC_ARG_ENABLE(ecore-job, 
  [  --disable-ecore-job           disable the ecore_job module],
  [
    if test x"$enableval" = x"yes" ; then  
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      want_ecore_job="no"
    fi
  ], [
    AC_MSG_RESULT(yes)
  ]
)

if test "x$want_ecore_job" = "xyes"; then
  AC_DEFINE(BUILD_ECORE_JOB, 1, [Build Ecore_Job Module])
  have_ecore_job="yes";
  ecore_job_libs="-lecore_job";
fi

AC_SUBST(ecore_job_cflags)
AC_SUBST(ecore_job_libs)

want_ecore_dfb="yes";
have_ecore_dfb="no";
ecore_dfb_cflags="";
ecore_dfb_libs="";

AC_MSG_CHECKING(whether ecore_dfb module is to be built)

AC_ARG_ENABLE(ecore-dfb, 
  [  --disable-ecore-dfb           disable the ecore_dfb module],
  [
    if test "$enableval" = "yes" ; then  
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      want_ecore_dfb="no"
    fi
  ], [
    AC_MSG_RESULT(yes)
  ]
)

if test "x$want_ecore_dfb" = "xyes"; then
PKG_CHECK_MODULES(DIRECTFB, directfb >= 0.9.16,
    [
      AC_DEFINE(BUILD_ECORE_DIRECTFB, 1, [Build Ecore_DirectFB Module])
      have_ecore_dfb="yes"
      dnl ecore_dfb_libs="-lecore_fb";
    ], [
      dummy=no
    ]
  )
fi

AC_SUBST(ecore_dfb_cflags)
AC_SUBST(ecore_dfb_libs)

want_ecore_fb="no";
have_ecore_fb="no";
ecore_fb_cflags="";
ecore_fb_libs="";

AC_MSG_CHECKING(whether ecore_fb module is to be built)

AC_ARG_ENABLE(ecore-fb, 
  [  --enable-ecore-fb            enable the ecore_fb module],
  [
    if test x"$enableval" = x"yes" ; then  
      AC_MSG_RESULT(yes)
      want_ecore_fb="yes"
    else
      AC_MSG_RESULT(no)
    fi
  ], [
    AC_MSG_RESULT(no)
  ]
)

tslib_libs=""
if test "x$want_ecore_fb" = "xyes"; then
  AC_CHECK_HEADER(tslib.h,
    [
      tslib_libs="-ltslib"
      AC_DEFINE(HAVE_TSLIB, 1, [Build Ecore_FB Touchscreen Code])
    ]
  )

  AC_CHECK_HEADER(linux/fb.h, [
      AC_CHECK_HEADER(linux/input.h, [
          AC_DEFINE(BUILD_ECORE_FB, 1, [Build Ecore_FB Module])
          have_ecore_fb="yes"
          ecore_fb_libs="-lecore_fb";
          requirements_ecore_evas="$requirements_ecore_evas ecore-fb"
      ])
  ])
fi

AC_SUBST(tslib_libs)
AC_SUBST(ecore_fb_cflags)
AC_SUBST(ecore_fb_libs)

ecore_evas_cflags="";
ecore_evas_libs="";

want_ecore_evas="yes"
have_ecore_evas="no"
evas_cflags="";
evas_libs="";

AC_MSG_CHECKING(whether ecore_evas module is to be built)
AC_ARG_ENABLE(ecore-evas, 
  [  --disable-ecore-evas          disable the ecore_evas module],
  [
    if test x"$enableval" = x"yes" ; then  
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      want_ecore_evas="no";
    fi
  ], [
    AC_MSG_RESULT(yes)
  ]
)

if test "x$want_ecore_evas" = "xyes"; then
  PKG_CHECK_MODULES(EVAS, [evas >= 0.9.9],
    [
      AC_DEFINE(BUILD_ECORE_EVAS, 1, [Build Ecore_Evas Module])
      have_ecore_evas="yes"
      ecore_evas_libs="-lecore_evas";
    ], [
      dummy=no
    ]
  )
fi

AC_SUBST(ecore_evas_cflags)
AC_SUBST(ecore_evas_libs)

want_ecore_evas_gl="yes";
have_ecore_evas_gl="no";

AC_MSG_CHECKING(whether ecore_evas gl support is to be built)
AC_ARG_ENABLE(ecore-evas-gl, 
  [  --disable-ecore-evas-gl       disable gl in the ecore_evas module],
  [
    if test x"$enableval" = x"yes" ; then  
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      want_ecore_evas_gl="no"
    fi
  ], [
    AC_MSG_RESULT(yes)
  ]
)

dnl GL support requires X support, so we should
dnl handle the case where our user is on crack
dnl i.e. user disables X but enables GL
PCFLAGS=$CFLAGS
CFLAGS="$EVAS_CFLAGS $CFLAGS"
if test "x$want_ecore_evas_gl" = "xyes" -a "x$have_ecore_x" = "xyes"; then
  AC_CHECK_HEADER(Evas_Engine_GL_X11.h,
    [
      AC_DEFINE(BUILD_ECORE_EVAS_GL, 1, [Support for GL Engine in Ecore_Evas])
      have_ecore_evas_gl="yes";
    ], [
      dummy=no
    ], [
      #include <Evas.h>
    ]
  )
else
  if test "x$want_ecore_evas_gl" = "xyes"; then
    AC_MSG_WARN(Silly monkey: ecore_evas_gl requires ecore_x ... disabling ecore_evas_gl)
  fi
fi

want_ecore_evas_xrender="yes";
have_ecore_evas_xrender="no";

AC_MSG_CHECKING(whether ecore_evas xrender support is to be built)
AC_ARG_ENABLE(ecore-evas-xrender, 
  [  --disable-ecore-evas-xrender  disable xrender in the ecore_evas module],
  [
    if test x"$enableval" = x"yes" ; then  
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      want_ecore_evas_xrender="no"
    fi
  ], [
    AC_MSG_RESULT(yes)
  ]
)

dnl Xrender support requires X support, so we should
dnl handle the case where our user is on crack
dnl i.e. user disables X but enables Xrender
PCFLAGS=$CFLAGS
CFLAGS="$EVAS_CFLAGS $CFLAGS"
if test "x$want_ecore_evas_xrender" = "xyes" -a "x$have_ecore_x" = "xyes"; then
  AC_CHECK_HEADER(Evas_Engine_XRender_X11.h,
    [
      AC_DEFINE(BUILD_ECORE_EVAS_XRENDER, 1, [Support for XRender Engine in Ecore_Evas])
      have_ecore_evas_xrender="yes";
    ], [
      dummy=no
    ], [
      #include <Evas.h>
    ]
  )
else
  if test "x$want_ecore_evas_xrender" = "xyes"; then
    AC_MSG_WARN(Silly monkey: ecore_evas_xrender requires ecore_x ... disabling ecore_evas_xrender)
  fi
fi

AC_MSG_CHECKING(whether ecore_evas DirectFB support is to be built)
AC_ARG_ENABLE(ecore-evas-dfb,
  [  --disable-ecore-evas-dfb      disable DirectFB in the ecore_evas module],
  [
    if test "x$enableval" = "xno" ; then  
      want_ecore_evas_dfb=no
    else
      want_ecore_evas_dfb=yes
    fi
  ], [
    want_ecore_evas_dfb=maybe
  ]
)
AC_MSG_RESULT($want_ecore_evas_dfb)

have_ecore_evas_dfb="no"
if test "x$want_ecore_evas_dfb" != "xno" ; then
  save_CFLAGS="$CFLAGS"
  CFLAGS="$CFLAGS $DIRECTFB_CFLAGS"
  AC_CHECK_HEADER(Evas_Engine_DirectFB.h,
    [
      AC_DEFINE(BUILD_ECORE_EVAS_DIRECTFB, 1, [Support for DirectFB in Ecore_Evas])
      have_ecore_evas_dfb="yes"
    ], [
      if test "x$want_ecore_evas_dfb" = "xyes" ; then
        AC_MSG_ERROR(DirectFB requested but support not found)
      fi
    ], [
      #include <Evas.h>
    ]
  )
  CFLAGS="$save_CFLAGS"
fi


want_ecore_evas_fb="no";
have_ecore_evas_fb="no";

AC_MSG_CHECKING(whether ecore_evas fb support is to be built)
AC_ARG_ENABLE(ecore-evas-fb, 
  [  --enable-ecore-evas-fb       enable fb in the ecore_evas module],
  [
    if test x"$enableval" = x"yes" ; then  
      AC_MSG_RESULT(yes)
      want_ecore_evas_fb="yes"
    else
      AC_MSG_RESULT(no)
    fi
  ], [
    AC_MSG_RESULT(no)
  ]
)
if test "x$want_ecore_evas_fb" = "xyes" -a "x$have_ecore_fb" = "xyes"; then
  AC_CHECK_HEADER(Evas_Engine_FB.h,
    [
      AC_DEFINE(BUILD_ECORE_EVAS_FB, 1, [Support for Linux FB in Ecore_Evas])
      have_ecore_evas_fb="yes"
    ], [
      dummy=no
    ], [
      #include <Evas.h>
    ]
  )
fi

want_ecore_evas_buffer="yes";
have_ecore_evas_buffer="no";

AC_MSG_CHECKING(whether ecore_evas buffer support is to be built)
AC_ARG_ENABLE(ecore-evas-buffer, 
  [  --disable-ecore-evas-buffer   disable buffer in the ecore_evas module],
  [
    if test x"$enableval" = x"yes" ; then  
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      want_ecore_evas_buffer="no"
    fi
  ], [
    AC_MSG_RESULT(yes)
  ]
)

if test "x$want_ecore_evas_buffer" = "xyes"; then
  AC_CHECK_HEADER(Evas_Engine_Buffer.h,
    [
      AC_DEFINE(BUILD_ECORE_EVAS_BUFFER, 1, [Support for Buffers in Ecore_Evas])
      have_ecore_evas_buffer="yes"
    ], [
      dummy=no
    ], [
      #include <Evas.h>
    ]
  )
fi
CFLAGS=$PCFLAGS

AC_MSG_CHECKING(whether ecore_con module is to be built)

want_ecore_con="yes";
have_ecore_con="no";
ecore_con_cflags="";
ecore_con_libs="";

AC_ARG_ENABLE(ecore-con, 
  [  --disable-ecore-con           disable the ecore_con module],
  [
    if test x"$enableval" = x"yes" ; then  
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      want_ecore_con="no"
    fi
  ], [
    AC_MSG_RESULT(yes)
  ]
)

if test "x$want_ecore_con" = "xyes"; then
  AC_DEFINE(BUILD_ECORE_CON, 1, [Build Ecore_Con Module])
  have_ecore_con="yes"
  ecore_con_libs="-lecore_con"
fi

AC_SUBST(ecore_con_cflags)
AC_SUBST(ecore_con_libs)

AC_ARG_ENABLE(openssl,
  [  --enable-openssl              enable openssl support @<:@default=auto@:>@],
  [ use_openssl=$enableval ],
  [ use_openssl=yes ]
)

if test "x$use_openssl" = "xyes"; then
  PKG_CHECK_MODULES(SSL, openssl,
    [
       use_openssl=yes
       AC_DEFINE(USE_OPENSSL, 1, [Use OpenSSL])
       requirements_ecore_con="$requirements_ecore_con openssl"
       # no need to add it to req_ecore_{ipc,dbus}, since they
       # depends on ecore_con anyway.
    ],
    [ use_openssl=no ]
  )
fi

AC_ABSTRACT_SOCKET_TEST(
  [AC_DEFINE(HAVE_ABSTRACT_SOCKETS, 1, [Have abstract socket namespace])],
  []
)

want_ecore_ipc="yes";
have_ecore_ipc="no";
ecore_ipc_cflags="";
ecore_ipc_libs="";

if test "x$have_ecore_con" = "xyes"; then
  AC_MSG_CHECKING(whether ecore_ipc module is to be built)
    AC_ARG_ENABLE(ecore-ipc, 
    [  --disable-ecore-ipc           disable the ecore_ipc module],
    [
      if test x"$enableval" = x"yes" ; then  
        AC_MSG_RESULT(yes)
      else
        AC_MSG_RESULT(no)
        want_ecore_ipc="no"
      fi
    ], [
      AC_MSG_RESULT(yes)
    ]
  )
else
  AC_MSG_RESULT(ecore_con not enabled so ecore_ipc will not be enabled)
  want_ecore_ipc="no"
fi

if test "x$want_ecore_ipc" = "xyes"; then
  AC_DEFINE(BUILD_ECORE_IPC, 1, [Build Ecore_Ipc Module])
  have_ecore_ipc="yes"
  ecore_ipc_libs="-lecore_ipc"
fi

AC_SUBST(ecore_ipc_cflags)
AC_SUBST(ecore_ipc_libs)

AC_MSG_CHECKING(whether ecore_dbus module is to be built)
want_ecore_dbus="yes";
have_ecore_dbus="no";
ecore_dbus_cflags="";
ecore_dbus_libs="";
dbus_dir="";
dbus_includes="";
dbus_cflags="";
dbus_libs="";

AC_ARG_ENABLE(ecore-dbus,
  [  --disable-ecore-dbus          disable the ecore_dbus module],
  [
    if test x"$enableval" = x"yes" ; then
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      want_ecore_dbus="no"
    fi
  ], [
    AC_MSG_RESULT(yes)
  ]
)

if test "x$want_ecore_dbus" = "xyes"; then
  AC_DEFINE(BUILD_ECORE_DBUS, 1, [Build Ecore_DBus Module])
  have_ecore_dbus="yes"
  #dbus_dir="/usr";
  #dbus_includes="";
  #dbus_cflags="-I"$dbus_dir"/include/dbus-1.0 -I"$dbus_dir"/lib/dbus-1.0/include"
  #dbus_libs="-L"$dbus_dir"/lib"
  #dbus_ldflags="-ldbus-1";
  ecore_dbus_libs="-lecore_dbus";
fi

AC_SUBST(dbus_cflags)
AC_SUBST(dbus_includes)
AC_SUBST(dbus_ldflags)
AC_SUBST(dbus_libs)

AC_SUBST(ecore_dbus_cflags)
AC_SUBST(ecore_dbus_libs)

AC_MSG_CHECKING(whether ecore_config module is to be built)

want_ecore_config="yes";
have_ecore_config="no";
ecore_config_cflags="";
ecore_config_libs="";

AC_ARG_ENABLE(ecore-config, 
  [  --disable-ecore-config        disable the ecore_config module],
  [
    if test x"$enableval" = x"yes" ; then  
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      want_ecore_config="no";
    fi
  ], [
    AC_MSG_RESULT(yes)
  ]
)

if test "x$want_ecore_config" = "xyes"; then
  PKG_CHECK_MODULES(EET, [eet >= 0.9.10],
    [
      AC_DEFINE(BUILD_ECORE_CONFIG, 1, [Build Ecore_Config Module])
      have_ecore_config="yes"
      ecore_config_libs="-lecore_config";
      requirements_ecore_config="$requirements_ecore_config eet"
    ], [
      dummy=no
    ]
  )
fi

AC_SUBST(ecore_config_cflags)
AC_SUBST(ecore_config_libs)

want_ecore_file="yes"
have_ecore_file="no"
ecore_file_libs=""
use_fam="no"
use_inotify="yes"
use_poll="yes"
use_curl="yes"

AC_MSG_CHECKING(whether ecore_file module is to be built)
AC_ARG_ENABLE(ecore-file, 
  [  --disable-ecore-file          disable the ecore_file module],
  [
    if test "$enableval" = "yes"; then  
      AC_MSG_RESULT(yes)
    else
      AC_MSG_RESULT(no)
      want_ecore_file="no"
    fi
  ], [
    AC_MSG_RESULT(yes)
  ]
)

if test "x$want_ecore_file" = "xyes"; then
  ecore_file_libs="-lecore_file"
  have_ecore_file="yes"
  AC_DEFINE(HAVE_POLL, 1, [ File monitoring with polling ])
fi

if test "x$have_ecore_file" = "xyes"; then
  dnl We need to check if the right inotify version is accessible
  AC_MSG_CHECKING(whether inotify is to be used for filemonitoring)
  AC_ARG_ENABLE(inotify, 
    [  --disable-inotify             disable inotify in the ecore_file module],
    [
      if test "$enableval" = "yes"; then  
        AC_MSG_RESULT(yes)
      else
        AC_MSG_RESULT(no)
        use_inotify="no"
      fi
    ], [
      AC_MSG_RESULT(yes)
    ]
  )
  
  dnl It's hard to find a good test on how to check the correct
  dnl inotify version. They changed the headers a lot.
  dnl in kernel 2.6.13 __NR_inotify_init was added to the defined syscalls
  dnl in asm/unistd.h and IN_MOVE_SELF was added to linux/inotify.h
  dnl so with this check you need a very new kernel and kernel-headers!
  if test "x$use_inotify" = "xyes"; then
    AC_TRY_COMPILE(
      [
        #include <asm/unistd.h>
        #include <linux/inotify.h>
      ],
      [ int a = __NR_inotify_init; int b = IN_MOVE_SELF; ],
      [
        AC_DEFINE(HAVE_INOTIFY, 1, [ File monitoring with Inotify ])
      ], [
        use_inotify="no"
      ]
    )
  fi
  
  #AC_MSG_CHECKING(whether FAM is to be used for filemonitoring)
  #AC_ARG_ENABLE(fam, 
  #  [  --enable-fam              enable fam in the ecore_file module],
  #  [
  #    if test "$enableval" = "yes"; then  
  #      AC_MSG_RESULT(yes)
  #      use_fam="yes"
  #    else
  #      AC_MSG_RESULT(no)
  #    fi
  #  ], [
  #    AC_MSG_RESULT(no)
  #  ]
  #)
  
  fam_libs=""
  #if test "x$use_fam" = "xyes"; then
  #  AC_CHECK_LIB(fam, FAMOpen,
  #    [
  #      AC_DEFINE(HAVE_FAM, 1, [ File monitoring with FAM ])
  #      fam_libs="-lfam"
  #      ecore_file_libs="$ecore_file_libs $fam_libs"
  #    ], [
  #      use_fam="no"
  #    ]
  #  )
  #fi
  
  AC_MSG_CHECKING(whether polling is to be used for filemonitoring)
  AC_ARG_ENABLE(poll, 
    [  --disable-poll                disable poll in the ecore_file module],
    [
      if test "$enableval" = "yes"; then  
        AC_MSG_RESULT(yes)
      else
        AC_MSG_RESULT(no)
        use_poll="no"
      fi
    ], [
      AC_MSG_RESULT(yes)
    ]
  )
  
  if test "x$use_poll" = "xyes"; then
    AC_DEFINE(HAVE_POLL, 1, [ File monitoring with polling ])
  fi
  
  use_curl="yes"
  AC_MSG_CHECKING(whether CURL is to be used for file download)
  AC_ARG_ENABLE(curl, 
    [  --disable-curl                disable curl in the ecore_file module],
    [
      if test "$enableval" = "yes"; then  
        AC_MSG_RESULT(yes)
      else
        AC_MSG_RESULT(no)
        use_curl="no"	
      fi
    ], [
      AC_MSG_RESULT(yes)
    ]
  )
  
  if test "x$use_curl" = "xyes"; then
    PKG_CHECK_MODULES(CURL, libcurl,
      [
        AC_DEFINE(HAVE_CURL, 1, [ Downloading with CURL ])
        ecore_file_libs="$ecore_file_libs $CURL_LIBS"
        requirements_ecore_file="$requirements_ecore_file libcurl"
      ], [
        use_curl="no"
      ]
    )
  fi
fi

AC_SUBST(fam_libs)
AC_SUBST(ecore_file_libs)

have_ecore_desktop="no"
want_ecore_desktop="no"

if test "x$have_ecore_file" = "xyes"; then
  AC_MSG_CHECKING(whether ecore_desktop module is to be built)
  want_ecore_desktop="yes";
  ecore_desktop_cflags="";
  ecore_desktop_libs="";

  AC_ARG_ENABLE(ecore-desktop,
    [  --disable-ecore-desktop          disable the ecore_desktop module],
    [
      if test x"$enableval" = x"yes" ; then
        AC_MSG_RESULT(yes)
      else
        AC_MSG_RESULT(no)
        want_ecore_desktop="no"
      fi
    ], [
      AC_MSG_RESULT(yes)
    ]
  )

  if test "x$want_ecore_desktop" = "xyes"; then
    AC_DEFINE(BUILD_ECORE_DESKTOP, 1, [Build Ecore_Desktop Module])
    ecore_desktop_libs="-lecore_desktop";
	requirements_ecore_desktop="$requirements_ecore_desktop ecore-file"
  fi

  AC_SUBST(ecore_desktop_cflags)
  AC_SUBST(ecore_desktop_libs)
else
  AC_MSG_RESULT(ecore_file not enabled so ecore_desktop will not be enabled)
fi

AC_ARG_ENABLE(pthreads,
  [  --disable-pthreads            disable building with pthread support],
  [
    if test x$enableval = xyes; then
      pthreads=yes
    else
      pthreads=no
    fi
  ]
)

if test x$pthreads = xyes ; then
AC_CHECK_HEADERS(pthread.h,pthread_header_ok="yes", pthread_header_ok="no")
   if test "$pthread_header_ok" = "yes"; then
      AC_CHECK_LIB(pthread, main, PTHREAD_LIBS="-lpthread", PTHREAD_LIBS="error")
      if test "$PTHREAD_LIBS" = "error"; then
         AC_CHECK_LIB(c_r, main, PTHREAD_LIBS="-pthread", pthread_lib_ok="no")
      fi
   fi
   if test "$pthread_header_ok" = "no" -o "$pthread_lib_ok" = "no"; then
      HAVE_PTHREADS=0
   else
      HAVE_PTHREADS=1
   fi
   if test "$PTHREAD_LIBS" = "-pthread"; then
      LIBS="$LIBS $PTHREAD_LIBS"
   else
      PTHREAD_CFLAGS="-D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS"
      LIBS="$LIBS $PTHREAD_LIBS"
   fi
else
   HAVE_PTHREADS=0
   PTHREAD_LIBS=""
fi

AC_SUBST(PTHREAD_LIBS)
AC_SUBST(HAVE_PTHREADS)

AC_CHECK_LIB(dl, dlopen, dlopen_libs=-ldl)
AC_SUBST(dlopen_libs)

dnl Checking for Perl:
AC_PATH_PROG(PERL,perl,0)
AC_SUBST(PERL)

AC_SUBST(requirements_ecore_con)
AC_SUBST(requirements_ecore_config)
AC_SUBST(requirements_ecore_dbus)
AC_SUBST(requirements_ecore_desktop)
AC_SUBST(requirements_ecore_directfb)
AC_SUBST(requirements_ecore_evas)
AC_SUBST(requirements_ecore_fb)
AC_SUBST(requirements_ecore_file)
AC_SUBST(requirements_ecore_ipc)
AC_SUBST(requirements_ecore_job)
AC_SUBST(requirements_ecore_txt)
AC_SUBST(requirements_ecore_x)

# set up conditionals
AM_CONDITIONAL(BUILD_ECORE_TXT, test $have_ecore_txt = yes)
AM_CONDITIONAL(BUILD_ECORE_X, test $have_ecore_x = yes)
AM_CONDITIONAL(BUILD_ECORE_JOB, test $have_ecore_job = yes)
AM_CONDITIONAL(BUILD_ECORE_DIRECTFB, test $have_ecore_dfb = yes)
AM_CONDITIONAL(BUILD_ECORE_FB, test $have_ecore_fb = yes)
AM_CONDITIONAL(BUILD_ECORE_EVAS, test $have_ecore_evas = yes)
AM_CONDITIONAL(BUILD_ECORE_EVAS_GL, test $have_ecore_evas_gl = yes)
AM_CONDITIONAL(BUILD_ECORE_EVAS_XRENDER, test $have_ecore_evas_xrender = yes)
AM_CONDITIONAL(BUILD_ECORE_EVAS_DIRECTFB, test $have_ecore_evas_dfb = yes)
AM_CONDITIONAL(BUILD_ECORE_EVAS_FB, test $have_ecore_evas_fb = yes)
AM_CONDITIONAL(BUILD_ECORE_EVAS_BUFFER, test $have_ecore_evas_buffer = yes)
AM_CONDITIONAL(BUILD_ECORE_CON, test $have_ecore_con = yes)
AM_CONDITIONAL(BUILD_ECORE_IPC, test $have_ecore_ipc = yes)
AM_CONDITIONAL(BUILD_ECORE_DBUS, test $have_ecore_dbus = yes)
AM_CONDITIONAL(BUILD_ECORE_CONFIG, test $have_ecore_config = yes)
AM_CONDITIONAL(BUILD_ECORE_FILE, test $have_ecore_file = yes)
AM_CONDITIONAL(BUILD_ECORE_DESKTOP, test $have_ecore_desktop = yes)

AC_OUTPUT([
Makefile
ecore-con.pc
ecore-config.pc
ecore-dbus.pc
ecore-desktop.pc
ecore-directfb.pc
ecore-evas.pc
ecore-fb.pc
ecore-file.pc
ecore-ipc.pc
ecore-job.pc
ecore-txt.pc
ecore-x.pc
ecore.pc
src/Makefile
src/bin/Makefile
src/lib/Makefile
src/lib/ecore/Makefile
src/lib/ecore_job/Makefile
src/lib/ecore_x/Makefile
src/lib/ecore_fb/Makefile
src/lib/ecore_evas/Makefile
src/lib/ecore_con/Makefile
src/lib/ecore_ipc/Makefile
src/lib/ecore_txt/Makefile
src/lib/ecore_config/Makefile
src/lib/ecore_file/Makefile
src/lib/ecore_dbus/Makefile
src/lib/ecore_desktop/Makefile
src/lib/ecore_directfb/Makefile
ecore-config
README
ecore.spec
debian/changelog
],[
chmod +x ecore-config
])

echo
echo "$PACKAGE $VERSION"
echo
echo "Optional Modules:"
echo
echo "  Ecore_Job....................: $have_ecore_job"
echo "  Ecore_Con....................: $have_ecore_con (OpenSSL: $use_openssl)"
echo "  Ecore_Txt....................: $have_ecore_txt"
echo "  Ecore_X......................: $have_ecore_x (Xcursor: $use_Xcursor) (Xprint: $use_xprint) (Xinerama: $use_xinerama) (Xrandr: $use_xrandr) (Xscreensaver: $use_xss) (Xrender: $use_xrender) (Xfixes: $use_xfixes) (Xdamage: $use_xdamage) (Xdpms: $use_xdpms)"
echo "  Ecore_FB.....................: $have_ecore_fb"
echo "  Ecore_DFB....................: $have_ecore_dfb"
echo "  Ecore_Evas...................: $have_ecore_evas"
echo "  Ecore_Evas GL Support........: $have_ecore_evas_gl"
echo "  Ecore_Evas XRender Support...: $have_ecore_evas_xrender"
echo "  Ecore_Evas FB Support........: $have_ecore_evas_fb"
echo "  Ecore_Evas DFB Support.......: $have_ecore_evas_dfb"
echo "  Ecore_Evas Buffer Support....: $have_ecore_evas_buffer"
echo "  Ecore_Ipc....................: $have_ecore_ipc (OpenSSL: $use_openssl)"
echo "  Ecore_Config.................: $have_ecore_config"
echo "  Ecore_DBUS...................: $have_ecore_dbus"
echo "  Ecore_Desktop................: $have_ecore_desktop"
#echo "  Ecore_File...................: $have_ecore_file (Inotify: $use_inotify) (FAM: $use_fam) (Poll: $use_poll)"
echo "  Ecore_File...................: $have_ecore_file (Inotify: $use_inotify) (Poll: $use_poll) (CURL: $use_curl)"
echo
echo "Now type 'make' ('gmake' on some systems) to compile $PACKAGE."
echo
