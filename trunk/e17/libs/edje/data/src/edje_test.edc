fonts {
   font: "Vera.ttf" "Vera";
}
images {
   image: "bg.png" LOSSY 95;
   image: "e.png"  LOSSY 95;
}

collections {
   group {
      name: "test";
      script {
       public message(Msg_Type:type, id, ...) {
	  if (type == MSG_NONE)
	    {
	       new buf[100];
	       
	       snprintf(buf, sizeof(buf), "ID: %i", id);
	       emit("MESSAGE NONE", buf);
	       send_message(type, id + 1000);
	    }
	  else if (type == MSG_STRING)
	    {
	       new str[100];
	       new buf[100];
	       
	       snprintf(buf, sizeof(buf), "MESSAGE STRING ID: %i", id);
	       for (new j = 0; j < (sizeof(str) - 1); j++)
		 {
		    str[j] = getarg(2, j);
		    if (str[j] == 0) break;
		 }
	       emit(buf, str);
	       send_message(type, id + 1000, "A Test Reply");
	    }
	  else if (type == MSG_INT)
	    {
	       new str[100];
	       new buf[100];
	       new val;
	       
	       snprintf(buf, sizeof(buf), "MESSAGE INT ID: %i", id);
	       val = getarg(2);
	       snprintf(str, sizeof(str), "V = %i", val);
	       emit(buf, str);
	       send_message(type, id + 1000, 987);
	    }
	  else if (type == MSG_FLOAT)
	    {
	       new str[100];
	       new buf[100];
	       new Float:val;
	       
	       snprintf(buf, sizeof(buf), "MESSAGE FLOAT ID: %i", id);
	       val = getfarg(2);
	       snprintf(str, sizeof(str), "V = %f", val);
	       emit(buf, str);
	       send_message(type, id + 1000, 3.14159);
	    }
	  else if (type == MSG_STRING_SET)
	    {
	       new str[100];
	       new buf[100];
	       
	       snprintf(buf, sizeof(buf), "MESSAGE STRING SET ID: %i", id);
               for (new i = 2; i < numargs(); i++)
		 {
		    for (new j = 0; j < (sizeof(str) - 1); j++)
		      {
			 str[j] = getarg(i, j);
			 if (str[j] == 0) break;
		      }
		    emit(buf, str);
		 }
	       send_message(type, id + 1000, "Alpha", "Beta", "Gamma", "Delta");
	    }
	  else if (type == MSG_INT_SET)
	    {
	       new buf[100];
	       
	       snprintf(buf, sizeof(buf), "MESSAGE INT SET ID: %i", id);
	       for (new i = 2; i < numargs(); i++)
		 {
		    new val;
		    new str[100];
		    
		    val = getarg(i);
		    snprintf(str, sizeof(str), "V = %i", val);
		    emit(buf, str);
		 }
	       send_message(type, id + 1000, 1, 2, 3, 4);
	    }
	  else if (type == MSG_FLOAT_SET)
	    {
	       new buf[100];
	       
	       snprintf(buf, sizeof(buf), "MESSAGE FLOAT SET ID: %i", id);
	       for (new i = 2; i < numargs(); i++)
		 {
		    new Float:val;
		    new str[100];
		    
		    val = getfarg(i);
		    snprintf(str, sizeof(str), "V = %f", val);
		    emit(buf, str);
		 }
	       send_message(type, id + 1000, 0.1, 0.2, 0.3, 0.4);
	    }
	  else if (type == MSG_STRING_INT)
	    {
	       new str[100];
	       new buf[100];
	       new val;
	       
	       snprintf(buf, sizeof(buf), "MESSAGE STRING INT ID: %i", id);
	       for (new j = 0; j < (sizeof(str) - 1); j++)
		 {
		    str[j] = getarg(2, j);
		    if (str[j] == 0) break;
		 }
	       emit(buf, str);
	       val = getarg(3);
	       snprintf(str, sizeof(str), "V = %i", val);
	       emit(buf, str);
	       send_message(type, id + 1000, "Single Int Reply", 1234);
	    }
	  else if (type == MSG_STRING_FLOAT)
	    {
	       new str[100];
	       new buf[100];
	       new Float:val;
	       
	       snprintf(buf, sizeof(buf), "MESSAGE STRING INT ID: %i", id);
	       for (new j = 0; j < (sizeof(str) - 1); j++)
		 {
		    str[j] = getarg(2, j);
		    if (str[j] == 0) break;
		 }
	       emit(buf, str);
	       val = getfarg(3);
	       snprintf(str, sizeof(str), "V = %f", val);
	       emit(buf, str);
	       send_message(type, id + 1000, "Single Float Reply", 0.1234);
	    }
	  else if (type == MSG_STRING_INT_SET)
	    {
	       new str[100];
	       new buf[100];
	       new val;
	       
	       snprintf(buf, sizeof(buf), "MESSAGE STRING INT SET ID: %i", id);
	       for (new j = 0; j < (sizeof(str) - 1); j++)
		 {
		    str[j] = getarg(2, j);
		    if (str[j] == 0) break;
		 }
	       emit(buf, str);
	       for (new i = 3; i < numargs(); i++)
		 {
		    val = getarg(i);
		    snprintf(str, sizeof(str), "V = %i", val);
		    emit(buf, str);
		 }
	       send_message(type, id + 1000, "Four Ints Reply", 7, 6, 5, 4);
	    }
	  else if (type == MSG_STRING_FLOAT_SET)
	    {
	       new str[100];
	       new buf[100];
	       new Float:val;
	       
	       snprintf(buf, sizeof(buf), "MESSAGE STRING INT SET ID: %i", id);
	       for (new j = 0; j < (sizeof(str) - 1); j++)
		 {
		    str[j] = getarg(2, j);
		    if (str[j] == 0) break;
		 }
	       emit(buf, str);
	       for (new i = 3; i < numargs(); i++)
		 {
		    val = getfarg(i);
		    snprintf(str, sizeof(str), "V = %f", val);
		    emit(buf, str);
		 }
	       send_message(type, id + 1000, "Four Floats Reply", 1.7, 1.6, 1.5, 1.4);
	    }
       }
      }
      parts {
	 part {
	    name:          "background";
	    mouse_events:  0;
	    description {
	       state:    "default" 0.0;
	       color_class:   "bg";
	       rel1 {
		  relative: 0.0  0.0;
		  offset:   0    0;
	       }
	       rel2 {
		  relative: 1.0  1.0;
		  offset:   -1   -1;
	       }
	       image {
		  normal: "bg.png";
	       border: 12 12 12 12;
	       }
	    }
	 }
	 part {
	    name:   "text1";
	    type:   TEXT;
            effect: SOFT_SHADOW;
	    description {
	       state:    "default" 0.0;
	       rel1 {
		  relative: 0.0 0.0;
		  offset:   8   8;
	       }
	       rel2 {
		  relative: 1.0 0.0;
		  offset:   -9  20;
	       }
	       color: 255 255 255 255;
	       color3: 0 0 0 32;
	       text {
		  text:     "Test String";
		  font:     "Vera";
		  size:     10;
		  align:   0.0 0.5;
	       }
	    }
	 }
	 part {
	    name:          "logo";
	    description {
	       state:    "default" 0.0;
	       min:      64 64;
	       max:      320 320;
	       aspect:   1.0 1.0;
	       rel1 {
		  relative: 0.4  0.4;
		  offset:   0    0;
	       }
	       rel2 {
		  relative: 0.6  0.6;
		  offset:   -1   -1;
	       }
	       image {
		  normal: "e.png";
	       }
	    }
	    description {
	       state:    "clicked" 0.0;
	       inherit:  "default" 0.0;
	       color:    255 255 255 128;
	    }
	 }
      }
      programs {
	 program {
	    name:       "logo_click";
	    signal:     "mouse,down,1";
	    source:     "logo";
	    action:     STATE_SET "clicked" 0.0;
	    transition: LINEAR 0.0;
	    target:     "logo";
	 }
	 program {
	    name:       "logo_unclick";
	    signal:     "mouse,up,1";
	    source:     "logo";
	    action:     STATE_SET "default" 0.0;
	    transition: DECELERATE 0.25;
	    target:     "logo";
	 }
      }
   }
}
