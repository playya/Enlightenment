dnl Process this file with autoconf to produce a configure script.

# get rid of that stupid cache mechanism
rm -f config.cache

AC_INIT(configure.in)
AC_ISC_POSIX
AM_INIT_AUTOMAKE(evas, 1.0.0_pre12)
AM_CONFIG_HEADER(config.h)

AC_C_BIGENDIAN
AC_PROG_CC
AC_PROG_CXX
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST
AM_ENABLE_SHARED
AM_PROG_LIBTOOL

dnl Add the languages which your application supports here.

if test "x${exec_prefix}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    bindir="${ac_default_prefix}/bin";
  else
    bindir="${prefix}/bin";
  fi
else
  if test "x${prefix}" = "xNONE"; then
    bindir="${ac_default_prefix}/bin";
  else
    bindir="${prefix}/bin";
  fi
fi

if test "x${exec_prefix}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    libdir="${ac_default_prefix}/lib";
  else
    libdir="${prefix}/lib";
  fi
else
  if test "x${prefix}" = "xNONE"; then
    libdir="${ac_default_prefix}/lib";
  else
    libdir="${prefix}/lib";
  fi
fi

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", [Shared Data Directory])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", [Shared Data Directory])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}", [Shared Data Directory])
fi

dnl Set PACKAGE_BIN_DIR in config.h.
if test "x${bindir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${ac_default_prefix}/bin", [Installation Directory for User Executables])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${prefix}/bin", [Installation Directory for User Executables])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${bindir}", [Installation Directory for User Executables])
fi

dnl Set PACKAGE_LIB_DIR in config.h.
if test "x${libdir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${ac_default_prefix}/lib", [Installation Directory for Libraries])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${prefix}/lib", [Installation Directory for Libraries])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${libdir}", [Installation Directory for Libraries])
fi

dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}", [Source Code Directory])

x_dir=""
x_cflags=""
x_libs=""
gl_dir=""
gl_cflags=""
gl_libs=""
qt_dir=""
qt_cflags=""
qt_libs=""				 
qt_moc="moc"

# blah-config style checks
# qtdir setting
AC_ARG_WITH(qtdir,
[  --with-qtdir=QT_DIR                       use qt directory specified ],
[ 
  qt_dir=$withval;
  echo "using "$qt_dir" for qt directory.";
],[
  qt_dir="/opt/Qtopia";
])
# check for freetype
AC_ARG_WITH(freetype-config,
[  --with-freetype-config=FREETYPE_CONFIG    use freetype-config specified ],
[ 
  PROG_CONFIG=$withval;
  echo "using "$PROG_CONFIG" for freetype-config";
],[
  PROG="freetype-config";
  AC_PATH_PROG(PROG_CONFIG, $PROG, "", $PATH)
])
if [ test -z $PROG_CONFIG ]; then
  echo $PROG " is not in your \$PATH. Please ensure it is.";
  echo "You may need to install the librarya and/or development packages";
  echo "that contain this configure-script.";
  echo "FATAL ERROR. ABORT.";
  exit -1;
fi
freetype_cflags=`$PROG_CONFIG --cflags`
freetype_libs=`$PROG_CONFIG --libs`

have_evas_software_x11="";
ENGINE_SOFTWARE_X11_PRG="";

AC_MSG_CHECKING(whether software x11 backend is to be built)

AC_ARG_ENABLE(software-x11, [  --enable-software-x11           enable the Software X11 rendering backend], [
	   if [ test "$enableval" = "yes" ]; then
	     AC_MSG_RESULT(yes)
	     have_evas_software_x11="yes"
	   else
	     AC_MSG_RESULT(no)
	   fi
        ], [
	   AC_MSG_RESULT(yes)
	   have_evas_software_x11="yes"
	]
)

if test "x$have_evas_software_x11" = "xyes"; then
  AC_CHECK_HEADER(X11/X.h,
    [
      AM_CONDITIONAL(BUILD_ENGINE_SOFTWARE_X11, true)
      AC_DEFINE(BUILD_ENGINE_SOFTWARE_X11, 1, [Software X11 Rendering Backend])
      x_dir="/usr/X11R6";
      x_cflags="-I"$x_dir"/include"
      x_libs="-L"$x_dir"/lib -lX11 -lXext"
      ENGINE_SOFTWARE_X11_PRG="evas_software_x11_test evas_software_x11_perf_test evas_software_x11_perf_load"
    ],
    [
      AM_CONDITIONAL(BUILD_ENGINE_SOFTWARE_X11, false)
      AC_MSG_RESULT(disabling software X11 engine)
    ]
  )
else
  AM_CONDITIONAL(BUILD_ENGINE_SOFTWARE_X11, false)
fi

have_evas_directfb="";
ENGINE_DIRECTFB_PRG="";

AC_MSG_CHECKING(whether directfb backend is to be built)

AC_ARG_ENABLE(directfb, [  --enable-directfb                enable the DirectFB rendering backend], [
	   if [ test "$enableval" = "yes" ]; then
	     AC_MSG_RESULT(yes)
	     have_evas_directfb="yes"
	   else
	     AC_MSG_RESULT(no)
	   fi
	], [
	   AC_MSG_RESULT(yes)
	   have_evas_directfb="yes"
	]
)

if test "x$have_evas_directfb" = "xyes"; then
  PKG_CHECK_MODULES(DIRECTFB, directfb >= 0.9.16,
    [
      AM_CONDITIONAL(BUILD_ENGINE_DIRECTFB, true)
      AC_DEFINE(BUILD_ENGINE_DIRECTFB, 1, [DirectFB Rendering Backend])
      ENGINE_DIRECTFB_PRG="evas_directfb_test evas_directfb_window"
    ], [
      AM_CONDITIONAL(BUILD_ENGINE_DIRECTFB, false)
      AC_MSG_RESULT(disabling directfb engine)
    ]
  )
else
  AM_CONDITIONAL(BUILD_ENGINE_DIRECTFB, false)
fi

have_evas_fb="";
ENGINE_FB_PRG="";

AC_MSG_CHECKING(whether fb backend is to be built)

AC_ARG_ENABLE(fb, [  --enable-fb                     enable the FB rendering backend], [
	   if [ test "$enableval" = "yes" ]; then
	     AC_MSG_RESULT(yes)
	     have_evas_fb="yes"
	   else
	     AC_MSG_RESULT(no)
	   fi
	], [
	   AC_MSG_RESULT(yes)
	   have_evas_fb="yes"
	]
)

if test "x$have_evas_fb" = "xyes"; then
  AC_CHECK_HEADER(linux/fb.h,
    [
      AM_CONDITIONAL(BUILD_ENGINE_FB, true)
      AC_DEFINE(BUILD_ENGINE_FB, 1, [Linux FB Rendering Backend])
      ENGINE_FB_PRG="evas_fb_test"
    ], [
      AM_CONDITIONAL(BUILD_ENGINE_FB, false)
      AC_MSG_RESULT(disabling fb engine)
    ]
  )
else
  AM_CONDITIONAL(BUILD_ENGINE_FB, false)
fi

have_evas_buffer="";
ENGINE_BUFFER_PRG="";

AC_MSG_CHECKING(whether buffer backend is to be built)

AC_ARG_ENABLE(buffer, [  --enable-buffer                 enable the Buffer rendering backend], [
	   if [ test "$enableval" = "yes" ]; then
	     AC_MSG_RESULT(yes)
	     have_evas_buffer="yes"
	   else
	     AC_MSG_RESULT(no)
	   fi
	], [
	   AC_MSG_RESULT(yes)
	   have_evas_buffer="yes"
	]
)

if test "x$have_evas_buffer" = "xyes"; then
  AM_CONDITIONAL(BUILD_ENGINE_BUFFER, true)
  AC_DEFINE(BUILD_ENGINE_BUFFER, 1, [Buffer Rendering Backend])
  ENGINE_BUFFER_PRG="evas_buffer_test"
else
  AM_CONDITIONAL(BUILD_ENGINE_BUFFER, false)
fi

have_evas_qtopia="";
ENGINE_SOFTWARE_QTOPIA_PRG="";

AC_MSG_CHECKING(whether software qtopia backend is to be built)

AC_ARG_ENABLE(software-qtopia, [  --enable-software-qtopia     enable the Software Qtopia rendering backend], [
	   if [ test "$enableval" = "yes" ]; then
	     AC_MSG_RESULT(yes)
	     have_evas_qtopia="yes"
	   else
	     AC_MSG_RESULT(no)
	   fi
        ], [
	   AC_MSG_RESULT(yes)
	   have_evas_qtopia="yes"
	]
)

if test "x$have_evas_qtopia" = "xyes"; then
  AC_CHECK_HEADER(qdirectpainter_qws.h,
    [
      AM_CONDITIONAL(BUILD_ENGINE_SOFTWARE_QTOPIA, test "$enableval" = "yes")
      AC_DEFINE(BUILD_ENGINE_SOFTWARE_QTOPIA, 1, [Qtopia Rendering Backend])
      qt_cflags="-fno-exceptions -fno-rtti -I"$qt_dir"/include"
      qt_libs="-L"$qt_dir"/lib -lqte -lqpe"
      qt_moc=$qt_dir"/bin/moc"
      ENGINE_SOFTWARE_QTOPIA_PRG="evas_software_qtopia_test"
    ], [
      AM_CONDITIONAL(BUILD_ENGINE_SOFTWARE_QTOPIA, false)
      AC_MSG_RESULT(disabling qtopia engine)
    ],
    [
      #include <qwidget.h>
      #include <qnamespace.h>
      #include <qbrush.h>
      #include <qpainter.h>
    ]
  )
else
  AM_CONDITIONAL(BUILD_ENGINE_SOFTWARE_QTOPIA, false)
fi

have_evas_gl_x11="";
ENGINE_GL_X11_PRG="";

AC_MSG_CHECKING(whether gl x11 backend is to be built)

AC_ARG_ENABLE(gl-x11, [  --enable-gl-x11              enable the OpenGL X11 display engine], [
	   if [ test "$enableval" = "yes" ]; then
	     AC_MSG_RESULT(yes)
	     have_evas_gl_x11="yes"
	   else
	     AC_MSG_RESULT(no)
	   fi
        ], [
	   AC_MSG_RESULT(yes)
	   have_evas_gl_x11="yes"
	]
)

if test "x$have_evas_gl_x11" = "xyes"; then
  AC_CHECK_HEADER(GL/gl.h,
    [
      AC_CHECK_HEADER(X11/X.h,
        [
          AM_CONDITIONAL(BUILD_ENGINE_GL_X11, true)
	  AC_DEFINE(BUILD_ENGINE_GL_X11, 1, [OpenGL X11 Rendering Backend])
	  AM_CONDITIONAL(BUILD_ENGINE_GL_COMMON, true)
	  AC_DEFINE(BUILD_ENGINE_GL_COMMON, 1, [Generic OpenGL Rendering Support])
	  x_dir="/usr/X11R6";
	  x_cflags="-I"$x_dir"/include"
	  x_libs="-L"$x_dir"/lib -lX11 -lXext"
	  gl_cflags="-I/usr/include"
	  gl_libs="-L/usr/lib -lGL -lGLU -lpthread"
	  gl_dir=""
	  ENGINE_GL_X11_PRG="evas_gl_x11_test"
        ], [
          AM_CONDITIONAL(BUILD_ENGINE_GL_X11, false)
          AM_CONDITIONAL(BUILD_ENGINE_GL_COMMON, false)
          AC_MSG_RESULT(disabling GL X11 engine)
        ]
      )
    ], [
      AM_CONDITIONAL(BUILD_ENGINE_GL_X11, false)
      AM_CONDITIONAL(BUILD_ENGINE_GL_COMMON, false)
      AC_MSG_RESULT(disabling GL X11 engine)
    ]
  )
else
  AM_CONDITIONAL(BUILD_ENGINE_GL_X11, false)
  AM_CONDITIONAL(BUILD_ENGINE_GL_COMMON, false)
fi

########### image loaders

have_png="";

AC_MSG_CHECKING(whether to enable png image loader)

AC_ARG_ENABLE(image-loader-png, 
  [  --enable-image-loader-png       enable png image loader], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
	have_png="yes"
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      have_png="yes"
  ]
)

if test "x$have_png" = "xyes"; then
  AC_CHECK_LIB(png, png_access_version_number,
    [
      AC_DEFINE(BUILD_LOADER_PNG, 1, [PNG Image Loader Support])
      png_cflags=""
      png_libs="-lpng -lz"
    ]
  )
fi

have_jpeg="";

AC_MSG_CHECKING(whether to enable jpeg image loader)

AC_ARG_ENABLE(image-loader-jpeg, 
  [  --enable-image-loader-jpeg      enable jpeg image loader], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        have_jpeg="yes"
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      have_jpeg="yes"
  ]
)

if test "x$have_jpeg" = "xyes"; then
  AC_CHECK_LIB(jpeg, jpeg_set_quality,
    [
      AC_DEFINE(BUILD_LOADER_JPEG, 1, [JPEG Image Loader Support])
      jpeg_cflags=""
      jpeg_libs="-ljpeg"
    ]
  )
fi

have_eet="";

AC_MSG_CHECKING(whether to enable eet image loader)

AC_ARG_ENABLE(image-loader-eet, 
  [  --enable-image-loader-eet       enable eet image loader], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
	have_eet="yes"
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      have_eet="yes"
  ]
)

if test "x$have_eet" = "xyes"; then
  AC_CHECK_LIB(eet, eet_open,
    [
      AC_DEFINE(BUILD_LOADER_EET, 1, [EET Loader Support])
      eet_cflags=`eet-config --cflags`
      eet_libs=`eet-config --libs`
    ]
  )
fi

have_edb="";

AC_MSG_CHECKING(whether to enable edb image loader)

AC_ARG_ENABLE(image-loader-edb, 
  [  --enable-image-loader-edb       enable edb image loader], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        have_edb="yes"
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      have_edb="yes"
  ]
)

if test "x$have_edb" = "xyes"; then
  AC_CHECK_LIB(edb, e_db_open,
    [
      AC_DEFINE(BUILD_LOADER_EDB, 1, [EDB Loader Support])
      edb_cflags=`edb-config --cflags`
      edb_libs=`edb-config --libs`" -lz"
    ]
  )
fi

########### dither mask

AC_MSG_CHECKING(whether to build small dither mask code)

AC_ARG_ENABLE(small-dither-mask, 
  [  --enable-small-dither-mask      enable small dither mask code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
      	AC_DEFINE(BUILD_SMALL_DITHER_MASK, 1, [Small Dither Mask Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_SMALL_DITHER_MASK, 1, [Small Dither Mask Support])
  ]
)

########### hard coded cpu assumptions

AC_MSG_CHECKING(whether to build code assuming a pentium2/amd and up)

AC_ARG_ENABLE(cpu-p2-only, 
  [  --enable-cpu-p2-only            enable assumption of pentium2/amd cpu], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(HARD_CODED_P2, 1, [Assume Pentium II/AMD K6 or higher CPU])
      else
        AC_MSG_RESULT(no)
      fi
  ], AC_MSG_RESULT(no)
)

AC_MSG_CHECKING(whether to build code assuming a pentium3 and up)

AC_ARG_ENABLE(cpu-p3-only, 
  [  --enable-cpu-p3-only            enable assumption of pentium3 and up cpu], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(HARD_CODED_P3, 1, [Assume Pentium III or higher CPU])
      else
        AC_MSG_RESULT(no)
      fi
  ], AC_MSG_RESULT(no)
)

########### cpu modes

AC_MSG_CHECKING(whether to build mmx code)

AC_ARG_ENABLE(cpu-mmx, 
  [  --enable-cpu-mmx                enable mmx code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_MMX, 1, [Build MMX Code])
      else
        AC_MSG_RESULT(no)
      fi
  ], AC_MSG_RESULT(no)
)

AC_MSG_CHECKING(whether to build sse code)

AC_ARG_ENABLE(cpu-sse, 
  [  --enable-cpu-sse                enable sse code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_SSE, 1, [Build SSE Code])
      else
        AC_MSG_RESULT(no)
      fi
  ], AC_MSG_RESULT(no)
)

altivec_cflags=""
altivec_libs=""

AC_MSG_CHECKING(whether to build altivec code)

AC_ARG_ENABLE(cpu-altivec, 
  [  --enable-cpu-altivec                enable altivec code], [
     if [ test "$enableval" = "yes" ]; then
        have_altivec="yes"
        AC_MSG_RESULT(yes)
     else
        AC_MSG_RESULT(no)
     fi
  ], AC_MSG_RESULT(no)
)

if test "x$have_altivec" = "xyes"; then
   AC_CHECK_HEADER(altivec.h,
     [
        altivec_libs="-laltivec"
        AC_DEFINE(BUILD_ALTIVEC, 1, [Build Altivec Code])
     ]
   )
fi

if test "x$have_altivec" = "xyes"; then
   AC_MSG_CHECKING(whether to use altivec compiler flag)
   if test $GCC = yes; then
      if echo "int main(){ return 0;}" | gcc -faltivec -E - > /dev/null 2>&1; then
         AC_MSG_RESULT(yes)
         altivec_cflags="-faltivec"
         AC_DEFINE(BUILD_ALTIVEC, 1, [Build Altivec Code])
      else
         AC_MSG_RESULT(no)
      fi
   else
      AC_MSG_RESULT(no)
   fi
fi

AC_MSG_CHECKING(whether to build c code)

AC_ARG_ENABLE(cpu-c, 
  [  --enable-cpu-c                  enable C code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_C, 1, [Build plain C code])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_C, 1, [Build plain C code])
  ]
)

########### scaling modes

AC_MSG_CHECKING(whether to build sampling scaler)

AC_ARG_ENABLE(scale-sample, 
  [  --enable-scale-sample           enable sampling scaler code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_SCALE_SAMPLE, 1, [Sampling Scaler Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_SCALE_SAMPLE, 1, [Sampling Scaler Support])
  ]
)

AC_MSG_CHECKING(whether to build smooth scaler)

AC_ARG_ENABLE(scale-smooth, 
  [  --enable-scale-smooth           enable smooth scaler code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_SCALE_SMOOTH, 1, [Smooth Scaler Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_SCALE_SMOOTH, 1, [Smooth Scaler Support])
  ]
)

# AC_MSG_CHECKING(whether to build tri-linear scaler)

# AC_ARG_ENABLE(scale-trilinear, 
#  [  --enable-scale-trilinear        enable tri-linear scaler code], [
#      if [ test "$enableval" = "yes" ]; then
#        AC_MSG_RESULT(yes)
#        AC_DEFINE(BUILD_SCALE_TRILINEAR, 1, [Tri-linear Scaler Support])
#      else
#        AC_MSG_RESULT(no)
#      fi
#  ], [
#      AC_MSG_RESULT(yes)
#      AC_DEFINE(BUILD_SCALE_TRILINEAR, 1, [Tri-linear Scaler Support])
#  ]
#)

########### converter modes 

AC_MSG_CHECKING(whether to build 8bpp 332 converter code)

AC_ARG_ENABLE(convert-8-rgb-332, 
  [  --enable-convert-8-rgb-332      enable 8bpp 332 converter code], [
      if [ test "$enableval" = "yes" ]; then
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_8_RGB_332, 1, [8bpp 332 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_8_RGB_332, 1, [8bpp 332 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 8bpp 332 converter code)

AC_ARG_ENABLE(convert-8-rgb-666, 
  [  --enable-convert-8-rgb-666      enable 8bpp 666 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_8_RGB_666, 1, [8bpp 666 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_8_RGB_666, 1, [8bpp 666 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 8bpp 232 converter code)

AC_ARG_ENABLE(convert-8-rgb-232, 
  [  --enable-convert-8-rgb-232      enable 8bpp 232 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_8_RGB_232, 1, [8bpp 232 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_8_RGB_232, 1, [8bpp 232 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 8bpp 222 converter code)

AC_ARG_ENABLE(convert-8-rgb-222, 
  [  --enable-convert-8-rgb-222      enable 8bpp 222 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_8_RGB_222, 1, [8bpp 222 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_8_RGB_222, 1, [8bpp 222 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 8bpp 221 converter code)

AC_ARG_ENABLE(convert-8-rgb-221, 
  [  --enable-convert-8-rgb-221      enable 8bpp 221 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_8_RGB_221, 1, [8bpp 221 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_8_RGB_221, 1, [8bpp 221 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 8bpp 111 converter code)

AC_ARG_ENABLE(convert-8-rgb-111, 
  [  --enable-convert-8-rgb-111      enable 8bpp 111 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_8_RGB_111, 1, [8bpp 111 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_8_RGB_111, 1, [8bpp 111 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 16bpp 565 converter code)

AC_ARG_ENABLE(convert-16-rgb-565, 
  [  --enable-convert-16-rgb-565     enable 16bpp 565 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_565, 1, [16bpp 565 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_16_RGB_565, 1, [16bpp 565 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 16bpp 555 converter code)

AC_ARG_ENABLE(convert-16-rgb-555, 
  [  --enable-convert-16-rgb-555     enable 16bpp 555 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_555, 1, [16bpp 555 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_16_RGB_555, 1, [16bpp 555 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 16bpp 444 converter code)

AC_ARG_ENABLE(convert-16-rgb-444, 
  [  --enable-convert-16-rgb-444     enable 16bpp 444 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_444, 1, [16bpp 444 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_16_RGB_444, 1, [16bpp 444 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 16bpp 565 (444 ipaq) converter code)

AC_ARG_ENABLE(convert-16-rgb-ipq, 
  [  --enable-convert-16-rgb-ipq     enable 16bpp 565 (444 ipaq) converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_454645, 1, [16bpp 565 (444 ipaq) Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_16_RGB_454645, 1, [16bpp 565 (444 ipaq) Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 16bpp rotation 0 converter code)

AC_ARG_ENABLE(convert-16-rgb-rot-0, 
  [  --enable-convert-16-rgb-rot-0   enable 16bpp rotation 0 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_ROT0, 1, [16bpp Rotation 0 Converter Code])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_16_RGB_ROT0, 1, [16bpp Rotation 0 Converter Code])
  ]
)

AC_MSG_CHECKING(whether to build 16bpp rotation 270 converter code)

AC_ARG_ENABLE(convert-16-rgb-rot-270, 
  [  --enable-convert-16-rgb-rot-270 enable 16bpp rotation 270 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_ROT270, 1, [16bpp Rotation 270 Converter Code])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_16_RGB_ROT270, 1, [16bpp Rotation 270 Converter Code])
  ]
)

AC_MSG_CHECKING(whether to build 16bpp rotation 90 converter code)

AC_ARG_ENABLE(convert-16-rgb-rot-90, 
  [  --enable-convert-16-rgb-rot-90  enable 16bpp rotation 90 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_16_RGB_ROT90, 1, [16bpp Rotation 90 Converter Code])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_16_RGB_ROT90, 1, [16bpp Rotation 90 Converter Code])
  ]
)

AC_MSG_CHECKING(whether to build 24bpp 888 rgb converter code)

AC_ARG_ENABLE(convert-24-rgb-888, 
  [  --enable-convert-24-rgb-888     enable 24bpp rgb 888 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_24_RGB_888, 1, [24bpp RGB 888 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_24_RGB_888, 1, [24bpp RGB 888 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 24bpp 888 bgr converter code)

AC_ARG_ENABLE(convert-24-bgr-888, 
  [  --enable-convert-24-bgr-888     enable 24bpp bgr 888 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_24_BGR_888, 1, [24bpp BGR 888 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_24_BGR_888, 1, [24bpp BGR 888 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 32bpp 8888 rgb converter code)

AC_ARG_ENABLE(convert-32-rgb-8888, 
  [  --enable-convert-32-rgb-8888    enable 32bpp rgb 8888 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_RGB_8888, 1, [32bpp RGB 8888 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_32_RGB_8888, 1, [32bpp RGB 8888 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 32bpp 8888 rgbx converter code)

AC_ARG_ENABLE(convert-32-rgbx-8888, 
  [  --enable-convert-32-rgbx-8888    enable 32bpp rgbx 8888 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_RGBX_8888, 1, [32bpp RGBX 8888 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_32_RGBX_8888, 1, [32bpp RBGX 8888 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 32bpp 8888 bgr converter code)

AC_ARG_ENABLE(convert-32-bgr-8888, 
  [  --enable-convert-32-bgr-8888    enable 32bpp bgr 8888 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_BGR_8888, 1, [32bpp BGR 8888 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_32_BGR_8888, 1, [32bpp BGR 8888 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 32bpp 8888 bgrx converter code)

AC_ARG_ENABLE(convert-32-bgrx-8888, 
  [  --enable-convert-32-bgrx-8888    enable 32bpp bgrx 8888 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_BGRX_8888, 1, [32bpp BGRX 8888 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_32_BGRX_8888, 1, [32bpp BGRX 8888 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 32bpp rotation 0 converter code)

AC_ARG_ENABLE(convert-32-rgb-rot-0, 
  [  --enable-convert-32-rgb-rot-0   enable 32bpp rotation 0 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_RGB_ROT0, 1, [32bpp Rotation 0 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_32_RGB_ROT0, 1, [32bpp Rotation 0 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 32bpp rotation 270 converter code)

AC_ARG_ENABLE(convert-32-rgb-rot-270, 
  [  --enable-convert-32-rgb-rot-270 enable 32bpp rotation 270 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_RGB_ROT270, 1, [32bpp Rotation 270 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_32_RGB_ROT270, 1, [32bpp Rotation 270 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build 32bpp rotation 90 converter code)

AC_ARG_ENABLE(convert-32-rgb-rot-90, 
  [  --enable-convert-32-rgb-rot-90 enable 32bpp rotation 90 converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_32_RGB_ROT90, 1, [32bpp Rotation 90 Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_32_RGB_ROT90, 1, [32bpp Rotation 90 Converter Support])
  ]
)

AC_MSG_CHECKING(whether to build yuv converter code)

AC_ARG_ENABLE(convert-yuv, 
  [  --enable-convert-yuv enable yuv converter code], [
      if [ test "$enableval" = "yes" ]; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(BUILD_CONVERT_YUV, 1, [YUV Converter Support])
      else
        AC_MSG_RESULT(no)
      fi
  ], [
      AC_MSG_RESULT(yes)
      AC_DEFINE(BUILD_CONVERT_YUV, 1, [YUV Converter Support])
  ]
)



AC_SUBST(freetype_cflags)
AC_SUBST(freetype_libs)

AC_SUBST(x_cflags)
AC_SUBST(x_libs)

AC_SUBST(gl_cflags)
AC_SUBST(gl_libs)

AC_SUBST(qt_cflags)
AC_SUBST(qt_libs)
AC_SUBST(qt_moc)

AC_SUBST(png_cflags)
AC_SUBST(png_libs)
AC_SUBST(jpeg_cflags)
AC_SUBST(jpeg_libs)
AC_SUBST(eet_cflags)
AC_SUBST(eet_libs)
AC_SUBST(edb_cflags)
AC_SUBST(edb_libs)

dnl Build the list of required libs for evas.pc.in. Only works for libs
dnl which install a .pc file of course
if test "x$eet_libs" != "x"; then
	requirements=eet
fi
if test "x$edb_libs" != "x"; then
	requirements="$requirements edb"
fi
if test "x$png_libs" != "x"; then
	requirements="$requirements libpng12"
fi
AC_SUBST(requirements)

AC_SUBST(ENGINE_SOFTWARE_X11_PRG)
AC_SUBST(ENGINE_DIRECTFB_PRG)
AC_SUBST(ENGINE_FB_PRG)
AC_SUBST(ENGINE_BUFFER_PRG)
AC_SUBST(ENGINE_SOFTWARE_QTOPIA_PRG)
AC_SUBST(ENGINE_GL_X11_PRG)

AC_SUBST(altivec_cflags)

AC_OUTPUT([
Makefile
src/Makefile
src/bin/Makefile
src/bin/evas_software_win32/Makefile
src/lib/Makefile
src/lib/canvas/Makefile
src/lib/data/Makefile
src/lib/file/Makefile
src/lib/engines/Makefile
src/lib/engines/common/Makefile
src/lib/engines/software_x11/Makefile
src/lib/engines/fb/Makefile
src/lib/engines/buffer/Makefile
src/lib/engines/software_win32_gdi/Makefile
src/lib/engines/software_qtopia/Makefile
src/lib/engines/directfb/Makefile
src/lib/engines/gl_common/Makefile
src/lib/engines/gl_x11/Makefile
src/lib/include/Makefile
proj/Makefile
proj/win32_gdi/Makefile
evas-config
evas.pc
],[
chmod +x evas-config
touch evas_docs.tar.gz
])

