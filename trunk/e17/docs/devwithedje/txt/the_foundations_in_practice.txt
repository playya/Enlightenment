By pointing out that the Enlightenment Foundation Libraries are designed in a 
Object Oriented manner I wish not to raise the wrath of OO purists but to 
simplify the mental image of the structure of the EFL C API in the reader's 
imagination.

Now that the pitchforks are back in the barn allow me to put it in more clear 
terms with a simple example::

    Evas_Object *button = NULL;
    button = edje_object_add(evascanvas);
    edje_object_file_set(button, "theme.edj", "button");
          
This is a simple C snippet that could be translated into a more (sintactically 
speaking) object oriented language like Python as::
          
    button = Evas_Object()
    button.file_set("theme.edj","button")
          
The differences between the code snippets could be written off as "sintactic 
sugar" but it serves to demonstrate the structure which the EFL C API follows. 
If we dissected the last function call we could split it into three groups. 
First, the class of the object to manipulate, ``edje_object``, second, the 
method to call ``file_set`` and third the pointer to the object instance 
``(button,`` along with the parameters ``"theme.edj","button")`` or, in more 
generic terms, ``class_method(instance,parameters)``.

The first source snippet in the following tutorial is, of course, the first 
exception. The following function calls deal with the library itself. Anyway, 
displaying a simple Edje object in a window is a task with a few well defined 
steps that begin by initializing the necessary libraries::

    #include <stdlib.h>
    #include <stdio.h>
    #include <Evas.h>
    #include <Ecore.h>
    #include <Ecore_Evas.h>
    
    int main() {
        if (!ecore_init()) return EXIT_FAILURE;
        if (!ecore_evas_init()) return EXIT_FAILURE;
        ...

All initialize-able Enlightenment Foundation Libraries do so in the format 
``library_name_init()``. Both Ecore and Ecore_Evas need to be initialized 
before being used and both will return success or failure using standard C 
values (0 is failure, any other number is success), hence the ``if``.

This would be a good moment to note that the assembled, and commented, version 
of the source code of these examples can be found in CVS repository of the
Enlightenment project: ``docs/devwithedje/src``

In order to render a canvas its necessary to create a canvas wrapper that will
host it and to store a pointer to it for future reference::

    ...
    Ecore_Evas  *ecore_evas = NULL;
    ...
    ecore_evas = ecore_evas_software_x11_new(NULL, 0, 0, 0, 800, 600);
    if (!ecore_evas) return EXIT_FAILURE;
    ...

While the software_x11 engine is being used in this example, its possible to 
use any other supported engine by simply changing the second line to 
``ecore_evas_enginename_new()``. A list of supported engines and their 
parameters can be found in the Official API reference.

Once the canvas wrapper has been setup we need to change its state to visible::

    ...
    ecore_evas_title_set(ecore_evas, "Example Application");
    ecore_evas_name_class_set(ecore_evas, "testapp", "Testapp");
    ecore_evas_show(ecore_evas);
    ...

While the first two lines are optional, it is useful to see the way we set the 
title name and class of the window that will host our canvas. The third 
function sets the given canvas wrapper to visible, this can be reversed later 
with ``ecore_evas_hide()``.

The canvas wrapper is ready to go, but the actual canvas that will be use to 
draw our Edje objects is nowhere to be found::

    ...
    Evas *evas = NULL;
    ...
    evas = ecore_evas_get(ecore_evas);
    ...

The function ecore_evas_get() returns a pointer to the canvas housed in the 
canvas wrapper, this is the pointer we need in order to include our Edje 
objects later.

The execution loop for the program can also be conveniently handled by Ecore::

    ...
    ecore_main_loop_begin();
    ...
          
Once ecore_main_loop_begin(..) has been called, both the canvas wrapper and 
the canvas itself will be drawn in their current state (a 800x600px empty 
window in this case). Ecore will continue to loop until an event handled by it
occurs.
      
Once the execution of the main loop has finished it's a good practice to shut 
down any library we initiated::

        ...
        ecore_evas_shutdown();
        ecore_shutdown();
    }
    ...