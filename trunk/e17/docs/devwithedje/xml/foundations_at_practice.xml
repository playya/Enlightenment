<chapter>
    <title>The foundations at practice</title>

    <para>By pointing out that the Enlightenment Foundation Libraries are
          designed in a Object Oriented manner I wish not to raise the wrath of
          OO purists but to ease illustration of the EFL C API design.</para>

    <para>Now that the pitchforks are back in the barn allow me to put it in
          more clear terms with a simple example:
        
          <programlisting role="C">
    Evas_Object *button = NULL;
    button = edje_object_add(evascanvas);
    edje_object_file_set(button, "theme.edj", "button");
          </programlisting>
          
          This is a simple C snippet that could be translated into a more
          object oriented language (sintactically speaking) like Python as:
          
          <programlisting role="Python">
    button = Evas_Object()
    button.file_set("theme.edj","button")
          </programlisting>
          
          The differences between the code snippets could be written off as
          "sintactic sugar" it serves to demonstrate the structure which the
          EFL C API follows. If we dissected the last function call we could
          split it into three groups. First, the class of the object to
          manipulate, <code>edje_object</code>, second, the method to call
          <code>file_set</code> and third the pointer to the object instance
          <code>(button,</code> along with the parameters <code>"theme.edj","button")</code>
          . In more generic terms: <code>class_method(instance,parameters)</code>.</para>

    <para>The first source snippet in the following tutorial is, of course, the
          first exception. The following function calls deal with the library
          itself. Anyway, displaying a simple Edje object in a window
          is a task with a few well defined steps that begin by initializing
          the necessary libraries:

          <programlisting role="C">
    #include &lt;stdlib.h&gt;
    #include &lt;stdio.h&gt;
    #include &lt;Evas.h&gt;
    #include &lt;Ecore.h&gt;
    #include &lt;Ecore_Evas.h&gt;
    
    int main() {
        if (!ecore_init()) return EXIT_FAILURE;
        if (!ecore_evas_init()) return EXIT_FAILURE;
        ..
          </programlisting>

          All initialize-able Enlightenment Foundation Libraries do so in the
          format <code>library_name_init()</code>. Both Ecore and Ecore_Evas need
          to be initialized before being used and both will return success or
          failure using standard C values (0 is failure, any other number is
          success), hence the <code>if</code>.</para>

    <para>In order to render a canvas its necessary to create a canvas wrapper
          that will host it and to store a pointer to it for future reference:

          <programlisting role="C">
    ...
    Ecore_Evas  *ecore_evas = NULL;
    ...
    ecore_evas = ecore_evas_software_x11_new(NULL, 0, 0, 0, 800, 600);
    if (!ecore_evas) return EXIT_FAILURE;
    ...
          </programlisting>

          While the software_x11 engine is being used in this example, its
          possible to use any other supported engine by simply changing the
          second line to <code>ecore_evas_enginename_new()</code>. A list of
          supported engines and their parameters can be found in the Official
          API reference.</para>

    <para>Once the canvas wrapper has been setup we need to change its state to
          visible:

          <programlisting role="C">
    ...
    ecore_evas_title_set(ecore_evas, "Example Application");
    ecore_evas_name_class_set(ecore_evas, "testapp", "Testapp");
    ecore_evas_show(ecore_evas);
    ...
          </programlisting>

          While the first two lines are optional, it is useful to see the way
          we set the title name and class of the window that will host our
          canvas. The third function sets the given canvas wrapper to visible,
          this can be reversed later with <code>ecore_evas_hide()</code>.</para>

    <para>The canvas wrapper is ready to go, but the actual canvas that will be
          use to draw our Edje objects is nowhere to be found:

          <programlisting role="C">
    ...
    Evas *evas = NULL;
    ...
    evas = ecore_evas_get(ecore_evas);
    ...
          </programlisting>

          The function ecore_evas_get() returns a pointer to the canvas
          housed in the canvas wrapper, this is the pointer we need in order to
          include our Edje objects later.</para>

    <para>The execution loop for the program can also be conveniently handled
          by Ecore:

          <programlisting role="C">
    ...
    ecore_main_loop_begin();
    ...
          </programlisting>
          
      Once ecore_main_loop_begin(..) has been called, both the canvas wrapper
      and the canvas itself will be drawn in their current state (a 800x600px
      empty window in this case). Ecore will continue to loop until an event
      handled by it occurs.</para>
      
      <para>Once the execution of the main loop has finished it's a good practice to shut down any library we initiated:
            <programlisting role="C">
    ...
    ecore_evas_shutdown();
    ecore_shutdown();
    }
    ...
            </programlisting>
      </para>

    &working_with_the_canvas;
    &interacting_with_the_objects;

    <section>
        <title>Assembled Example</title>

        <para>The following code can be compiled with the <code>gcc -o example `pkg-config --cflags --libs evas ecore-evas edje` example.c</code>
              command.</para>
            
<!--         <example> -->
<!--             <title>Basic application code</title> -->
            <programlisting><xi:include  href="src/api_basics.c"  parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
<!--         </example> -->

        <para>This is the EDC source code, you don't need to use it for the
              examples as long as you provide the app with a compilant theme
              file. Theme files are compiled with <code>edje_cc testfile.edc</code>
              .</para>

<!--         <example> -->
<!--             <title>Basic theme code</title> -->
            <programlisting><xi:include  href="src/api_basics.edc"  parse="text" xmlns:xi="http://www.w3.org/2001/XInclude" /></programlisting>
<!--         </example>  -->
        
    </section>
    
</chapter>