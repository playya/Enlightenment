<section>
<sectioninfo>
  <author>
    <firstname>Ben</firstname>
    <surname>Rockwood</surname>
    <email>benr@cuddletech.com</email>
    <othername>'technikolor'</othername>
  </author>
  <date>29 July 2004</date>
</sectioninfo>

<title>Receta: Una plantilla para crear aplicaciones Edje</title>

<para>
El siguiente ejemplo es una plantilla que puede ser usada para iniciar r&#225;pida y f&#225;cilmente una aplicaci&#243;n 
Edja. Se parece a la plantilla encontrada en el cap&#237;tulo Evas, dado que esta tambien usa Ecore_Evas.
</para>

<example>
<title>Plantilla Edje</title>
<programlisting>
#include &lt;Ecore_Evas.h&gt;
#include &lt;Ecore.h&gt;
#include &lt;Edje.h&gt;

#define WIDTH 100
#define HEIGHT 100

int app_signal_exit(void *data, int type, void *event);

        /* GLOBALS */
        Ecore_Evas  *   ee;
        Evas        *   evas;
        Evas_Object *   edje;

        Evas_Coord   edje_w, edje_h;
                                
                                
int main(int argv, char *argc[]){
                                
        ecore_init();           
        ecore_event_handler_add(ECORE_EVENT_SIGNAL_EXIT, app_signal_exit, NULL);
                                
        ecore_evas_init();      
                                
   ee = ecore_evas_software_x11_new(NULL, 0,  0, 0, WIDTH, HEIGHT);
        ecore_evas_title_set(ee, "TITLE");
        ecore_evas_borderless_set(ee, 0);
        ecore_evas_shaped_set(ee, 0);
        ecore_evas_show(ee);    
                                
                                
   evas = ecore_evas_get(ee);   
        evas_font_path_append(evas, "edje/fonts/");
                                
        edje_init();            
   edje = edje_object_add(evas);
        edje_object_file_set(edje, "edje/XXX.eet", "XXX");
        evas_object_move(edje, 0, 0);
        edje_object_size_min_get(edje, &amp;edje_w, &amp;edje_h);
        evas_object_resize(edje, edje_w, edje_h);
        evas_object_show(edje); 
                                
        ecore_evas_resize(ee, (int)edje_w, (int)edje_h);
        ecore_evas_show(ee);    
                                
	/* Insert Objects and callbacks here */
                                
        ecore_main_loop_begin();
                                
        return 0;               
}                               
                                
                                
int app_signal_exit(void *data, int type, void *event){

        printf("DEBUG: Exit called, shutting down\n");
        ecore_main_loop_quit();
        return 1;
}
</programlisting>
</example>

<para>
Compilar esta plantilla de la siguiente manera:
</para>

<programlisting>
 gcc `edje-config --cflags --libs` `ecore-config --cflags --libs` edje_app.c -o edje_app
</programlisting>

<para>
Las llamadas importantes a las que mirrar estan contenidas en el bloque Edje, siguiendo a <function>edje_init()</function>.
</para>

<para>
<function>edje_object_file_set()</function> define que EET Edje es usada as&#237; como el nombre de la colecci&#243;n a usar.
</para>

<para>
El resto de funciones Edje/Evas son necesitadas para redimensionar la ventana X11 que acomoda tu Edje.
Empezamos moviendo la ventana Evas y adquiriendo el tama&#241;o m&#237;nimo del propio Edje usando <function>edje_object_size_min_get()</function>.
Usando entonces  <function>evas_object_resize()</function> podemos redimensionar el Edje, el cual es en realidad
un objeto Evas, al tama&#241;o del propio Evas. Tras esto podemos mostrar el Edje y entonces redimensionar el 
propio Evas ( y gracias a Ecore la ventana tambien ) usando <function>ecore_evas_resize()</function>.
</para>

<para>
Mas all&#225; de esto callbacks pueden ser vinculadas a tu interfaz.
</para>




</section>

