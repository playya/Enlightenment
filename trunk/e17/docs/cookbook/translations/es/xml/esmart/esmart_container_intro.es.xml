<!--
#######################################################
A simple recipe on using esmart containers
#######################################################
-->
<section>
<sectioninfo>
  <author>
    <firstname>dan</firstname>
    <surname>sinclair</surname>
    <email>zero@perplexity.org</email>
    <othername>'dj2'</othername>
  </author>
  <date>30 April 2004</date>
</sectioninfo>

<title>Receta: Introducci&#243;n al contenedor Esmart</title>

<para>
Usualmente mientras se dise&#241;a el UI de una aplicaci&#243;n hay un deseo de agrupar elementos comunes juntos y hacer 
que su colocaci&#243;n dependa el uno del otro. Con este objeto la librer&#237;a Esmart Container ha sido creada. Ha sido 
dise&#241;ada para manejar las partes dificiles de la colocaci&#243;n, y en casos donde no hace lo que necesitas, las 
porciones de colocaci&#243;n del contenedor son extensibles y cambiables.
</para>

<para>
Esta receta dar&#225; la base de usar un container Esmart. El producto final es un programa que te permitir&#225; ver 
algunas de las diferentes combinaciones de disposici&#243;n del container por defecto. La colocaci&#243;n ser&#225; hecha por 
Edje con callbacks al programa para cambiar la disposici&#243;n del contenedor, y para decir si el usuario puls&#243; en 
un elemento del container.
</para>

<example>
<title>Includes y declaraciones</title>
<programlisting>
#include &lt;Ecore.h&gt;
#include &lt;Ecore_Evas.h&gt;
#include &lt;Edje.h&gt;
#include &lt;Esmart/Esmart_Container.h&gt;
#include &lt;getopt.h&gt;

static void make_gui(const char *theme);
static void container_build(int align, int direction, int fill);
static void _set_text(int align, int direction);
static void _setup_edje_callbacks(Evas_Object *o);
static void _right_click_cb(void* data, Evas_Object* o, const char* emmission,
                                                            const char* source);
static void _left_click_cb(void* data, Evas_Object* o, const char* emmission,
                                                            const char* source);
static void _item_selected(void* data, Evas_Object* o, const char* emmission,
                                                            const char* source);

static Ecore_Evas *ee;
static Evas_Object *edje;
static Evas_Object *container;

char *str_list[] = {"item 1", "item 2",
                    "item 3", "item 4",
                    "item 5"};
</programlisting>
</example>
<para>
Como con otros programas EFL necesitamos incluir Ecore, Ecore?Evas, Edje y dado que este es un 
ejemplo de contenedor, la cabecera de Esmart/Esmart_Container. Getopt ser&#225; usado para permitir alg&#250;n 
procesado de la l&#237;nea de comandos.
</para>

<para>
Despues vienen los prototipos de funciones que ser&#225;n descritas mas tarde cuando lleguemos a sus implementaciones. 
Entonces unas cuantas variables globales que ser&#241;an usadas durante el programa. El array str_list es el contenido 
a ser almacenado en el contenedor.
</para>

<example>
<title>main</title>
<programlisting>
int main(int argc, char ** argv) {
    int align = 0;
    int direction = 0;
    int fill = 0;
    int ret = 0;
    int c;
    char *theme = NULL;

    while((c = getopt(argc, argv, "a:d:f:t:")) != -1) {
        switch(c) {
            case 'a':
                align = atoi(optarg);
                break;

            case 'd':
                direction = atoi(optarg);
                break;

            case 'f':
                fill = atoi(optarg);
                break;

            case 't':
                theme = strdup(optarg);
                break;

            default:
                printf("Unknown option string\n");
                break;
        }
    }

    if (theme == NULL) {
        printf("Need a theme defined\n");
        exit(-1);
    }
</programlisting>
</example>
<para>
El principio de la funci&#243;pn principal extrae las opciones de los argumentos de la linea de comandos e inicia 
la pantalla por defecto. Como puedes ver, requerimos un tema para mostrar. Esto podr&#237;a ser hecho mas inteligente, 
buscando directorios de instalaci&#243;n por defecto y los directorios de aplicaci&#243;n del usuario, pero este ejemplo 
opta por la via facil y fuerza el tema a ser una opci&#243;n de la linea de comandos.
</para>

<example>
<title>Inicializaci&#243;n</title>
<programlisting>
    if (!ecore_init()) {
        printf("Can't init ecore, bad\n");
        ret = 1;
        goto EXIT;
    }
    ecore_app_args_set(argc, (const char **)argv);
    
    if (!ecore_evas_init()) { 
        printf("Can't init ecore_evas, bad\n");
        ret = 1;
        goto EXIT_ECORE;
    }
    
    if (!edje_init()) {
        printf("Can't init edje, bad\n");
        ret = 1;
        goto EXIT_ECORE_EVAS;
    }
    edje_frametime_set(1.0 / 60.0);
    
    make_gui(theme);
    container_build(align, direction, fill);
    
    ecore_main_loop_begin();
</programlisting>
</example>
<para>
Tras recibir los argumentos de la linea de comandos, procedemos a inicializar las librer&#237;as requeridas, Ecore, 
Ecore_Evas y Edje. Tomamos el paso adicional de iniciar el frame rate de Edje.
</para>

<para>
En cuanto la inicializaci&#243;n est&#225; completada creamos el GUI inicial para la aplicaci&#243;n. He separado la construcci&#243;n del 
contenedor en una funci&#243;n separada para hacer el c&#243;digo del contenedor mas facil de localizar en el ejemplo.
</para>

<para>
Cuando todo est&#225; creado llamamos a <function>ecore_main_loop_begin</function> y esperamos a que ocurran eventos.

</para>

<example>
<title>Finalizaci&#243;n</title>
<programlisting>
    edje_shutdown();

EXIT_ECORE_EVAS:
    ecore_evas_shutdown();

EXIT_ECORE:
    ecore_shutdown();

EXIT:
    return ret;
}
</programlisting>
</example>
<para>
La rutina de finalizaci&#243;n habitual, seamos buenos programadores y cerremos todo lo que empezamos.
</para>

<example>
<title>callbacks de ventana</title>
<programlisting>
static int sig_exit_cb(void *data, int ev_type, void *ev) {
    ecore_main_loop_quit();
    return 1;
}

static void win_del_cb(Ecore_Evas *ee) {
    ecore_main_loop_quit();
}

static void win_resize_cb(Ecore_Evas *ee) {
    int w, h;
    int minw, minh;
    int maxw, maxh;
    Evas_Object *o = NULL;

    if (ee) {
        ecore_evas_geometry_get(ee, NULL, NULL, &amp;w, &amp;h);
        ecore_evas_size_min_get(ee, &amp;minw, &amp;minh);
        ecore_evas_size_max_get(ee, &amp;maxw, &amp;maxh);

        if ((w &gt;= minw) &amp;&amp; (h &gt;= minh) &amp;&amp; (h &lt;= maxh) &amp;&amp; (w &lt;= maxw)) {
            if ((o = evas_object_name_find(ecore_evas_get(ee), "edje")))
                evas_object_resize(o, w, h);
        }
    }
}
</programlisting>
</example>
<para>
Lo siguiente iniciamos algunos callbacks gen&#233;ricos para ser usados por el UI. Estos ser&#225;n los callbacks de 
exit, destroy y resize. De nuevo, las funciones habituales EFL. Aunque el callback de salida no es estrictamente 
necesario dado que Ecore llamar&#225; a <function>ecore_main_loop_quit()</function> si no hay ningun manejador 
registrado para este callback.
</para>

<example>
<title>make_gui</title>
<programlisting>
static void make_gui(const char *theme) {
    Evas *evas = NULL;
    Evas_Object *o = NULL;
    Evas_Coord minw, minh;

    ee = NULL;
    edje = NULL;
    container = NULL;

    ecore_event_handler_add(ECORE_EVENT_SIGNAL_EXIT, sig_exit_cb, NULL);

    ee = ecore_evas_software_x11_new(NULL, 0, 0, 0, 300, 400);
    ecore_evas_title_set(ee, "Container Example");

    ecore_evas_callback_delete_request_set(ee, win_del_cb);
    ecore_evas_callback_resize_set(ee, win_resize_cb);
    evas = ecore_evas_get(ee);
    
    // create the edje
    edje = edje_object_add(evas);
    evas_object_move(edje, 0, 0);
    
    if (edje_object_file_set(edje, theme, "container_ex")) {
        evas_object_name_set(edje, "edje");
        
        edje_object_size_min_get(edje, &amp;minw, &amp;minh);
        ecore_evas_size_min_set(ee, (int)minw, (int)minh);
        evas_object_resize(edje, (int)minw, (int)minh);
        ecore_evas_resize(ee, (int)minw, (int)minh);
        
        edje_object_size_max_get(edje, &amp;minw, &amp;minh);
        ecore_evas_size_max_set(ee, (int)minw, (int)minh);
        evas_object_show(edje);
    
    } else {
        printf("Unable to open (%s) for edje theme\n", theme);
        exit(-1);
    }
    _setup_edje_callbacks(edje);
    ecore_evas_show(ee);
}
</programlisting>
</example>
<para>
El GUI consiste del Ecore_Evas que contiene el propio canvas, y el Edje que usaremos para controlar nuestra disposici&#243;n.
La funci&#243;n <function>make_gui</function> inicia los callbacks definidos mas arriba y crea el Ecore_Evas.
</para>

<para>
En cuanto tenemos el Evas y los callbacks est&#225;n definidos, creamos el objeto Edje que definir&#225; nuestra colocaci&#243;n. 
La llamada a <function>edje_object_add</function> es usada para crear el objeto en el Evas, y cuando eso ha 
sido hecho, tomamos el tema pasado por el usuario y configuramos Edje para usar dicho tema, el par&#225;metro 
&quot;container_ex&quot; es el nombre del grupo dentro del EET que hemos de usar. 
</para>

<para>
Una vez el archivo de tema es en el Edje, usamos los valores en el archivo de tema para iniciar los rangos 
de tama&#241;o de la aplicaci&#243;n, y mostramos el Edje. Entonces iniciamos los callbacks en el Edje y ense&#241;amos el Ecore_Evas. 
</para>

<example>
<title>Callbacks Edje</title>
<programlisting>
static void _setup_edje_callbacks(Evas_Object *o) {
    edje_object_signal_callback_add(o, "left_click", 
                        "left_click", _left_click_cb, NULL);
    edje_object_signal_callback_add(o, "right_click", 
                        "right_click", _right_click_cb, NULL);
}
</programlisting>
</example>
<para>
El programa tendr&#225; dos callbacks principales conectados al Edje, uno para la se&#241;al de pulsaci&#243;n de bot&#243;n 
izquierdo y otro para la se&#241;al del derecho. Estos ser&#225;n usados para cambiar la direcci&#243;n/alineaci&#243;n del 
contenedor. Los par&#225;metros segundo y tercero de los callbacks necesitan encajar con los datos emitidos con 
la se&#241;al desde Edje, esto ser&#225; visto mas tarde cuando miremos el archivo EDC. El tercer par&#225;metro es la 
funci&#243;n a llamar, y el &#250;ltimo, cualesquiera datos que queramos pasar al callback.
</para>

<example>
<title>container_build</title>
<programlisting>
static void container_build(int align, int direction, int fill_policy) {
    int len = 0;
    int i = 0;
    const char *edjefile = NULL;

    container = esmart_container_new(ecore_evas_get(ee));
    evas_object_name_set(container, "the_container");
    esmart_container_direction_set(container, direction);
    esmart_container_alignment_set(container, align);
    esmart_container_padding_set(container, 1, 1, 1, 1);
    esmart_container_spacing_set(container, 1);
    esmart_container_fill_policy_set(container, fill_policy);

    evas_object_layer_set(container, 0);
    edje_object_part_swallow(edje, "container", container);
</programlisting>
</example>
<para>
La funci&#243;n <function>container_build</function> crear&#225; el contenedor y iniciar&#225; nuestros elementos de datos 
en el container. La creaci&#243;n es lo suficientemente facil con una llamada a <function>esmart_container_new</function>
devolvioendo el Evas_Object que es el contenedor. Una vez el contenedor es creado podemos dar un nombre al container 
para hacer la referencia mas facil.
</para>

<para>
Lo siguiente, iniciamos la direcci&#243;n, que es CONTAINER_DIRECTION_VERTICAL o CONTAINER_DIRECTION_HORIZONTAL 
[o en este caso, un int siendo pasado desde la l&#237;nea de comandos dado que las dos direcciones se traducen a 
1 y 0 respectivamente]. La direcci&#243;n dice al contenedor de que manera ser&#225;n dibujados los elementos.
</para>

<para>
Despues de la direcci&#243;n iniciamos la alineaci&#243;n del contenedor. La alineaci&#243;n dice al container donde dibujar los 
elementos. Los valores posibles son: CONTAINER_ALIGN_CENTER, CONTAINER_ALIGN_LEFT,
CONTAINER_ALIGN_RIGHT, CONTAINER_ALIGN_TOP and CONTAINER_ALIGN_BOTTOM. Con la colocaci&#243;n por defecto, derecha e 
izquierda se aplican solo a un contenedor vertical, y arriba y abajo se aplican solo a un contenedor 
horizontal, aunque centro se aplica a ambos.
</para>

<para>
Si quisieramos usar un esquema de disposici&#243;n diferente al que hay por defecto, podr&#237;amos poner una llamada 
a <function>esmart_container_layout_plugin_set(container, "name")</function> donde el nombre es el nombre del 
plugin a usar. La configuraci&#243;n por defecto es el contenedor llamado &quot;default&quot;.
</para>

<para>
En cuanto las direcciones y alineaci&#243;n est&#225;n iniciadas, el espaciado y rellenado del contenedor son 
especificados. El rellenado especifica el espacio alrededor del contenedor tomando cuatro par&#225;metros:
left, right, top y bottom. El par&#225;metro de espaciado especifica el espacio entre elementos en el contenedor.
</para>

<para>
Entonces continuamos e iniciamos la pol&#237;tica de relleno del contenedor. Esto especifica como los elementos 
son posicionados para rellenar el espacio en el contenedor. Los posibles valores son:
CONTAINER_FILL_POLICY_NONE, CONTAINER_FILL_POLICY_KEEP_ASPECT, CONTAINER_FILL_POLICY_FILL_X,
CONTAINER_FILL_POLICY_FILL_Y, CONTAINER_FILL_POLICY_FILL and CONTAINER_FILL_POLICY_HOMOGENOUS.
</para>

<para>
Una vez que el contenedor est&#225; completamente especificado iniciamos la capa del contenedor, y tragamos el 
contenedor en el edje y la parte llamada &quot;container&quot;.
</para>

<example>
<title>A&#241;adiendo Elementos al Contenedor</title>
<programlisting>
    len = (sizeof(str_list) / sizeof(str_list[0]));
    for(i = 0; i &lt; len; i++) {
        Evas_Coord w, h;
        Evas_Object *t = edje_object_add(ecore_evas_get(ee));

        edje_object_file_get(edje, &amp;edjefile, NULL);
        if (edje_object_file_set(t, edjefile, "element")) {
            edje_object_size_min_get(t, &amp;w, &amp;h);
            evas_object_resize(t, (int)w, (int)h);
        
            if (edje_object_part_exists(t, "element.value")) {
                edje_object_part_text_set(t, "element.value", str_list[i]);
                evas_object_show(t);
                int *i_ptr = (int *)malloc(sizeof(int));
                *i_ptr = (i + 1);

                edje_object_signal_callback_add(t, "item_selected", 
                                    "item_selected", _item_selected, i_ptr);
    
                esmart_container_element_append(container, t);
            } else {
                printf("Missing element.value part\n");
                evas_object_del(t);
            }
        } else {
            printf("Missing element part\n");
            evas_object_del(t);
        }
    }
    evas_object_show(container);
    _set_text(align, direction);
}
</programlisting>
</example>
<para>
Ahora que tenemos un contenedor, podemos a&#241;adir algunos elementos para mostrar. Cada una de las entradas 
en el array str_list definido al principio del programa ser&#225; a&#241;adida en el contenedor como una parte de texto.
</para>

<para>
Para cada elemento creamos un nuevo objeto Edje en el Evas. Entonces necesitamos saber el nombre del archivo 
de tema usado para crear nuestro Edje principal, as&#237; que llamamos a <function>edje_object_file_get</function>
que iniciar&#225; el archivo edje a dicho valor.
</para>

<para>
Entonces intentamos iniciar el grupo llamado &quot;element&quot; en el elemento nuevamente creado. Si esto 
falla imprimimos un error y borramos el objeto.
</para>

<para>
En cuanto hayamos encontrado el grupo &quot;element&quot; podemos intentar capturar la parte para nuestro 
elemento, &quot;element.value&quot;. Si esta parte existe, iniciamos el valor de texto de la parte a nuestra 
cadena actual y mostramos la parte.
</para>

<para>
Un callback es creado por medio de <function>edje_object_signal_callback_add</function> y vinculado al nevo 
elemento. Este ser&#225; llamado si la se&#241;al &quot;item_selected&quot; es es enviada desde el Edje. El valor i_ptr 
muestra como se pueden vincular datos al elemento, cuando el usuario hace click en un elemento su n&#250;mero ser&#225; 
impreso a la consola.
</para>

<para>
En cuanto el elemento es creado lo a&#241;adimos al contenedor ( en este caso, a&#241;adiendo el elemento ).
</para>

<para>
Para terminar, el contenedor es mostrado y hacemos alg&#250;n trabajo extra para mostrar informaci&#243;n sobre el 
contenedor en la cabecera por medio de la llamada <function>_show_text</function>.
</para>

<example>
<title>_set_text</title>
<programlisting>
static void _set_text(int align, int direction) {
    Evas_Object *t = edje_object_add(ecore_evas_get(ee));
    const char *edjefile;

    if (direction == CONTAINER_DIRECTION_VERTICAL)
        edje_object_part_text_set(edje, "header_text_direction", "vertical");
    else
        edje_object_part_text_set(edje, "header_text_direction", "horizontal");

    if (align == CONTAINER_ALIGN_CENTER) 
        edje_object_part_text_set(edje, "header_text_align", "center");
    
    else if (align == CONTAINER_ALIGN_TOP)
        edje_object_part_text_set(edje, "header_text_align", "top");
    
    else if (align == CONTAINER_ALIGN_BOTTOM)
        edje_object_part_text_set(edje, "header_text_align", "bottom");
    
    else if (align == CONTAINER_ALIGN_RIGHT)
        edje_object_part_text_set(edje, "header_text_align", "right");
    
    else if (align == CONTAINER_ALIGN_LEFT)
        edje_object_part_text_set(edje, "header_text_align", "left");
}
</programlisting>
</example>
<para>
La rutina <function>_set_text</function> toma la direcci&#243;n y alineaci&#243;n actuales y pone algo de texto en 
la cabecera del programa. Esta es una comunicaci&#243;n simple con el usuario de la configuraci&#243;n del contenedor 
actual.
</para>

<example>
<title>_left_click_cb</title>
<programlisting>
static void _left_click_cb(void* data, Evas_Object* o, const char* emmission,
                                                            const char* source) {
    Container_Direction dir = esmart_container_direction_get(container);
    Container_Direction new_dir = (dir + 1) % 2;
    Container_Alignment align = esmart_container_alignment_get(container);

    esmart_container_direction_set(container, new_dir);

    if (align != CONTAINER_ALIGN_CENTER) {
        if (new_dir == CONTAINER_DIRECTION_HORIZONTAL)
            align = CONTAINER_ALIGN_TOP;
        else
            align = CONTAINER_ALIGN_LEFT;
    }
    esmart_container_alignment_set(container, align);
    _set_text(align, new_dir);
}
</programlisting>
</example>
<para>
Cuando el usuario pulsa el bot&#243;n izquierdo del rat&#243;n en la pantalla este callback ser&#225; ejecutado. Tomamos 
la informaci&#243;n actual de direcci&#243;n del container y conmutamos a la otra direcci&#243;n ( es decir, horizontal 
se convierte en vertical y viceversa ). Tambien reseteamos la alineaci&#243;n si no estamos actualmente 
alineados al centro para asegurar que todo es v&#225;lido para la nueva direcci&#243;n. El texto en la cabecera es 
actualizado.
</para>

<example>
<title>_right_click_cb</title>
<programlisting>
static void _right_click_cb(void* data, Evas_Object* o, const char* emmission,
                                                            const char* source) {
    Container_Direction dir = esmart_container_direction_get(container);
    Container_Alignment align = esmart_container_alignment_get(container);
    
    if (dir == CONTAINER_DIRECTION_HORIZONTAL) {
        if (align == CONTAINER_ALIGN_TOP)
            align = CONTAINER_ALIGN_CENTER;
        
        else if (align == CONTAINER_ALIGN_CENTER)
            align = CONTAINER_ALIGN_BOTTOM;
        
        else
            align = CONTAINER_ALIGN_TOP;
    
    } else {
        if (align == CONTAINER_ALIGN_LEFT)
            align = CONTAINER_ALIGN_CENTER;
        
        else if (align == CONTAINER_ALIGN_CENTER)
            align = CONTAINER_ALIGN_RIGHT;
        
        else
            align = CONTAINER_ALIGN_LEFT;
    }
    esmart_container_alignment_set(container, align);
    _set_text(align, esmart_container_direction_get(container));
}
</programlisting>
</example>
<para>
El callback de click derecho iterar&#225; entre las alineaciones disponibles por una direcci&#243;n dada cuando el 
usuario pulse el bot&#243;n derecho del rat&#243;n.
</para>

<example>
<title>_item_selected</title>
<programlisting>
static void _item_selected(void* data, Evas_Object* o, const char* emmission,
                                                            const char* source) {
    printf("You clicked on the item with number %d\n", *((int *)data));
}
</programlisting>
</example>
<para>
Finalmente el callback <function>_item_selected</function> ser&#225; llamado cuando el usuario haga click con 
el bot&#243;n del medio del rat&#243;n sobre un elemento del contenedor. Los datos contendr&#225;n el n&#250;mero para ese 
elemento en la rutina de creaci&#243;n mas arriba.
</para>

<para>
Ese es el final del c&#243;digo para la aplicaci&#243;n, despues viene la EDC requerida para que todo se muestre y 
funcione correctamente.
</para>

<example>
<title>La Edc</title>
<programlisting>
fonts {             
    font: "Vera.ttf" "Vera";
}                   
                        
collections {           
    group {         
        name, "container_ex";
        min, 300, 300;
        max, 800, 800;
            
        parts { 
            part {
                name, "bg";
                type, RECT;
                mouse_events, 1;
                    
                description {
                    state, "default" 0.0;
                    color, 0 0 0 255;
                        
                    rel1 {
                        relative, 0.0 0.1;
                        offset, 0 0;
                    }
                    rel2 {
                        relative, 1.0 1.0;
                        offset, 0 0;
                    }
                }   
            }           
                        
            part {      
                name, "header";
                type, RECT;
                mouse_events, 0;

                description {
                    state, "default" 0.0;
                    color, 255 255 255 255;
                
                    rel1 {
                        relative, 0.0 0.0;
                        offset, 0 0; 
                    }

                    rel2 {
                        relative, 1.0 0.1;
                        offset, 0 0;
                    }
                }
            }

            part {
                name, "header_text_direction";
                type, TEXT;
                mouse_events, 0;

                description {
                    state, "default" 0.0;
                    color, 0 0 0 255;

                    rel1 {
                        relative, 0.0 0.0;
                        offset, 0 10;
                        to, "header";
                    }
                    rel2 {
                        relative, 1.0 1.0;
                        offset, 0 0;
                        to, "header";
                    }
                    text {
                        text, "direction";
                        font, "Vera";
                        size, 10;
                    }
                }
            }

            part {
                name, "header_text_align";
                type, TEXT;
                mouse_events, 0;

                description {
                    state, "default" 0.0;
                    color, 0 0 0 255;

                    rel1 {
                        relative, 0.0 0.0;
                        offset, 0 0;
                        to, "header_text_direction";
                    }
                    rel2 {
                        relative, 1.0 1.0;
                        offset, 110 0;
                        to, "header_text_direction";
                    }
                    text {
                        text, "align";
                        font, "Vera";
                        size, 10;
                    }
                }
            }
</programlisting>
</example>
<para>
Este archivo EDC espera tener la fuente Vera incorporada dentro de &#233;l, como es definido por la secci&#243;n de 
fuentes al principio. Esto significa que cuando compiles la edc necesitas o bien la fuente Vera en el 
directorio actual, o bien dar a edje_cc la opci&#243;n -fd y especificar el directorio a la fuente.
</para>

<para>
Despu&#233;s de definir las fuentes, las colecciones principales son definidas. La primera colecci&#243;n es la porci&#243;n 
principal de la propia aplicaci&#243;n, el grupo &quot;container_ex&quot;. Este grupo especifica la ventana principal 
de la aplicaci&#243;n. Como tal contiene las partes para el fondo, la cabecera, y el texto de la cabecera. Estas 
partes son todas bastante est&#225;ndar con alg&#250;na ( m&#237;nima ) alineaci&#243;n hecha entre ellas.
</para>

<example>
<title>La parte del contenedor</title>
<programlisting>
            part {
                name, "container";
                type, RECT;
                mouse_events, 1;

                description {
                    state, "default" 0.0;
                    visible, 1;

                    rel1 {
                        relative, 0.0 0.0;
                        offset, 0 0;
                        to, bg;
                    }
                    rel2 {
                        relative, 1.0 1.0;
                        offset, 0 0;
                        to, bg;
                    }
                    color, 0 0 0 0;
                }
            }
        }
        programs {
            program {
                name, "left_click";
                signal, "mouse,clicked,1";
                source, "container";
                action, SIGNAL_EMIT "left_click" "left_click";
            }

            program {
                name, "right_click";
                signal, "mouse,clicked,3";
                source, "container";
                action, SIGNAL_EMIT "right_click" "right_click";
            }
        }
    }
</programlisting>
</example>
<para>
La parte del contenedor es entonces definida. La parte en s&#237; es bastante simple, simplemente posicionada 
relativa al fondo e iniciada para recibir eventos de rat&#243;n. Despu&#233;s de definir las partes especificamos 
los programas para este grupo, de los cuales hay dos. El primer programa &quot;left_click&quot; especifica 
que va a pasar en caso de evento de click en el primer bot&#243;n del rat&#243;n.
</para>

<para>
La acci&#243;n es emitir una se&#241;al, los dos par&#225;metros tras SIGNAL_EMIT encajan con los valores puestos en el 
callback en el c&#243;digo de la aplicaci&#243;n.
</para>

<para>
Hay un callback similar para el tercer bot&#243;n del rat&#243;n como el primero, solo que emitiendo una se&#241;al ligeramente 
diferente.
</para>

<example>
<title>El grupo elemento</title>
<programlisting>
    group {
        name, "element";
        min, 80 18;
        max, 800 18;

        parts {
            part {
                name, "element.value";
                type, TEXT;
                mouse_events, 1;
                effect, NONE;

                description {
                    state, "default" 0.0;
                    visible, 1;

                    rel1 {
                        relative, 0.0 0.0;
                        offset, 0 0;
                    }
                    rel2 {
                        relative, 1.0 1.0;
                        offset, 0 0;
                    }
                    color, 255 255 255 255;

                    text {
                        text, "";
                        font, "Vera";
                        size, 10;
                    }
                }
            }
        }
        programs {
            program {
                name, "center_click";
                signal, "mouse,clicked,2";
                source, "element.value";
                action, SIGNAL_EMIT "item_selected" "item_selected";
            }
        }
    }
}
</programlisting>
</example>
<para>
El grupo elemento especifica como ha de ser mostrado cada elemento del contenedor. Notar&#225;s que los nombres 
aqu&#237; dados encajan con los nombres que se buscan en el propio c&#243;digo de la aplicaci&#243;n mientras se crean los 
elementos.
</para>

<para>
En este grupo hay un programa que emitir&#225; una se&#241;al &quot;item_selected&quot; cuando el bot&#243;n del medio del 
rat&#243;n sea pulsado mientras nos encontramos sobre uno de los elementos en la lista.
</para>

<para>
Ese es el final del c&#243;digo EDC. Para compilar el c&#243;digo de la aplicaci&#243;n, un makefile semejante al de abajo 
podr&#237;a ser usado.
</para>

<example>
<title>Makefile</title>
<programlisting>
CFLAGS = `ecore-config --cflags` `evas-config --cflags` `esmart-config --cflags`
LIBS = `ecore-config --libs` `evas-config --libs` `esmart-config --libs` \
            -lesmart_container

container_ex: container/container_ex.c
        gcc -o container/container_ex container/container_ex.c $(CFLAGS) $(LIBS)
</programlisting>
</example>

<para>
Y para crear el archivo EET, un simple 'edje_cc default.edc' deber&#237;a ser suficiente si tienes el fichero 
Vera.ttf en el directorio actual.
</para>

<para>
Eso es todo, asumiendo todo va como planeado, deber&#237;as tener una aplicaci&#243;n simple en la cual pulsando los 
botones izquierdo/derecho del rat&#243;n mueve el contenedor a diferentes porciones de la ventana. Mientras que 
pulsar el bot&#243;n del medio en elementos imprime el n&#250;mero del elemento.
</para>
</section>


