<!--
#######################################################
EDB introduction
#######################################################
-->
<section>
<sectioninfo>
  <author>
    <firstname>dan</firstname>
    <surname>sinclair</surname>
    <email>zero@perplexity.org</email>
    <othername>'dj2'</othername>
  </author>
  <date>26 de Julho 2004</date>
</sectioninfo>

<title>Recetta: Introdução ao EDB</title>

<para>
EDB fornece um potente backend de base de dados para usar nas suas aplicações. 
Esta receita é uma simples introdução que abrirá um banco de dados, 
escreverá várias chaves e depois lerá os dados.
</para>

<para>
<example>
<title>Introdução ao EDB</title>
<programlisting>
#include &lt;stdio.h&gt;
#include &lt;Edb.h&gt;

#define INT_KEY     "/int/val"
#define STR_KEY     "/str/val"
#define FLT_KEY     "/float/val"

int main(int argc, char ** argv) {
    E_DB_File *db_file = NULL;
    char *str;
    int i;
    float f;

    if (argc &lt; 2) {
        printf("Need db file\n");
        return 0;
    }

    db_file = e_db_open(argv[1]);
    if (db_file == NULL) {
        printf("Error opening db file (%s)\n", argv[1]);
        return 0;
    }

    printf("Adding values...\n");
    e_db_int_set(db_file, INT_KEY, 42);
    e_db_float_set(db_file, FLT_KEY, 3.14159);
    e_db_str_set(db_file, STR_KEY, "My cats breath smells like...");

    printf("Reading values...\n");
    if (e_db_int_get(db_file, INT_KEY, &amp;i))
        printf("Retrieved (%s) with value (%d)\n", INT_KEY, i);

    if (e_db_float_get(db_file, FLT_KEY, &amp;f))
        printf("Retrieved (%s) with value (%f)\n", FLT_KEY, f);

    if ((str = e_db_str_get(db_file, STR_KEY)) != NULL) {
        printf("Retrieved (%s) with value (%s)\n", STR_KEY, str);
        free(str);
    }

    e_db_close(db_file);
    e_db_flush();

    return 1;
}
</programlisting>
</example>
</para>

<para>
Para usar o EDB você deve incluir o &lt;Edb.h&gt; no seu arquivo para ter acesso a API. A parte 
inicial do programa é bastante padrão, tenho a tendência de digitar errado enquanto defino
as diferentes chaves que irei usar. Enquanto temos o nome do arquivo tentaremos 
abrir/criar a base de dados.
</para>

<para>
A base de dados será aberta ou, se não existir, será criada com a chamada à <function>e_db_open()</function>  que 
devolverá NULL se ocorreu um erro.
</para>

<para>
Uma vez aberta, podemos escrever nossos valores. Isto é feito por meio das 
três chamadas: <function>e_db_int_set()</function>, <function>e_db_float_set()</function> e 
<function>e_db_str_set()</function>. Você também pode inserir dados genéricos dentro do arquivo .db 
com  <function>e_db_data_set()</function>.
</para>

<para>
Junto com dados normais, você pode guardar metadados sobre a base de dados no próprio arquivo.
Eles não podem ser recuperados com os métodos tradicionais get/set. Estas 
propriedade são tratadas com <function>e_db_property_set()</function>
</para>

<para>
Cada um dos métodos de atribuição de tipo (get/set) usa três parâmetros:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para>E_DB_File *db</para></listitem>
 <listitem><para>char *key</para></listitem>
 <listitem><para>value</para></listitem>
</itemizedlist>
O parâmetro <literal>value</literal> é do tipo correspondente do metódo, int, float, char * ou void * para _int_set, 
_float_set, _str_set e _data_set respectivamente.
</para>

<para>
Uma vez que os valores estão na base de dados, eles podem ser recuperados com os métodos de acesso.
Cada um destes métodos usa três parâmetros e retorna um int. O valor de retorno é 1 em caso de 
sucesso e 0 caso contrário.
</para>

<para>
Como nos métodos de atribuição, os parâmetros dos métodos de acesso são o db, a chave e um 
ponteiro para o valor recuperado.
</para>

<para>
Quando terminamos com a base de dados podemos fecha-la com uma chamada à
<function>e_db_close()</function>. A chamada à <function>e_db_close()</function> não dá 
garantia que os dados foram escritos no disco, para isto chamamos <function>e_db_flush()</function> 
que escreverá o conteúdo da base de dados no disco.
</para>

<para>
<example>
<title>Compilando</title>
<screen>
zero@oberon [edb] -&gt; gcc -o edb edb_ex.c \
	`edb-config --cflags --libs`
</screen>
</example>
Se você executar o programa deverá ver os valores na tela, depois da execução haverá um 
arquivo .db com o nome que você especificou. Você pode dar uma olhada no arquivo .db com 
o <command>edb_gtk_ed</command> e ver os valores entrados.
</para>

</section>


