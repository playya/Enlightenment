
<section>
<sectioninfo>
  <author>
    <firstname>dan</firstname>
    <surname>sinclair</surname>
    <email>zero@perplexity.org</email>
    <othername>'dj2'</othername>
  </author>
  <date>28 July 2004</date>
</sectioninfo>

<title>Recette: Introduction aux objets intelligents Evas</title>

<para>
En prennant l'habitude de travailler avec Evas, vous devriez avoir de plus en
plus d'<literal>Evas_Objects</literal> sur lesquels vous travaillez et
appliquez les mêmes opérations afin des garder synchronisés. Il serait
beaucoup plus pratique de grouper tous ces <literal>Evas_Objects</literal> en
un seul objet auquel les transformations seront appliquées.
</para>

<para>
Les objets intelligents Evas donnent la possiblité d'écrire vos propres
objets et de voir Evas appeler vos fonctions pour effectuer le déplacement, le
redimensionnement, le masquage et toutes les autres choses dont un
<literal>Evas_Object</literal> est responsable. Avec les callbacks
<literal>Evas_Object</literal>, les objets intelligents vous permettent de
définir vos propres fonctions afin que l'objet supporte n'importe quelle
opérations que vous pourriez lui demander.
</para>

<para>
Cett introduction est divisée en trois fichiers: foo.h, foo.c, et main.c.
L'objet intelligent créé s'appelle <literal>foo</literal> et est définit dans
les fichiers foo.[ch]. main.c est là pour montrer comment un objet intelligent
peut être utilisé.
</para>

<para>
L'objet intelligent en lui-même est en fait deux carrés, l'un à l'intérieur de
l'autre, dont celui du centre est espacé de 10% par rapport aux bords du carré
externe. Pendant que le programme principal s'exécute un callback Ecore
repositionne et redimensionne l'objet intelligent.
</para>

<para>
Cet objet intelligent est tiré d'un modèle écrit par Atmos: 
<literal><ulink
url="http://www.atmos.org/code/src/evas_smart_template_atmos.c">www.atmos.org/code/src/evas_smart_template_atmos.c</ulink></literal>
qui à son tour est tiré d'un modèle écrit par Rephorm.
</para>

<para>
D'abord nous devons définir l'interface externe de notre objet intelligent.
Nous avons donc besoin d'un appel pour créer le nouvel objet.
<example>
<title>foo.h</title>
<programlisting>
#ifndef _FOO_H_
#define _FOO_H_ 
   
#include &lt;Evas.h&gt;

Evas_Object *foo_new(Evas *e);

#endif
</programlisting>
</example>
</para>

<para>
Une fois que c'est fait, nous entrons dans le ventre de la bête, le code de
l'objet intelligent.
<example>
<title>foo.c</title>
<programlisting>
#include &lt;Evas.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

typedef struct _Foo_Object Foo_Object;
struct _Foo_Object {
	Evas_Object *clip;
	Evas_Coord x, y, w, h;

	Evas_Object *outer;
	Evas_Object *inner;
};  
</programlisting>
</example>
L'objet <literal>Foo_Object</literal> contiendra toutes les informations dont
nous avons besoin. Dans ce cas il s'agit du carré extérieur, du carré
intérieur, d'un objet pour le clipping et la position courrante et la taille de
l'objet.
</para>

<para>
<programlisting>
static Evas_Smart *_foo_object_smart_get();
static Evas_Object *foo_object_new(Evas *evas);
static void _foo_object_add(Evas_Object *o);
static void _foo_object_del(Evas_Object *o);
static void _foo_object_layer_set(Evas_Object *o, int l);
static void _foo_object_raise(Evas_Object *o);
static void _foo_object_lower(Evas_Object *o);
static void _foo_object_stack_above(Evas_Object *o, Evas_Object *above);
static void _foo_object_stack_below(Evas_Object *o, Evas_Object *below);
static void _foo_object_move(Evas_Object *o, Evas_Coord x, Evas_Coord y);
static void _foo_object_resize(Evas_Object *o, Evas_Coord w, Evas_Coord h);
static void _foo_object_show(Evas_Object *o);
static void _foo_object_hide(Evas_Object *o);
static void _foo_object_color_set(Evas_Object *o, int r, int g, int b, int a);
static void _foo_object_clip_set(Evas_Object *o, Evas_Object *clip);
static void _foo_object_clip_unset(Evas_Object *o);
</programlisting>
Les prédéclarations requises pour l'objet intelligent. Elles seront expliquées
lorsque nous en viendrons à leur implémentation.
</para>

<para>
<programlisting>
Evas_Object *foo_new(Evas *e) {
    Evas_Object *result = NULL;
    Foo_Object *data = NULL;

    if ((result = foo_object_new(e))) {
        if ((data = evas_object_smart_data_get(result)))
            return result;
        else
            evas_object_del(result);
    }

    return NULL;
}
</programlisting>
<function>foo_new()</function>est notre interface externe et est responsable
de la mise en place de l'objet en lui-même. L'appel de
<function>foo_object_new()</function> fera le plus gros de la création
d'objet. 
<function>evas_object_smart_data_get()</function> est plus une vérification
d'erreur qu'autre chose. Lorsque <function>foo_object_new()</function> est en
cours d'exécution cela ajoutera l'objet intelligent à l'objet evas et il en
résultera un appel <literal>add</literal> à l'objet. Dans notre cas, cet appel
créera un <literal>Foo_Object</literal>. Ainsi, nous nous assurons juste qu'un
<literal>Foo_Object</literal> a été créé.
</para>

<para>
<programlisting>
static Evas_Object *foo_object_new(Evas *evas) {
    Evas_Object *foo_object;

    foo_object = evas_object_smart_add(evas, _foo_object_smart_get());
    return foo_object;
}
</programlisting>
Notre fonction <function>foo_object_new()</function> a la simple tâche
d'ajouter notre objet intelligent à l'objet Evas donné. Ceci est fait grace à
<function>evas_object_smart_add()</function> en lui passant en paramètres
l'Evas et l'objet <literal>Evas_Smart *</literal>. Notre <literal>Evas_Smart
*</literal> est produit par l'appel de
<function>_foo_object_smart_get()</function>.
</para>

<para>
<programlisting>
static Evas_Smart *_foo_object_smart_get() {
    static Evas_Smart *smart = NULL;
    if (smart)
        return (smart);

    smart = evas_smart_new("foo_object",
                            _foo_object_add,
                            _foo_object_del,
                            _foo_object_layer_set,
                            _foo_object_raise,
                            _foo_object_lower,
                            _foo_object_stack_above,
                            _foo_object_stack_below,
                            _foo_object_move,
                            _foo_object_resize,
                            _foo_object_show,
                            _foo_object_hide,
                            _foo_object_color_set,
                            _foo_object_clip_set,
                            _foo_object_clip_unset,
                            NULL
                          );
    return smart;
}
</programlisting>
Vous noterez que dans cet fonction <literal>Evas_Smart *smart</literal> est
déclaré comme étant <literal>static</literal>. C'est parce que peu importe le
nombre d'<literal>Evas_Objects</literal> que l'on crée, il n'y aura toujours
qu'un objet <literal>Evas_Smart</literal>. Comme Raster l'a mentionné, un
<literal>Evas_Smart</literal> est comme une définition de classe C++, pas
comme une instance. L'<literal>Evas_Object</literal> est une instance de
l'<literal>Evas_Smart</literal>.
</para>

<para>
L'objet intelligent en lui-même est créé par l'appel de
<function>evas_smart_new()</function>. Nous passons à cette fonction le nom de
l'objet intelligent, toutes les routines callback pour cet objet et n'importe
quelles données utilisateur. Dans ce cas il n'y a pas de données utilisateur
donc nous passons NULL.
</para>

<para>
<programlisting>
static void _foo_object_add(Evas_Object *o) {
    Foo_Object *data = NULL;
    Evas *evas = NULL;

    evas = evas_object_evas_get(o);

    data = (Foo_Object *)malloc(sizeof(Foo_Object));
    memset(data, 0, sizeof(Foo_Object));

    data-&gt;clip = evas_object_rectangle_add(evas);
    data-&gt;outer = evas_object_rectangle_add(evas);
    evas_object_color_set(data-&gt;outer, 0, 0, 0, 255);
    evas_object_clip_set(data-&gt;outer, data-&gt;clip);
    evas_object_show(data-&gt;outer);

    data-&gt;inner = evas_object_rectangle_add(evas);
    evas_object_color_set(data-&gt;inner, 255, 255, 255, 126);
    evas_object_clip_set(data-&gt;inner, data-&gt;clip);
    evas_object_show(data-&gt;inner);

    data-&gt;x = 0;
    data-&gt;y = 0;
    data-&gt;w = 0;
    data-&gt;h = 0;

    evas_object_smart_data_set(o, data);
}
</programlisting>
Lorsque nous appelons <function>evas_object_smart_add()</function> à
l'intérieur de <function>foo_object_new()</function>, cette fonction,
<function>_foo_object_add()</function> sera appelée de façon à ce que nous
puissions paramétrer n'importe quelle donnée interne pour l'objet intelligent.
</para>

<para>
Pour cet objet intelligent nous avons paramétré trois
<literal>Evas_Objects</literal> internes. <literal>data-&gt;clip</literal> est
utilisé pour clipper les deux autres objets,
<literal>data-&gt;outer</literal> est notre rectangle externe et
<literal>data-&gt;inner</literal> notre rectangle interne. Les rectangles
interne et externe sont montré immédiatement. L'objet clip lui ne sera montré
que lorsque l'utilisateur aura appelé <function>evas_object_show()</function>
sur cet objet.
</para>

<para>
Finallement nous appelons <function>evas_object_smart_data_set()</function>
pour spécifier notre nouveau <literal>Foo_Object</literal> comme une donnée 
de cet objet intelligent. Cette donnée sera rapartiée dans les autres
fonctions de cet objet en appelant
<function>evas_object_smart_data_get()</function>.
</para>

<para>
<programlisting>
static void _foo_object_del(Evas_Object *o) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        evas_object_del(data-&gt;clip);
        evas_object_del(data-&gt;outer);
        evas_object_del(data-&gt;inner);
        free(data);
    }
}
</programlisting>
Le callback <function>_foo_object_del()</function> sera exécuté si
l'utilisateur appelle <function>evas_object_del()</function> sur notre objet.
Pour cet objet c'est aussi simple que d'effacer nos trois rectangles et de
libérer notre structure de données <literal>Foo_Object</literal>.
</para>

<para>
<programlisting>
static void _foo_object_layer_set(Evas_Object *o, int l) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        evas_object_layer_set(data-&gt;clip, l);
    }
}

static void _foo_object_raise(Evas_Object *o) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        evas_object_raise(data-&gt;clip);
    }
}

static void _foo_object_lower(Evas_Object *o) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        evas_object_lower(data-&gt;clip);
    }
}

static void _foo_object_stack_above(Evas_Object *o, Evas_Object *above) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        evas_object_stack_above(data-&gt;clip, above);
    }
}

static void _foo_object_stack_below(Evas_Object *o, Evas_Object *below) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        evas_object_stack_below(data-&gt;clip, below);
    }
}
</programlisting>
Ce groupe de fonctions: <function>_foo_object_layer_set()</function>,
<function>_foo_object_raise()</function>,
<function>_foo_object_lower()</function>,
<function>_foo_object_stack_above()</function>, et
<function>_foo_object_stack_below()</function> fonctionnent toutes de la même
façon, en appliquant la fonction requise <function>evas_object_*</function> à
l'objet <literal>data-&gt;clip</literal>.
</para>

<para>
Ces fonctions sont déclenchées respectivement par l'utilisation de:
<function>evas_object_layer_set()</function>,
<function>evas_object_raise()</function>,
<function>evas_object_lower()</function>,
<function>evas_object_stack_above()</function>, et
<function>evas_object_stack_below()</function>.
</para>

<para>
<programlisting>
static void _foo_object_move(Evas_Object *o, Evas_Coord x, Evas_Coord y) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        float ix, iy;
        ix = (data-&gt;w - (data-&gt;w * 0.8)) / 2;
        iy = (data-&gt;h - (data-&gt;h * 0.8)) / 2;

        evas_object_move(data-&gt;clip, x, y);
        evas_object_move(data-&gt;outer, x, y);
        evas_object_move(data-&gt;inner, x + ix, y + iy);

        data-&gt;x = x;
        data-&gt;y = y;
    }
}
</programlisting>
Le callback <function>_foo_object_move()</function> est déclenché lorsque
<function>evas_object_move()</function> est appelé pour notre objet. Chacun
des objets internes est déplacé vers sa position correcte grace à des appels
à <function>evas_object_move()</function>.
</para>

<para>
<programlisting>
static void _foo_object_resize(Evas_Object *o, Evas_Coord w, Evas_Coord h) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o))) {
        float ix, iy, iw, ih;
        iw = w * 0.8;
        ih = h * 0.8;

        ix = (w - iw) / 2;
        iy = (h - iw) / 2;

        evas_object_resize(data-&gt;clip, w, h);
        evas_object_resize(data-&gt;outer, w, h);

        evas_object_move(data-&gt;inner, data-&gt;x + ix, data-&gt;y + iy);
        evas_object_resize(data-&gt;inner, iw, ih);

        data-&gt;w = w;
        data-&gt;h = h;
    }
}
</programlisting>
Le callback <function>_foo_object_resize()</function> sera déclanché lorsque
l'utilisateur appellera <function>evas_object_resize()</function> pour notre
objet. Ainsi, nous devons redimensionner <literal>data-&gt;clip</literal> et
<literal>data-&gt;outer</literal> aux dimensions de notre objet. Nous pouvons
le faire avec des appels à <function>evas_object_resize()</function>. Nous
pouvons ensuite déplacer et redimensionner l'objet 
<literal>data-&gt;inner</literal> afin qu'il reste dans la bonne position par
rapport à notre rectangle extérieur. Ce que nous faisons respectivement grace
à <function>evas_object_move()</function> et
<function>evas_object_resize()</function>. Alors nous enregistrons la largeur
et la hauteur courrante dans notre objet afin de pouvoir les rappeler par la
suite.
</para>

<para>
<programlisting>
static void _foo_object_show(Evas_Object *o) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o)))
            evas_object_show(data-&gt;clip);
}
</programlisting>
Le callback <function>_foo_object_show()</function> sera déclenché lorsque
<function>evas_object_show()</function> sera appelé pour notre objet. 
Pour afficher notre objet, tout ce que nous devons faire est afficher la
région clip puisque nos rectangles sont clippés par elle. Nous le faisons en
appelant <function>evas_object_show()</function>.
</para>

<para>
<programlisting>
static void _foo_object_hide(Evas_Object *o) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o)))
        evas_object_hide(data-&gt;clip);
}
</programlisting>
Le callback <function>_foo_object_hide()</function> sera déclenché lorsque
<function>evas_object_hide()</function> sera appelé pour notre objet. Comme
nous utilisons un objet interne de clipping, nous devons juste cacher l'objet
clip, <literal>data-&gt;clip</literal>, afin de cacher notre objet
intelligent. Nous le faisons en appelant
<function>evas_object_hide()</function>.
</para>

<para>
<programlisting>
static void _foo_object_color_set(Evas_Object *o, int r, int g, int b, int a) {
}
</programlisting>
La fonction <function>_foo_object_color_set()</function> sera lancée si
<function>evas_object_color_set()</function> est appelé pour notre
<literal>Evas_Object</literal>. Mais, comme nous ne voulons pas ici de
changement de couleurs, nous ignorons ce callback.
</para>

<para>
<programlisting>
static void _foo_object_clip_set(Evas_Object *o, Evas_Object *clip) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o)))
        evas_object_clip_set(data-&gt;clip, clip);
}
</programlisting>
Le callback <function>_foo_object_clip_set()</function> sera déclenché
lorsqu'un appel à <function>evas_object_clip_set()</function> est fait pour
notre objet. Dans ce cas nous propageons ce paramètre à notre objet interne,
data-&gt;clip grace à <function>evas_object_clip_set()</function>.
</para>

<para>
<programlisting>
static void _foo_object_clip_unset(Evas_Object *o) {
    Foo_Object *data;

    if ((data = evas_object_smart_data_get(o)))
        evas_object_clip_unset(data-&gt;clip);
}
</programlisting>
Le callback <function>_foo_object_clip_unset()</function> sera déclenché 
lorsqu'un appel à <function>evas_object_clip_unset()</function> est fait pour
notre objet. Nous enlevons le paramètre de clip de notre objet interne avec
<function>evas_object_clip_unset()</function>.
</para>

<para>
Une fois que le code d'objet intelligent est finit, nous pouvons créer notre
programme principal pour utiliser ce nouvel objet.
<example>
<title>main.c</title>
<programlisting>
#include &lt;stdio.h&gt;
#include &lt;Ecore_Evas.h&gt;
#include &lt;Ecore.h&gt;
#include "foo.h"

#define WIDTH 400
#define HEIGHT 400
#define STEP 10

static int dir = -1;
static int cur_width = WIDTH;
static int cur_height = HEIGHT;

static int timer_cb(void *data);

int main() {
    Ecore_Evas  *ee;
    Evas        *evas;
    Evas_Object *o;

    ecore_init();

    ee = ecore_evas_software_x11_new(NULL, 0, 0, 0, WIDTH, HEIGHT);
    ecore_evas_title_set(ee, "Smart Object Example");
    ecore_evas_borderless_set(ee, 0);
    ecore_evas_show(ee);

    evas = ecore_evas_get(ee);

    o = evas_object_rectangle_add(evas);
    evas_object_resize(o, (double)WIDTH, (double)HEIGHT);
    evas_object_color_set(o, 200, 200, 200, 255);
    evas_object_layer_set(o, -255);
    evas_object_show(o);

    o = foo_new(evas);
    evas_object_move(o, 0, 0);
    evas_object_resize(o, (double)WIDTH, (double)HEIGHT);
    evas_object_layer_set(o, 0);
    evas_object_show(o);

    ecore_timer_add(0.1, timer_cb, o);
    ecore_main_loop_begin();

    return 0;
}   
        
static int timer_cb(void *data) {
    Evas_Object *o = (Evas_Object *)data;
    Evas_Coord x, y;

    cur_width += (dir * STEP);
    cur_height += (dir * STEP);

    x = (WIDTH - cur_width) / 2;
    y = (HEIGHT - cur_height) / 2;

    if ((cur_width &lt; STEP) || (cur_width &gt; (WIDTH - STEP)))
        dir *= -1;

    evas_object_move(o, x, y);
    evas_object_resize(o, cur_width, cur_height);
    return 1;
}
</programlisting>
</example>
La plus grande partie de ce programme est similaire à celui de la recette
utilisant Ecore_Evas vu plus haut. La création de notre nouvel objet
intelligent est contenu dans cette portion de code:
<programlisting>
    o = foo_new(evas);
    evas_object_move(o, 0, 0);
    evas_object_resize(o, (double)WIDTH, (double)HEIGHT);
    evas_object_layer_set(o, 0);
    evas_object_show(o);
</programlisting>
Une fois que <function>foo_new()</function> a retouné notre objet nous pouvons
le manipuler avec des appels Evas normaux, ainsi nous spécifions sa position,
sa taille, sa couche et affichons l'objet.
</para>

<para>
Maintenant que notre objet intelligent est créé et affiché, nous paramétrons
un temporisateur Ecore afin qu'il se déclenche toutes les 0.1 secondes.
Lorsque le temporisateur est déclenché il execute la fonction
<function>timer_cb()</function>. Ce callback rétrécira ou accroissera la
taille de notre objet intelligent tout en le centrant dans notre fenêtre
principale. 
</para>

<para>
Compiler cet exemple est aussi simple que:
<example>
<title>Compilation</title>
<screen>
zero@oberon [evas_smart] -&gt; gcc -o foo foo.c main.c \
    `ecore-config --cflags --libs` `evas-config --cflags --libs`
</screen>
</example>
</para>

<para>
Les objets intelligents Evas sont simples à mettre en oeuvre mais fournissent
un puissant méchanisme d'abstraction de parties de votre programme. Si vous
souhaitez en savoir plus sur les objets intelligents, jettez un coup d'oeil à
la section Esmart, Etox ou Emotion.
</para>
</section>


