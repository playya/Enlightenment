<!--
#######################################################
A simple recipe to get an esmart trans window up 
#######################################################
-->
<section>
<sectioninfo>
  <author>
    <firstname>dan</firstname>
    <surname>sinclair</surname>
    <email>zero@perplexity.org</email>
    <othername>dj2</othername>
  </author>
  <date>25 April 2004</date>
</sectioninfo>

<title>Recipe: Esmart Trans Introduction</title>

<para>
Transparency is increasingly becoming a common trait of applications. To this
end, the Esmart_Trans object has been created. This object will do all of the
hard work to produce a transparent background for your program.
</para>

<para>
Esmart trans makes the integration of a transparent background into your application
very easy. You need to create the trans object, and then make sure you update it
as the window is moved or resized.
</para>

<example>
<title>Includes and declarations</title>
<programlisting>
#include &lt;stdio.h&gt;
#include &lt;Ecore.h&gt;
#include &lt;Ecore_Evas.h&gt;
#include &lt;Esmart/Esmart_Trans_X11.h&gt;

int sig_exit_cb(void *data, int ev_type, void *ev);
void win_del_cb(Ecore_Evas *ee);
void win_resize_cb(Ecore_Evas *ee);
void win_move_cb(Ecore_Evas *ee);

static void _freshen_trans(Ecore_Evas *ee);
void make_gui();
</programlisting>
</example>
<para>
Every application that uses an Esmart_Trans object is going to require the Ecore,
Ecore_Evas and the Esmart/Esmart_Trans header files.

The next four declarations are callbacks from ecore for events on our window, exit, delete,
resize, and move respectively.

The last two declarations are convenience functions being used in the example and do
not need to be in your program.
</para>

<example>
<title>main</title>
<programlisting>
int main(int argc, char ** argv) {
    int ret = 0;
        
    if (!ecore_init()) {
        printf("Error initializing ecore\n");
        ret = 1;
        goto ECORE_SHUTDOWN;
    }

    if (!ecore_evas_init()) {
        printf("Error initializing ecore_evas\n");
        ret = 1;
        goto ECORE_SHUTDOWN;
    }
    make_gui();
    ecore_main_loop_begin();
        
    ecore_evas_shutdown();

ECORE_SHUTDOWN:
    ecore_shutdown();
                
    return ret;
}               
</programlisting>
</example>
<para>
The main routine for this example is pretty simple. Ecore and Ecore_Evas are both
initialized, with appropriate error checking. We then create the gui and start
the main ecore event loop. When ecore exits we shut everything down and return.
</para>

<example>
<title>exit and del callbacks</title>
<programlisting>
int sig_exit_cb(void *data, int ev_type, void *ev) {
    ecore_main_loop_quit();
    return 1;
}

void win_del_cb(Ecore_Evas *ee) {
    ecore_main_loop_quit();
}
</programlisting>
</example>
<para>
The exit and del callbacks are the generic ecore callbacks. The exit callback isn't strictly
necessary, as Ecore will call <function>ecore_main_loop_quit()</function> if no handler is
registered, but is included to show how its done.
</para>

<example>
<title>_freshen_trans</title>
<programlisting>
static void _freshen_trans(Ecore_Evas *ee) {
    int x, y, w, h;
    Evas_Object *o;

    if (!ee) return;

    ecore_evas_geometry_get(ee, &amp;x, &amp;y, &amp;w, &amp;h);
    o = evas_object_name_find(ecore_evas_get(ee), "bg");

    if (!o) {
        fprintf(stderr, "Trans object not found, bad, very bad\n");
        ecore_main_loop_quit();
    }
    esmart_trans_x11_freshen(o, x, y, w, h);
}
</programlisting>
</example>
<para>
The <function>_freshen_trans</function> routine is a helper routine to update the image that the trans
is shown. This will be called when we need to update our image to whats currently
under the window.

The function grabs the current size of the ecore_evas, and then gets the object
with the name &quot;bg&quot; (this name is the same as the name we give our trans when
we create it). Then, as long as the trans object exists, we tell esmart to 
freshen the image being displayed.
</para>

<example>
<title>resize_cb</title>
<programlisting>
void win_resize_cb(Ecore_Evas *ee) {
    int w, h;
    int minw, minh;
    int maxw, maxh;
    Evas_Object *o = NULL;

    if (ee) {
        ecore_evas_geometry_get(ee, NULL, NULL, &amp;w, &amp;h);
        ecore_evas_size_min_get(ee, &amp;minw, &amp;minh);
        ecore_evas_size_max_get(ee, &amp;maxw, &amp;maxh);

        if ((w &gt;= minw) &amp;&amp; (h &gt;= minh) &amp;&amp; (h &lt;= maxh) &amp;&amp; (w &lt;= maxw)) {
            if ((o = evas_object_name_find(ecore_evas_get(ee), "bg")))
                evas_object_resize(o, w, h);
        }
    }
    _freshen_trans(ee);
}
</programlisting>
</example>
<para>
When the window is resized we need to update our evas to the correct size and then
update the trans object to display that much of the background.

We grab the current size of the window <function>ecore_evas_geometry_get</function> and the min/max 
size of the window. As long as our currently desired size is within the min/max
bounds set for our window, we grab the &quot;bg&quot; (same as title again) object and
resize it.

Once the resizing is done, we call the <function>_freshen_trans</function> routine to update the image
displayed on the bg.
</para>

<example>
<title>move_cb</title>
<programlisting>
void win_move_cb(Ecore_Evas *ee) {
    _freshen_trans(ee);
}
</programlisting>
</example>
<para>
When the window is moved we need to freshen the image displayed as the transparency.
</para>

<example>
<title>Setup ecore/ecore_evas</title>
<programlisting>
void make_gui() {
    Evas *evas = NULL;
    Ecore_Evas *ee = NULL;
    Evas_Object *trans = NULL;
    int x, y, w, h;

    ecore_event_handler_add(ECORE_EVENT_SIGNAL_EXIT, sig_exit_cb, NULL);

    ee = ecore_evas_software_x11_new(NULL, 0, 0, 0, 300, 200);
    ecore_evas_title_set(ee, "trans demo");

    ecore_evas_callback_delete_request_set(ee, win_del_cb);
    ecore_evas_callback_resize_set(ee, win_resize_cb);
    ecore_evas_callback_move_set(ee, win_move_cb);

    evas = ecore_evas_get(ee);
</programlisting>
</example>
<para>
The first portion of make_gui is concerned with setting up ecore and ecore_evas.
First the exit callback is hooked into ECORE_EVENT_SIGNAL_EXIT, then the 
Ecore_Evas object is created with the software X11 engine. The window title is
set and we hook in the callbacks written above, delete, resize and move. Finally we
grab the evas for the created Ecore_Evas.
</para>

<example>
<title>Creating Esmart_Trans object</title>
<programlisting>
    trans = esmart_trans_x11_new(evas);
    evas_object_move(trans, 0, 0);
    evas_object_layer_set(trans, -5);
    evas_object_name_set(trans, "bg");

    ecore_evas_geometry_get(ee, &amp;x, &amp;y, &amp;w, &amp;h);
    evas_object_resize(trans, w, h);

    evas_object_show(trans);
    ecore_evas_show(ee);

    esmart_trans_x11_freshen(trans, x, y, w, h);
}
</programlisting>
</example>
<para>
Once everything is setup we can create the trans object. The trans is to be created
in the evas returned by <function>ecore_evas_get</function>. This initial creation is done by the call
to <function>esmart_trans_x11_new</function>. Once we have the object, we move it so it starts at 
position (0, 0) (the upper left corner), set the layer to -5 and name the object
&quot;bg&quot; (as used above).

Then we grab the current size of the ecore_evas and use that to resize the trans
object to the window size. Once everything is resized we show the trans and 
show the ecore_evas.

As a final step, we freshen the image on the transparency to what is currently under
the window so it is up to date.
</para>

<example>
<title>Simple makefile</title>
<programlisting>
CFLAGS = `ecore-config --cflags` `evas-config --cflags` `esmart-config --cflags`
LIBS = `ecore-config --libs` `evas-config --libs` `esmart-config --libs` \
            -lesmart_trans_x11

all:
    gcc -o trans_example trans_example.c $(CFLAGS) $(LIBS)
</programlisting>
</example>
<para>
In order to compile the above program we need to include the library information 
for ecore, ecore_evas and esmart. This is done through the -config scripts for each
library. These -config scripts know where each of the includes and libraries resides
and sets up the appropriate linking and include paths for the compilation.
</para>
</section>


