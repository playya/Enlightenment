<!--
#######################################
Introduction to Ecore_Config
#######################################
-->
<section>
<sectioninfo>
  <author>
    <firstname>dan</firstname>
    <surname>sinclair</surname>
    <email>zero@perplexity.org</email>
    <othername>'dj2'</othername>
  </author>
  <othercredit>
      <firstname>Andres</firstname>
      <surname>Blanc</surname>
      <email>andresblanc@gmail.com</email>
      <othername>'dresb'</othername>
      <contrib>Updated the code sample and explanatory paragraphs to match the
        changes in Ecore_Config config from the last 4 years.</contrib>
  </othercredit>
  <date>20 January 2008</date>
</sectioninfo>

<title>Recipe: Ecore Config Introduction</title>

<para>
The Ecore_Config module provides the programmer with a very simple way to setup
configuration files for their program. This recipe will give an example of how
to integrate the beginnings of Ecore_Config into your program and use it to get
configuration data.
</para>

<example>
<title>Simple Ecore_Config program</title>
<programlisting>
#include &lt;Ecore_Config.h&gt;

int main(int argc, char ** argv) {
    int i;
    float j;
    char *str;

    if (ecore_config_init("foo") != ECORE_CONFIG_ERR_SUCC) {
        printf("ERROR: Could not init Ecore_Config");
        return 1;
    }

    ecore_config_int_default("/int_example", 1);
    ecore_config_string_default("/this/is/a/string/example", "String");
    ecore_config_float_default("/float/example", 2.22);

    if (ecore_config_load() != ECORE_CONFIG_ERR_SUCC)
        printf("WARNING: Could not load config from ~/.e/apps/config.eet\n");

    i = ecore_config_int_get("/int_example");
    str = ecore_config_string_get("/this/is/a/string/example");
    j = ecore_config_float_get("/float/example");

    printf("str is (%s)\n", str);
    printf("i is (%d)\n", i);
    printf("j is (%f)\n", j);

    free(str);

    ecore_config_shutdown();
    return 0;
}
</programlisting>
</example>
<para>
As you can see from this example the basic usage of Ecore_Config is simple.
The system is initialized with a call to <function>ecore_config_init</function>.
This function creates a temporary file in ~/.ecore/PROGRAM_NAME/ to hold the
changes until they are saved or the library is shutdown.
</para>

<para>
For each configuration variable you are getting from Ecore_Config, you can
assign a default value in the case that the user does not have a configuration
file. The defaults are assigned with the <function>ecore_config_int_default</function>
with "int" being replaceable with any other Ecore_Config type. The first
parameter is the key under which this is to be accessed. These keys must be
unique over your program. The value passed must correspond with the type used
in the function call.
</para>

<para>
Calling <function>ecore_config_load</function> will the read the values from
the configuration file in the default location, ~/.e/apps/PROGRAM_NAME/config.eet,
into Ecore_Config. To load from a custom location the function <function>ecore_config_file_load</function>
is available. After loading the file can access the values with <function>ecore_config_int_get</function>
(again int being replaceable). These routines take the key name for this item
and return the value associated with that key. Each function returns a type
that corresponds to the function call name.
</para>

<para>
<function>ecore_config_shutdown</function> is then called to shutdown the
Ecore_Config system before the program exits. At this moment the temporary file
will be deleted and any unsaved changes will be lost.
</para>

<example>
<title>Compilation command</title>
<programlisting>
gcc -o ecore_config_example ecore_config_example.c `pkg-config --cflags --libs ecore-config`
</programlisting>
</example>

<para>
To compile the program you can use pkg-config to get all of the required
linking and library information for Ecore_Config.
</para>

<para>
Changing the configuration values and saving those changes is similar to
loading them. To execute the following example simply insert the source code
before calling the library shutdown function and recompile.
</para>

<!--

NOTE: edb_ed does not seem to be able of opening files created with Ecore_Config
      and vice versa anymore. I replaced that part with a example about saving
      changes using the API.
-->

<example>
<title>Saving configuration changes</title>
<programlisting>
ecore_config_string_set("/this/is/a/string/example", "Other string");
    
if (ecore_config_save() != ECORE_CONFIG_ERR_SUCC) {
    printf("WARNING: could not save config to ~/.e/apps/config.eet\n");
} else {
    printf("In the next execution str will be \"Other string\"\n");
}
</programlisting>
</example>

<para>
In this example the function <function>ecore_config_string_set</function> is
used to alter the string example from the default value "String" to "Other
string". Saving the changes is similar to loading them, <function>ecore_config_save</function>
saves the changes to the default location while <function>ecore_config_file_save</function>
can be used to save the changes to a custom location. Unless there is a problem
the next time the example is ran the value for "Str" will be "Other string".
</para>

</section>