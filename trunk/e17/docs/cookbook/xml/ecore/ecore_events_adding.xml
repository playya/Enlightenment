<section>
<sectioninfo>
  <author>
    <firstname>dan</firstname>
    <surname>sinclair</surname>
    <email>zero@perplexity.org</email>
    <othername>'dj2'</othername>
  </author>
  <date>16 December 2004</date>
</sectioninfo>

<title>Recipe: Adding Ecore Events</title>
<para>
If you ever need to make your own events you can easily hook them into
Ecores event system. This gives you the ability to add events into the event
queue for your event and have Ecore deliever them to another part of the
app.
</para>

<para>
The following program creates a simple event and a timer. When the timer is
triggered it will add our new event into the event queue. Our event will
then print a message and quit the application.
</para>

<example>
<title>Ecore event example</title>
<programlisting>
#include &lt;stdio.h&gt;
#include &lt;Ecore.h&gt;

static int timer_cb(void *data);
static int event_cb(void *data, int type, void *ev);
static void event_free(void *data, void *ev);

int MY_EVENT_TYPE = 0;

typedef struct Event_Struct Event_Struct;
struct Event_Struct {
    char *name;
};

int
main(int argc, char ** argv)
{
    ecore_init();

    MY_EVENT_TYPE = ecore_event_type_new();
    ecore_event_handler_add(MY_EVENT_TYPE, event_cb, NULL);
    ecore_timer_add(1, timer_cb, NULL);

    ecore_main_loop_begin();
    ecore_shutdown();
    return 0;
}

static int
timer_cb(void *data)
{
    Event_Struct *e;
    Ecore_Event *event;

    e = malloc(sizeof(Event_Struct));
    e->name = strdup("ned");

    event = ecore_event_add(MY_EVENT_TYPE, e, event_free, NULL);
    return 0;
}

static int
event_cb(void *data, int type, void *ev)
{
    Event_Struct *e;

    e = ev;
    printf("Got event %s\n", e->name);
    ecore_main_loop_quit();
    return 1;
}

static void
event_free(void *data, void *ev)
{
    Event_Struct *e;

    e = ev;
    free(e->name);
    free(e);
}
</programlisting>
<para>
Each event has an associated event id. This id is a simple an int
value that is assigned through the call to
<literal>ecore_event_type_new()</literal>. Once we have the event id we can
use it in <literal>ecore_event_handler_add()</literal> calls. Thats all
there is to creating the event.
</para>

<para>
Ecore gives us the ability to pass an event structure to our event. 
Just note that you have to be careful, if you don't specify a free function 
for the struct ecore will use a generic function which just calls 
<literal>free</literal> on the value. So, don't pass anything you need 
into there without care. (Or prepare to send an evening tracking down very
strange segv's in your program)
</para>

<para>
In this example we create a simple <literal>Event_Struct</literal> that is
passed. The call to actually create the event is
<literal>ecore_event_add()</literal>. This takes the event id, any event
data, the event data free function, and any data to pass to the free
function.
</para>

<para>
So as you can see we pass our <literal>Event_Struct</literal> as the event
data and set the <literal>event_free</literal> function as the cleanup for
this structure.
</para>
</example>

<para>
And thats it. You can compile as below and everything should work.
</para>

<example>
<screen>
zero@oberon [ecore_event] -&gt; gcc -o ev main.c `ecore-config --cflags --libs`
</screen>
</example>

<para>
As this shows, it is really easy to extend Ecore with your own events. The
system has been setup to allow it to be extened as required.
</para>

</section>


