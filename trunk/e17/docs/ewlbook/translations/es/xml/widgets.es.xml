<chapter id="ch-Widgets">
<title>Widgets</title>
<para>
Miraremos ahora a cada widget individualmente. Mira el código que crea el widget y una captura de pantalla 
del widget en acción ( si es aplicable ).
</para>

<!-- ################################### -->
<!-- EWL BOX -->
<sect1 id="sec-EwlBox">
<title>ewl_hbox and ewl_vbox</title>

<para>
Los widgets caja te permiten especificar distintas maneras en que la aplicación será colocada. Puedes crear 
una caja horizontal ( hbox ) o vertical ( vbox ). Una caja horizontal tendrá a sus widgets hijos empaquetados 
desde la izquierda hacia la derecha mientras que una caja vertical tendrá sus widgets empaquetados de arriba abajo. 
</para>

<para>
Un widget caja no se mostrará en la propia aplicación, es usado solo como un contenedor para otros widgets. 
</para>

<para>
 <example>
  <title>Creando cajas EWL</title>
  <programlisting role="C">
   Ewl_Widget *hbox = ewl_hbox_new();
   ewl_widget_show(hbox);

   Ewl_Widget *vbox = ewl_vbox_new();
   ewl_widget_show(vbox);
  </programlisting>
 </example>
Los widgets de caja son relativamente simples de crear y usar, sólamente requiriendo una llamada a la función new.
</para>

<para>
Las funciones para manipular cajas incluyen:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para><function>void ewl_box_set_orientation(Ewl_Box *, Ewl_Orientation)</function></para></listitem>
 <listitem><para><function>Ewl_Orientation ewl_box_orientation_get(Ewl_Box *)</function></para></listitem>
 <listitem><para><function>void ewl_box_spacing_set(Ewl_Box *, int)</function></para></listitem>
 <listitem><para><function>void ewl_box_homogeneous_set(Ewl_Box *, int)</function></para></listitem>
</itemizedlist>

La opción <literal>Ewl_Orientation</literal> puede ser uno de:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para>EWL_ORIENTATION_HORIZONTAL</para></listitem>
 <listitem><para>EWL_ORIENTATION_VERTICAL</para></listitem>
</itemizedlist>
</para>

<para>
<function>ewl_box_set_spacing()</function> seleccionará la cantidad de espacio entre los elementos en la caja con 
el valor dado. <function>ewl_box_set_homogeneous()</function> configurará la caja para dar a todos los elementos 
en ella un tamaño igual si recibe true, sino tendrán su tamaño requerido.
</para>

</sect1>

<!-- ################################### -->
<!-- EWL BUTTON -->
<sect1 id="sec-EwlButton">
<title>ewl_button</title>
<para>
El widget botón es simplemente un widget con una etiqueta incluída. Cuando el usuario pulsa en el botón 
el callback vinculado a <literal>EWL_CALLBACK_CLICKED</literal> será ejecutado.
</para>

<para>
 <figure>
  <title>Un botón EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/entry.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de un botón EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>

<para>
<example id="sec-EwlButtonCode">
 <title>Creating a button</title>
 <programlisting role="C">
    Ewl_Widget *button = ewl_button_new("A button");
    ewl_object_alignment_set(EWL_OBJECT(button), EWL_FLAG_ALIGN_CENTER);
    ewl_callback_append(button, EWL_CALLBACK_CLICKED, button_cb, NULL);
    ewl_widget_show(button);
 </programlisting>
</example>
La porción de etiqueta del botón puede ser alineada a cualquiera de los valores <literal>EWL_FLAG_ALIGN_*</literal>. 
</para>

<para>
<example id="sec-EwlButtonCB">
 <title>Callback de botón</title>
 <programlisting role="C">
void button_cb(Ewl_Widget *w, void *event, void *data) {
    printf("button pressed\n");
}
 </programlisting>
</example>
</para>

<para>
La etiqueta de un botón puede ser manipulada después de que el botón ha sido creado mediante las dos llamadas:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para><function>char *ewl_button_label_get(EwlButton *)</function></para></listitem>
 <listitem><para><function>void ewl_button_label_set(EwlButton *, char *)</function></para></listitem>
</itemizedlist>
</para>
</sect1>

<!-- ################################### -->
<!-- EWL CHECKBUTTON -->
<sect1 id="sec-EwlCheckButton">
<title>ewl_checkbutton</title>
<para>
 <figure>
  <title>Un botón de opción EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/checkbutton.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de un botón de opción EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>
<para>
<example id="sec-EwlCheckButtonCode">
 <title>Creando un checkbutton</title>
  <programlisting role="C">
    Ewl_Widget *cb = ewl_checkbutton_new("Label");
    ewl_checkbutton_label_position_set(EWL_CHECKBUTTON(cb), EWL_FLAG_ALIGN_LEFT);
    ewl_callback_append(cb, EWL_CALLBACK_VALUE_CHANGED, checkbutton_cb, NULL);
    ewl_widget_show(cb);
 </programlisting>
</example>
</para>
<para>
 <example id="sec-EwlCheckButtonCB">
 <title>Callback del botón</title>
 <programlisting role="C">
void checkbutton_cb(Ewl_Widget *w, void *event, void *data) {
    if (ewl_checkbutton_is_checked(EWL_CHECKBUTTON(w)))
        printf("checked\n");
    else
        printf("Not checked\n");
}
 </programlisting>
 </example>
 </para>
</sect1>

<!-- ################################### -->
<!-- EWL COMBO -->
<sect1 id="sec-EwlCombo">
<title>ewl_combo</title>
<para>
 <figure>
  <title>Una combobox EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/combo.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de una combobox EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>

<para>
<example id="sec-EwlComboCode">
 <title>Creating a combo box</title>
 <programlisting role="C">
    Ewl_Widget *combo = ewl_combo_new("combo box");
    ewl_callback_append(combo, EWL_CALLBACK_VALUE_CHANGED, 
                                     combo_change_cb, NULL);
    ewl_widget_show(combo);

    Ewl_widget *item1 = ewl_menu_item_new(NULL, "foo");
    ewl_container_child_append(EWL_CONTAINER(combo));
    ewl_widget_show(item1);
 </programlisting>
</example>
</para>

<para>
<example id="sec-EwlComboCodeCB">
 <title>callback de cambio de valor combobox</title>
 <programlisting role="C">
void combo_change_cb(Ewl_Widget *w, void *event, void *data) {
    char *text = (char *)event;
    printf("Value changed to %s\n", text);
}
 </programlisting>
</example>
</para>

</sect1>

<!-- ################################### -->
<!-- EWL DIALOG -->
<sect1 id="sec-EwlDialog">
<title>ewl_dialog</title>
<para>
El widget <literal>Ewl_Dialog</literal> provee una manera de mostrar al usuario una simple caja de diálogo 
que puede esperar una respuesta, dar avisos, o simplemente mostrar mensajes.
</para>

<para>
 <figure>
  <title>Un diálogo EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/dialog_box.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de una caja de diálogo EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>
<para>
<example id="sec-EwlDialogCode">
<title>código de diálogo EWL</title>
<programlisting role="C">
    Ewl_Widget *dialog = NULL;
    Ewl_Widget *o = NULL;

    o = ewl_text_new("a dialog eh");
    ewl_object_alignment_set(EWL_OBJECT(o),
    EWL_FLAG_ALIGN_CENTER);
    ewl_widget_show(o);

    dialog = ewl_dialog_new(EWL_POSITION_BOTTOM);
    ewl_dialog_set_has_separator(EWL_DIALOG(dialog), 0);
    ewl_dialog_add_widget(EWL_DIALOG(dialog), o);
    ewl_object_alignment_set(EWL_OBJECT(dialog), EWL_FLAG_ALIGN_CENTER);
    ewl_widget_show(dialog);

    o = ewl_dialog_set_button(EWL_STOCK_OK, EWL_RESPONSE_OK);
    ewl_container_child_append(EWL_CONTAINER(dialog), o);
    ewl_callback_append(o, EWL_CALLBACK_CLICKED, dialog_clicked_cb, dialog);
    ewl_widget_show(o);

    o = ewl_dialog_set_button(EWL_STOCK_CANCEL, EWL_RESPONSE_CANCEL);
    ewl_container_child_append(EWL_CONTAINER(dialog), o);
    ewl_callback_append(o, EWL_CALLBACK_CLICKED, dialog_clicked_cb, dialog);
    ewl_widget_show(o);
</programlisting>
</example>
Este ejemplo creará un <literal>Ewl_Dialog</literal> con dos botones:
un botón de OK y un botón de Cancel. El própio diálogo es creado con la llamada a 
<function>ewl_dialog_new()</function> pasándole la posición de los botones relativa a la 
propia ventana. Los valores posibles son:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para>EWL_POSITION_TOP</para></listitem>
 <listitem><para>EWL_POSITION_BOTTOM</para></listitem>
 <listitem><para>EWL_POSITION_LEFT</para></listitem>
 <listitem><para>EWL_POSITION_RIGHT</para></listitem>
</itemizedlist> 
</para>

<para>
Un <literal>Ewl_Dialog</literal> puede opcionalmente tener dibujada una linea horizontal para separar 
las dos secciones del diálogo. La linea se controla con <function>ewl_dialog_set_has_separator()</function> 
donde 0 significa no dibujar el separador y 1 significa dibujarlo. Hay una correspondiente
<function>ewl_dialog_get_has_separator()</function> que devuelve 1 si hay separador y 0 de si no lo hay.
</para>

<para>
El contenido del área principal de display de la caja es controlado por medio de la función 
<function>ewl_dialog_add_widget()</function>. En este caso añadimos un objeto <literal>Ewl_Text</literal>
al dialogo.
</para>

<para>
Una vez el diálogo ha sido inicializado necesitamos crear los botones deseados. Los botones son creados 
llamando a <function>ewl_dialog_set_button()</function>, que creará un botón. Los parámetros son la etiqueta 
del botón y el código de respuesta que devolver desde el botón. Hay varias etiquetas predefinidas, incluyendo:

<itemizedlist mark="bullet" spacing="compact">
 <listitem><para>EWL_STOCK_OK</para></listitem>
 <listitem><para>EWL_STOCK_APPLY</para></listitem>
 <listitem><para>EWL_STOCK_CANCEL</para></listitem>
 <listitem><para>EWL_STOCK_OPEN</para></listitem>
 <listitem><para>EWL_STOCK_SAVE</para></listitem>
 <listitem><para>EWL_STOCK_PAUSE</para></listitem>
 <listitem><para>EWL_STOCK_PLAY</para></listitem>
 <listitem><para>EWL_STOCK_STOP</para></listitem>
</itemizedlist>
Los códigos de respuesta predefinidos son:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para>EWL_RESPONSE_OPEN</para></listitem>
 <listitem><para>EWL_RESPONSE_SAVE</para></listitem>
 <listitem><para>EWL_RESPONSE_OK</para></listitem>
 <listitem><para>EWL_RESPONSE_CANCEL</para></listitem>
 <listitem><para>EWL_RESPONSE_APPLY</para></listitem>
 <listitem><para>EWL_RESPONSE_PLAY</para></listitem>
 <listitem><para>EWL_RESPONSE_PAUSE</para></listitem>
 <listitem><para>EWL_RESPONSE_STOP</para></listitem>
</itemizedlist>
Una vez que los botones son creados necesitan ser añadidos al diálogo y tener un callback añadido 
para su estado <literal>EWL_CALLBACK_CLICKED</literal>.
</para>

<para>
<example id="sec-EwlDialogCB">
<title>Callback de diálogo EWL</title>
<programlisting role="C">
void dialog_clicked_cb(Ewl_Widget *w, void *event, void *data) {
    int d = EWL_BUTTON_STOCK(w)->response_id;

    if (d == EWL_RESPONSE_OK)
        printf("OK\n");
    else if (d == EWL_RESPONSE_CANCEL)
        printf("CANCEL\n");

    ewl_widget_destroy(EWL_WIDGET(data));
}
</programlisting>
</example>
El código de respuesta del botón que fué pulsado está disponible en el propio widget 
<literal>Ewl_Button_Stock</literal> a través de su parámetro response_id. Usando este valor 
podemos determinar que botón fué pulsado. También pasamos el propio <literal>Ewl_Dialog</literal> 
mediante el parámetro de datos de manera que podemos destruir el diálogo cuando hemos terminado.
</para>
</sect1>

<!-- ################################### -->
<!-- EWL ENTRY -->
<sect1 id="sec-EwlEntry">
<title>ewl_entry</title>
<para>
La caja de entrada EWL está disponible cuando necesites recibir entrada de texto del usuario. La caja 
funciona en simples líneas, y el callback es accionado cuando el usuario presiona la tecla "Enter".
</para>

<para>
 <figure>
  <title>Una caja de entrada EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/entry.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejeplo de una caja de entrada EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>

<para>
 <example>
  <title>Creando una caja de entrada EWL</title>
  <programlisting role="C">
   Ewl_Widget *entry = ewl_entry_new();
   ewl_object_size_request(EWL_OBJECT(entry), 100, 15);
   ewl_object_padding_set(EWL_OBJECT(entry), 1, 1, 1, 1);
   ewl_callback_append(entry, EWL_CALLBACK_VALUE_CHANGED, entry_cb, NULL);
   ewl_widget_show(entry);
  </programlisting>
 </example> 
<literal>Ewl_Entry</literal> es un objeto bastante simple con el que trabajar, la 
única inicialización requerida es crear el nuevo objeto y vincular un callback para eventos 
<literal>EWL_CALLBACK_VALUE_CHANGED</literal>. Este ejemplo toma los pasos extra 
de seleccionar el tamaño con <function>ewl_object_size_request()</function> y añadir 
un poco de relleno al widget con <function>ewl_object_padding_set()</function>.
</para>

<para>
 <example>
  <title>callback de cambio de valor para Ewl_Entry</title>
  <programlisting role="C">
void entry_cb(Ewl_Widget *w, void *event, void *data) {
    char *s = ewl_entry_text_get(EWL_ENTRY(w));
    printf("%s\n", s);

    ewl_entry_text_set(EWL_ENTRY(w), "New Text");
}
  </programlisting>
 </example>
Este callback captura el valor actual del widget entrada con la llamada a 
<function>ewl_entry_text_get()</function> y entonces resetea el texto al valor "New Text" 
llamando a <function>ewl_entry_text_set()</function>.
</para>

<para>
El objeto <literal>Ewl_Entry</literal> te permite configurarsi el texto es o no editable con una llamada a 
<function>void ewl_entry_editable_set(Ewl_Entry *, unsigned int edit)</function>
donde <literal>edit</literal> es 0 para ineditable y 1 para editable.
</para>
</sect1>

<!-- ################################### -->
<!-- EWL FILEDIALOG -->
<sect1 id="sec-EwlFileDialog">
<title>ewl_filedialog</title>
<para>
A menudo se desea permitir al usuario abrir y grabar archivos. Esto puede ser fácilmente hecho con el 
uso de <literal>Ewl_Filedialog</literal>.
</para>
<para>
 <figure>
  <title>Un diálogo de archivo EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/file_dialog.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de un diálogo de archivo EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
Este diálogo de archivo ha sido empotrado en su propia ventana, pero podría haber sido puesto en 
otra ventana de la misma manera.
</para>

<para>
 <example>
  <title>Creando un diálogo de archivo EWL</title>
  <programlisting role="C">
   Ewl_Widget *filedialog = ewl_filedialog_new(EWL_FILEDIALOG_TYPE_OPEN);
   ewl_callback_append(filedialog, EWL_CALLBACK_VALUE_CHANGED, 
                            open_file_cb, NULL);
   ewl_widget_show(filedialog);
  </programlisting>
 </example>
Cuando el diálogo de archivo es creado especificas un tipo, bien <literal>EWL_FILDIALOG_TYPE_OPEN</literal> 
o bien <literal>EWL_FILEDIALOG_TYPE_SAVE</literal>, dependiendo del tipo de diálogo de archivo deseado. El 
callback <literal>EWL_CALLBACK_VALUE_CHANGED</literal> será ejecutado cuando el usuario pulse el botón 'Open' 
en el diálogo.
</para>

<para>
También es posible empaquetar otros widgets en el propio diálogo de archivo. Esto es hecho por medio de 
la habitual <function>ewl_container_child_append()</function>. Así, si necesitaras, por ejemplo, añadir 
un botón "Home", crearías el botón y lo empaquetarías en el diálogo de archivo donde aparecerá abajo en la parte 
izquierda. 
</para>

<para>
Puedes cambiar el directorio que se ve actualmente en el diálogo de archivo ejecutando 
<function>void ewl_filedialog_set_directory(Ewl_Filedialog *, char *path)</function>
donde <literal>path</literal> es la ruta completa al directorio deseado.
</para>

<para>
 <example>
  <title>callback para Ewl_Filedialog open</title>
  <programlisting role="C">
void open_file_cb(Ewl_Widget *w, void *event, void *data) {
    char *filename = (char *)event;
    printf("selected file %s\n", filename);
}
  </programlisting>
 </example>
El archivo que ha sido seleccionado es pasado al callback como parámetro <literal>event</literal>.
Si quieres quitar el diálogo de archivo puedes hacer algo similar a <literal>ewl_widget_hide(fd_win)</literal> 
donde <literal>fd_win</literal> es el objeto ventana que contiene el diálogo de archivo.
</para>
</sect1>

<!-- ################################### -->
<!-- EWL IMAGE -->
<sect1 id="sec-EwlImage">
<title>ewl_image</title>
<para>
<example>
 <title>Ewl_Image</title>
  <programlisting>
    Ewl_Widget *i = ewl_image_new("/usr/foo/img.png", NULL);
    ewl_widget_show(i);
 </programlisting>
</example>
La función<function>ewl_image_new()</function> toma dos parametros, la ruta a la imagen a cargar 
y la clave para los datos de imagen. La clave es usada principalmente para cargar grupos edje o datos 
con clave como imagen.
</para>
</sect1>

<!-- ################################### -->
<!-- EWL MENU -->
<sect1 id="sec-EwlMenu">
<title>ewl_menu</title>
<para>
</para>
</sect1>

<!-- ################################### -->
<!-- EWL NOTEBOOK -->
<sect1 id="sec-EwlNotebook">
<title>ewl_notebook</title>
<para>
 <figure>
  <title>Un libro de notas EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/notebook.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Example of an EWL Notebook</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>
<para>
</para>
</sect1>

<!-- ################################### -->
<!-- EWL PASSWORD -->
<sect1 id="sec-EwlPassword">
<title>ewl_password</title>
<para>
El widget <literal>ewl_password</literal> provee funcionalidad similar similar al widget <literal>ewl_text</literal> 
, excepto que cualquier texto tecleado no será mostrado, en su lugar un carácter oscurecedor configurable 
será mostrado.
</para>

<para>
 <figure>
  <title>Un diálogo de contraseña EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/passwd.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de un diálogo de contradeña EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>

<para>
<example>
<title>Creando un diálogo de contraseña EWL</title>
<programlisting role="C">
    Ewl_Widget *p = ewl_password_new("default");
    ewl_password_set_obscure(EWL_PASSWORD(p), "-");
    ewl_callback_append(p, EWL_CALLBACK_VALUE_CHANGED, passwd_cb, NULL);
    ewl_widget_show(p);
</programlisting>
</example>
El carácter oscurecedor por defecto es un carácter "*". Esto se puede cambiar fácilmente llamando a 
<function>ewl_password_set_obscure(Ewl_Password *, char)</function>.
Hay también una correspondiente función 
<function>char ewl_password_get_obscure(Ewl_Password *)</function> para 
obtener el carácter obscurecedor actual. Como con el widget 
<literal>ewl_text</literal> hay dos funciones para obtener y colocar el texto del widget:
<function>ewl_password_set_text(Ewl_Password *, char *)</function> y
<function>char *ewl_password_get_text(Ewl_Password *)</function>.
</para>

<para>
Cuando el usuario presiona la tecla enter en la caja de contraseña se activará un 
<literal>EWL_CALLBACK_VALUE_CHANGED</literal> will be triggered.
<example>
<title>callback de cambio de valor de Ewl_Password</title>
<programlisting role="C">
void passwd_cb(Ewl_Widget *, void *event, void *data) {
    char *text = ewl_password_get_text(EWL_PASSWORD(w));
    printf("text: %s\n", text);
}
</programlisting>
</example>
</para>
</sect1>

<!-- ################################### -->
<!-- EWL PROGRESSBAR -->
<sect1 id="sec-EwlProgressBar">
<title>ewl_progressbar</title>
<para>
 <figure>
  <title>Una barra de progreso EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/progressbar.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de una barra de progreso EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>
<para>
</para>
</sect1>

<!-- ################################### -->
<!-- EWL RADIO BUTTON -->
<sect1 id="sec-Ewl-RadioButton">
<title>ewl_radiobutton</title>
<para>
 <figure>
  <title>Un radiobutton EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/radiobutton.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de un radiobutton EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>
<para>
</para>
</sect1>

<!-- ################################### -->
<!-- EWL SCROLLPANE -->
<sect1 id="sec-EwlScrollpane">
<title>ewl_scrollpane</title>
<para>
</para>
</sect1>

<!-- ################################### -->
<!-- EWL SEEKER -->
<sect1 id="sec-EwlSeeker">
<title>ewl_seeker</title>
<para>
 <figure>
  <title>Un buscador EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/seeker.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de un buscador EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>
<para>
<example>
<title>Creando un buscador EWL</title>
<programlisting role="C">
    Ewl_Widget *s = ewl_seeker_new(EWL_ORIENTATION_HORIZONTAL);
    ewl_seeker_value_set(EWL_SEEKER(s), 5.0);
    ewl_seeker_range_set(EWL_SEEKER(s), 10.0);
    ewl_seeker_step_set(EWL_SEEKER(s), 1);
    ewl_callback_append(s, EWL_CALLBACK_VALUE_CHANGED, seeker_cb, NULL);
    ewl_widget_show(s);
</programlisting>
</example>
</para>

<para>
<example>
<title>Ewl_Seeker callback</title>
<programlisting role="C">
void seeker_cb(Ewl_Widget *w, void *event, void *data) {
    double val = ewl_seeker_value_get(EWL_SEEKER(w));
    printf("%f\n", val);
}
</programlisting>
</example>
</para>

</sect1>

<!-- ################################### -->
<!-- EWL SPINNER -->
<sect1 id="sec-EwlSpinner">
<title>ewl_spinner</title>
<para>
 <figure>
  <title>Un spinner EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/spinner.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de un spinner EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>
<para>
</para>
</sect1>

<!-- ################################### -->
<!-- EWL TABLE -->
<sect1 id="sec-EwlTable">
<title>ewl_table</title>
<para>
</para>
</sect1>

<!-- ################################### -->
<!-- EWL TEXT -->
<sect1 id="sec-EwlText">
<title>ewl_text</title>
<para>
El widget <literal>Ewl_Text</literal> provee un widget de texto multilínea. Puede ser usado cuando se 
requiere mostrar texto en una aplicación. Funciona bien con el <literal>Ewl_Scrollpane</literal> para
proveer un área de texto desplazable.
</para>
<para>
<example id="sec-EwlTextCode">
<title>Código Ewl_Text</title>
<programlisting role="C">
    Ewl_Widget *text = ewl_text_new("text");
    ewl_widget_show(text);
</programlisting>
</example>
Crear el objeto <literal>Ewl_Text</literal> es bastante simple, el objeto será iniciado para mostrar 
el parámetro a <function>ewl_text_new()</function>.
</para>

<para>
Una vez el objeto de texto es creado puedes cambiar el texto, recuperar el contenido del texto actual 
u obtener la longitud del texto con:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para><function>ewl_text_text_set(Ewl_Text *, char *)</function></para></listitem>
 <listitem><para><function>ewl_text_text_prepend(Ewl_Text *, char *)</function></para></listitem>
 <listitem><para><function>ewl_text_text_append(Ewl_Text *, char *)</function></para></listitem>
 <listitem><para><function>ewl_text_text_insert(Ewl_Text *, char *, int index)</function></para></listitem>
 <listitem><para><function>char *ewl_text_text_get(Ewl_Text *)</function></para></listitem>
 <listitem><para><function>int ewl_text_length_get(Ewl_Text *)</function></para></listitem>
</itemizedlist>
</para>

<para>
El widget <literal>Ewl_Text</literal> te permite hacer cambios de estilización al texto en el widget. 
Diferentes porciones del texto pueden ser de diferentes colores, fuentes, o estilos. El estilo aplicaco a un 
widget se basa en que está configurado cuando el texto es añadido al widget. Así, si quieres que tu texto 
sea rojo, necesitas seleccionar el color del objeto <literal>Ewl_Text</literal> <emphasis>antes</emphasis>, 
añadiendo el texto después.
</para>

<para>
El color del texto puede ser manipulado con la llamada 
<function>ewl_text_color_set(Ewl_Text *, int r, int g, int b, int a)</function>
, mientras que la información de color actual puede ser obtenida con 
<function>ewl_text_color_get(Ewl_Text *, int *r, int *g, int *b, int *a)</function>.
</para>

<para>
La configuración de fuentes del texto puede ser manipulada con 
<function>ewl_text_font_set(Ewl_Text *, char *font, int size)</function>
. Con las llamadas para obtener el nombre de fuente actual y el tamaño definidas como:
<function>char *ewl_text_font_get(Ewl_Text *)</function> and
<function>int ewl_text_font_size_get(Ewl_Text *)</function>.
</para>

<para>
Para obtener o colocar la alineación del widget de texto hay dos funciones:
<function>ewl_text_align_set(Ewl_Text *, unsigned int align)</function>
y <function>unsigned int ewl_text_align_get(Ewl_Text *)</function>. Donde el parámetro 
de alineación es una de las opciones de alineación EWL:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para>EWL_FLAG_ALIGN_CENTER</para></listitem>
 <listitem><para>EWL_FLAG_ALIGN_LEFT</para></listitem>
 <listitem><para>EWL_FLAG_ALIGN_RIGHT</para></listitem>
 <listitem><para>EWL_FLAG_ALIGN_TOP</para></listitem>
 <listitem><para>EWL_FLAG_ALIGN_BOTTOM</para></listitem>
</itemizedlist>
</para>

<para>
También es posible colocar el estilo del texto. Esto puede incluir cosas como hacer el texto 
en negrita o colocar sombras suaves. Los estilos que están disponibles son obtenidos por medio 
de la librería Etox e incluyen actualmente:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para>bold</para></listitem>
 <listitem><para>outline</para></listitem>
 <listitem><para>plain</para></listitem>
 <listitem><para>raised</para></listitem>
 <listitem><para>shadow</para></listitem>
 <listitem><para>soft_shadow</para></listitem>
</itemizedlist>
</para>
</sect1>

<!-- ################################### -->
<!-- EWL TOOLTIP -->
<sect1 id="sec-EwlTooltip">
<title>ewl_tooltip</title>
<para>
 <figure>
  <title>Un tooltip EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/tooltip.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de un tooltip EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>
<para>
</para>
</sect1>

<!-- ################################### -->
<!-- EWL TREE -->
<sect1 id="sec-EwlTree">
<title>ewl_tree</title>
<para>
</para>
</sect1>

<!-- ################################### -->
<!-- EWL MEDIA -->
<sect1 id="sec-EwlMedia">
<title>ewl_media</title>
<para>
El widget <literal>Ewl_Media</literal> permite empotrar objetos de vídeo en tu aplicación. Esto es hecho 
mediante un envoltorio de la librería Emotion.
</para>

<para>
 <figure>
  <title>Un objeto media EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/ewl_media.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de un objeto Media EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>

<para>
<example id="sec-EwlMediaCode">
<title>Ewl_Media code</title>
<programlisting role="C">
    Ewl_Media *m = ewl_media_new(file);
    ewl_callback_append(m, EWL_CALLBACK_REALIZE, video_realize_cb, NULL);
    ewl_callback_append(m, EWL_CALLBACK_VALUE_CHANGED, video_change_cb, NULL);
    ewl_widget_show(m);
</programlisting>
</example>
Crear el objeto de vídeo básico es tan simple como crear el objeto y mostrarlo ( suponiendo que lo hayas 
añadido a cualquier contenedor en el que esté colocado ). Vinculamos los dos callbacks
<literal>EWL_CALLBACK_REALIZE</literal> y
<literal>EWL_CALLBACK_VALUE_CHANGED</literal>. Vinculamos el callback realize para poder determinar la 
longitud del vídeo a ser mostrado si lo deseamos. Esto solo está disponible después de que el vídeo 
haya sido realizado, y devolverá 0 hasta que haya sido realizado. El callback de cambio de valor 
será llamado cuando emotion avance el vídeo. Esto puede ser usado para un temporizador o una seekbar y 
hacer que autoavance con el vídeo.
</para>

<para>
<example>
 <title>Ewl_Media callbacks</title>
 <programlisting role="C">
void video_realize_cb(Ewl_Widget *w, void *event, void *data) {
    double len = ewl_media_length_get(EWL_MEDIA(video));
}   

void video_change_cb(Ewl_Widget *w, void *event, void *data) {
    char buf[512];
    int h, m;
    double s;
                
    ewl_media_position_time_get(EWL_MEDIA(video), &amp;h, &amp;m, &amp;s);
    snprintf(buf, sizeof(buf), "%02i:%02i:%02.0f", h, m, s);
}
 </programlisting>
</example>
</para>

<para>
El vídeo que está siendo mostrado puede ser cambiado llamando a 
<function>ewl_media_media_set(Ewl_Media *, char *)</function> o si solo quieres saber lo que se 
está reproduciendo actualmente puedes llamar a <function>char *ewl_media_media_get(Ewl_Media *)</function>. 
La longitud del vídeo actual puede ser obtenida llamando a <function>int
ewl_media_length_get(Ewl_Media *)</function>. La longitud puede también ser obtenida como valor 
de tiempo llamando a <function>ewl_media_length_time_get(Ewl_Media *, int h, int m, double s)</function>.
</para>

<para>
Puedes empezar la reproducción de vídeo pasando 1 a <function>ewl_media_play_set(Ewl_Media *, int)</function> 
o parar el video pasando 0 a la misma función.
</para>

<para>
Para determinar si el codec de video permite búsqueda en el video puedes llamar a 
<function>int ewl_media_seekable_get(Ewl_Media *)</function> que devolverá 1 si el video permite búsqueda, 
y 0 si no.
<function>double ewl_media_position_get(Ewl_Media *)</function> es usada para determinar la posición actual 
en el video, mientras que<function>ewl_media_position_set(Ewl_Media *, double position)</function>
puede ser usada para seleccionar la posición en el video. Este valor puede también ser obtenido como 
horas, minutos, y segundos llamando a <function>ewl_media_position_time_get(Ewl_Media *, int h, int m, double s)</function>.
</para>

<para>
Si quieres cambiar la configuración de audio del video hay varias funciones disponibles. Estas 
incluyen la habilidad de obtener/colocar la configuración de mute:
<function>int ewl_media_audio_mute_get(Ewl_Media *)</function> y
<function>ewl_media_audio_mute_set(Ewl_Media *, int)</function>. También puedes obtener/colocar el 
volumen del video por medio de: <function>int ewl_media_audio_volume_get(Ewl_Media *)</function> y
<function>ewl_media_audio_volume_set(Ewl_Media *, int)</function>.
</para>
</sect1>

<!-- ################################### -->
<!-- EWL WINDOW -->
<sect1 id="sec-EwlWindow">
<title>ewl_window</title>
<para>
Una ewl_window será usada por toda aplicación EWL. Esta es la ventana que mostrará todos los otros 
widgets que se deseen.
</para>

<para>
 <figure>
  <title>Una ventana EWL</title>
  <inlinemediaobject>
   <imageobject>
    <imagedata fileref="img/create_window.png" format="png" />
   </imageobject>
   <textobject>
    <phrase>Ejemplo de una ventana EWL</phrase>
   </textobject>
  </inlinemediaobject>
 </figure>
</para>

<para>
 <example id="sec-EwlWindowCode">
  <title>Creando una ventana EWL</title>
  <programlisting role="C">
    Ewl_Widget *window = ewl_window_new();
    ewl_window_title_set(EWL_WINDOW(window), "foo window");
    ewl_window_class_set(EWL_WINDOW(window), "foo_class");
    ewl_window_name_set(EWL_WINDOW(window), "foo_name");
    ewl_object_size_request(EWL_OBJECT(window), 300, 400);
    ewl_callback_append(window, EWL_CALLBACK_DELETE_WINDOW, win_del_cb, NULL);
    ewl_widget_show(window);
  </programlisting>
 </example>
Iniciar la ventana básica es bastante simple. Tomamos los pasos extra de llamar:
<function>ewl_window_title_set()</function>, 
<function>ewl_window_name_set()</function> y <function>ewl_window_class_set()</function>
para rellenar la información que usa el gestor de ventanas.
</para>

<para>
Dado que la ventana es un <literal>Ewl_Object</literal> como cualquier otro usamos <function>ewl_object_size_request()</function> 
para requerir el tamaño inicial de nuestra ventana. Podríamos haber llamado también a <function>ewl_object_minimum_size_set()</function> 
y <function>ewl_object_maximum_size_set()</function> para restringir los tamaños mínimo y máximo de 
nuestra ventana.
</para>

<para>
El callback principal usado por una Ewl_Window es <literal>EWL_CALLBACK_DELETE_WINDOW</literal>.
Este será llamado cuando la ventana sea destruida por el gestor de ventanas. Debería ser usado para limpiar 
los recursos que la aplicación ha usado antes de salir de la aplicación.
</para>

<para>
 <example id="sec-EwlWindowDestroyCb">
 <title>Ewl Window destroy callback</title>
 <programlisting role="C">
void win_del_cb(Ewl_Widget *w, void *event, void *data) {
    ewl_widget_destroy(w);
    ewl_main_quit();
}
 </programlisting>
 </example>
</para>

<para>
Algunas de las otras operaciones relacionadas con el objeto Ewl_Window son:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para><function>char *ewl_window_title_get(Ewl_Window *)</function></para></listitem>
 <listitem><para><function>char *ewl_window_name_get(Ewl_Window *)</function></para></listitem>
 <listitem><para><function>char *ewl_window_class_get(Ewl_Window *)</function></para></listitem>
 <listitem><para><function>void ewl_window_borderless_set(Ewl_Window *)</function></para></listitem>
 <listitem><para><function>void ewl_window_move(Ewl_Window *, int x, int y)</function></para></listitem>
 <listitem><para>
  <function>void ewl_window_position_get(Ewl_Window *, int *x, int *y)</function>
 </para></listitem>
</itemizedlist>
Las primeras tres llamadas son bastante autoexplicatorias. <function>ewl_window_borderless_set()</function> 
puede ser usada para decir al gestor de ventanas que no muestre ninguna decoración alrededor de la ventana, 
esto incluye el borde y la barra de título. La función <function>ewl_window_move()</function> es usada para
posicionar la ventana en un lugar específico del escritorio, indexado desde la esquina superior izquierda.
También hay una función <function>ewl_window_position_get()</function> que devolverá la posición 
de la ventana en el escritorio.
</para>
</sect1>

</chapter>


