<chapter id="ch-GettingStarted">
<title>Getting Started</title>

<sect1 id="sec-Installation">
<title>Getting EWL installed</title>

<para>
Before using EWL you need to have the libraries installed on your computer.
EWL can be retrieved from the Enlightenment CVS and directions on how this is done
can be found at: <literal><ulink url="http://www.enlightenment.org/pages/source.html"> 
http://www.enlightenment.org/pages/source.html </ulink></literal> along with detailed
installation directions.
</para>

<para>
You will need to install a lot of dependencies before being able to install
EWL, this is because it depends on many of the EFL libraries being present on the
system.
</para>

<para>
Once you have the other EFL libraries installed, installing EWL is as simple as:
<screen>
    ./configure;
    make;
    sudo make install;
</screen>
</para>
</sect1>

<sect1 id="sec-CreateWindow">
<title>Creating a simple Window</title>
<para>
The first step in creating an EWL application is to get the main window
to be displayed on the screen.
</para>

<programlisting role="C">
#include &lt;Ewl.h&gt;

void destroy_cb(Ewl_Widget *w, void *event, void *data) {
    ewl_widget_destroy(w);
    ewl_main_quit();
}

int main(int argc, char ** argv) {
    Ewl_Widget *win = NULL;

    if (!ewl_init(&amp;argc, argv)) {
        printf("Unable to init ewl\n");
        return 1;
    }

    win = ewl_window_new();
    ewl_window_title_set(EWL_WINDOW(win), "EWL Window");
    ewl_window_name_set(EWL_WINDOW(win), "EWL_WINDOW");
    ewl_window_class_set(EWL_WINDOW(win), "EWLWindow");
    ewl_object_size_request(EWL_OBJECT(win), 200, 100);
    ewl_callback_append(win, EWL_CALLBACK_DELETE_WINDOW, destroy_cb, NULL);
    ewl_widget_show(win);

    ewl_main();
    return 0;
}
</programlisting>

<para>This program can be compiled with a simple:
<screen>
zero@oberon [create_window] -&gt; gcc -o create_window main.c \
 `ewl-config --cflags --libs`
</screen>

And if executed should produce something similar to:
</para>

<para>
 <inlinemediaobject>
  <imageobject>
   <imagedata fileref="img/create_window.png" format="png" />
  </imageobject>
  <textobject>
   <phrase>Example of empty EWL window</phrase>
  </textobject>
 </inlinemediaobject>
</para>

<para>
Now that we know what we're making, lets go over the code in more detail.
</para>

<programlisting role="C">
#include &lt;Ewl.h&gt;
</programlisting>

<para>
All EWL applications will start with the &lt;Ewl.h&gt; include. This will pull in all
of the other header files that EWL requires to function.
</para>

<programlisting role="C">
void destroy_cb(Ewl_Widget *w, void *event, void *data) {
    ewl_widget_destroy(w);
    ewl_main_quit();
}
</programlisting>
<para>
The <function>destroy_cb</function> will be used by EWL when the window 
manager requests the application terminate. Callbacks will be described
further in the <link linkend="sec-Callbacks">Callbacks</link> section.
</para>

<para>
The <function>ewl_widget_destroy()</function> is used to signal to EWL that we
no longer need the given widget, in this case the window, and for EWL to clean up the
resources used by that widget.
</para>
  
<para>
Finally, we call <function>ewl_main_quit()</function> which causes EWL to exit
its main processing loop and return from the <function>ewl_main()</function> function.
</para>

<programlisting role="C">
int main(int argc, char ** argv) {
    Ewl_Widget *win = NULL;

    if (!ewl_init(&amp;argc, argv)) {
        printf("Unable to init ewl\n");
        return 1;
    }
</programlisting>
<para>
Before we can actually use EWL we must initialize the library. This is done through
the call to <function>ewl_init()</function>. We pass the argc and argv parameters from main
to EWL as there are a few specific switches EWL parses from the arguments.
</para>

<para>These switches currently include:</para>
<itemizedlist mark="bullet" spacing="compact">
 <title>EWL command line switches</title>
 <listitem><para>--ewl-theme &lt;name&gt;</para></listitem>
 <listitem><para>--ewl-print-theme-keys</para></listitem>
 <listitem><para>--ewl-segv</para></listitem>
 <listitem><para>--ewl-software-x11</para></listitem>
 <listitem><para>--ewl-gl-x11</para></listitem>
 <listitem><para>--ewl-fb</para></listitem>
</itemizedlist>
<para>
The &lt;name&gt; parameter to the --ewl-theme switch is the name of the theme you wish
to be used. This can be either located in one of the system directories, or in the
local directory.
</para>

<para>
If EWL was able to successfully initialize itself the call to <function>ewl_init()</function>
will return a value &gt; 0. If it was unsuccessful there is no real point in continuing as
EWL will not function correctly.
</para>

<programlisting role="C">
    win = ewl_window_new();
    ewl_window_title_set(EWL_WINDOW(win), "EWL Window");
    ewl_window_name_set(EWL_WINDOW(win), "EWL_WINDOW");
    ewl_window_class_set(EWL_WINDOW(win), "EWLWindow");
    ewl_object_size_request(EWL_OBJECT(win), 200, 100);
    ewl_callback_append(win, EWL_CALLBACK_DELETE_WINDOW, destroy_cb, NULL);
    ewl_widget_show(win);
</programlisting>
<para>
This is where the actual window is created. A call to <function>ewl_window_new()</function>
creates the new, empty window. We then take that window and start attaching data. We begin
by setting the title with <function>ewl_window_title_set()</function>, which will set
the string to be displayed by the window manager on the top of the window. The next two
function calls, <function>ewl_window_name_set()</function> and 
<function>ewl_window_class_set()</function> set data that will be used by the window manager
to better manage your application.
</para>

<para>
We then proceed to set the base size for the window with a call to 
<function>ewl_object_size_request()</function>. The second and third parameters (200, 100)
specify the width and height we wish the window to have on creation. You'll notice that
this call casts to <literal>EWL_OBJECT()</literal>. This is because of the hierarchy of 
widgets that EWL provides, (further described in the <link linkend="ch-OjbectHierarchy">
Object Hierarchy</link> chapter) an ewl_window is a ewl_object so we can use the
ewl_object operations on an ewl_window.
</para>

<para>
We then proceed to add the delete callback to the window with a call to
<function>ewl_callback_append</function>. The second parameter of which is the
type of signal we wish to listen too, the third is the function to call and finally
the fourth is any user data to be sent to the callback.
</para>

<para>
Once the window is all set up and ready to go, a simple call to 
<function>ewl_widget_show()</function> will have EWL display the window.
</para>

<programlisting role="C">
    ewl_main();
    return 0;
}
</programlisting>
<para>
The call to <function>ewl_main()</function> will tell EWL to start its main processing
loop waiting on any signals. <function>ewl_main()</function> will handle the shutdown
of EWL when the main processing loop is exited.
</para>

<para>
That's it. Although it's probably one of the simplest EWL applications that can be produced,
it will be used as a basis for many of the other examples presented in this tutorial, and
many EWL applications that are produced.
</para>
</sect1>

<sect1 id="sec-HelloWorld">
<title>Hello World</title>
<para>
Once you have a window on the screen its time to do something more fun with it. So, following
in the grand tradition, something with Hello in it.
</para>

<para>I am only going to explain the portions of the program which have not already been 
seen. If there is something you do not understand please reference the previous section
and it should be explained there.</para>

<programlisting role="C">
#include &lt;stdio.h&gt;
#include &lt;Ewl.h&gt;

void destroy_cb(Ewl_Widget *w, void *event, void *data) {
    ewl_widget_destroy(w);
    ewl_main_quit();
}

void text_update_cb(Ewl_Widget *w, void *event, void *data) {
    char *s = NULL;
    Ewl_Widget *label = NULL;
    char buf[BUFSIZ];

    s = ewl_entry_text_get(EWL_ENTRY(w));
    label = (Ewl_Widget *)data;

    snprintf(buf, BUFSIZ, "Hello %s", s);
    ewl_text_text_set(EWL_TEXT(label), buf);

    free(s);
    return;
}

int main(int argc, char ** argv) {
    Ewl_Widget *win = NULL;
    Ewl_Widget *box = NULL;
    Ewl_Widget *label = NULL;
    Ewl_Widget *o = NULL;

    /* init the library */
    if (!ewl_init(&amp;argc, argv)) {
        printf("Unable to initialize EWL\n");
        return 1;
    }

    /* create the window */
    win = ewl_window_new();
    ewl_window_title_set(EWL_WINDOW(win), "Hello world");
    ewl_window_class_set(EWL_WINDOW(win), "hello");
    ewl_window_name_set(EWL_WINDOW(win), "hello");
    ewl_object_size_request(EWL_OBJECT(win), 200, 50);
    ewl_callback_append(win, EWL_CALLBACK_DELETE_WINDOW, destroy_cb, NULL);
    ewl_widget_show(win);

    /* create the container */
    box = ewl_vbox_new();
    ewl_container_child_append(EWL_CONTAINER(win), box);
    ewl_object_fill_policy_set(EWL_OBJECT(box), EWL_FLAG_FILL_ALL);
    ewl_widget_show(box);

    /* create text label */
    label = ewl_text_new(NULL);
    ewl_container_child_append(EWL_CONTAINER(box), label);
    ewl_object_alignment_set(EWL_OBJECT(label), EWL_FLAG_ALIGN_CENTER);
    ewl_text_style_set(EWL_TEXT(label), "soft_shadow");
    ewl_text_color_set(EWL_TEXT(label), 255, 0, 0, 255);
    ewl_text_text_set(EWL_TEXT(label), "hello");
    ewl_widget_show(label);

    /* create the entry */
    o = ewl_entry_new("");
    ewl_container_child_append(EWL_CONTAINER(box), o);
    ewl_object_alignment_set(EWL_OBJECT(o), EWL_FLAG_ALIGN_CENTER);
    ewl_object_padding_set(EWL_OBJECT(o), 5, 5, 5, 0);
    ewl_entry_color_set(EWL_ENTRY(o), 0, 0, 0, 255);
    ewl_callback_append(o, EWL_CALLBACK_VALUE_CHANGED, text_update_cb, label);
    ewl_widget_show(o);

    ewl_main();
    return 0;
}
</programlisting>
<para>
If you compile and run this application, in the same fashion as the first example,
you should see something similar to the following window.
</para>

<para>
 <inlinemediaobject>
  <imageobject>
   <imagedata fileref="img/hello_world.png" format="png" />
  </imageobject>
  <textobject>
   <phrase>Simple Hello World application</phrase>
  </textobject>
 </inlinemediaobject>
</para>

<para>
This one's a bit longer than the simple creating of a window, but then it also includes
more functionality. If you run this program you should see a simple window with a bit
of text saying 'Hello' at the top and a text area. Typing in the text area and hitting
'Enter' will display 'Hello' plus whatever you've typed.
</para>

<para>
The 'Hello' string has had a bit of text styling applied. You can see that the text
has had a simple colour change applied and is displayed with a drop shadow.
</para>

<para>
Now that you know what it does, lets take a look at the new bits of code this
example introduce.
</para>

<programlisting>
void text_update_cb(Ewl_Widget *w, void *event, void *data) {
    char *s = NULL;
    Ewl_Widget *label = NULL;
    char buf[BUFSIZ];

    s = ewl_entry_text_get(EWL_ENTRY(w));
    label = (Ewl_Widget *)data;

    snprintf(buf, BUFSIZ, "Hello %s", s);
    ewl_text_text_set(EWL_TEXT(label), buf);

    free(s);
    return;
}
</programlisting>
<para>
The <function>text_update_cb()</function> is the callback we are going to register
for when the user has pressed 'Enter' in the text field. It has the same signature
as the destroy callback, and all other EWL callbacks that we will be registering.
</para>

<para>
The text that has been entered is retrieved with a call to 
<function>ewl_entry_text_get()</function> passing the entry widget from which
we want to retrieve the text. This will return a pointer to the text string, 
it is the applications responsibility to free this pointer.
</para>

<para>
We then cast the <literal>data</literal> parameter into a <literal>Ewl_Widget</literal>.
This is because, as you will see in the register callback, we are attaching a widget to
this callback as a data parameter.
</para>

<para>
We can then take this new text and replace the contents of the current text label
by calling <function>ewl_text_text_set()</function> passing the text object and
the text to be displayed.
</para>

<programlisting role="C">
    box = ewl_vbox_new();
    ewl_container_child_append(EWL_CONTAINER(win), box);
    ewl_object_fill_policy_set(EWL_OBJECT(box), EWL_FLAG_FILL_ALL);
    ewl_widget_show(box);
</programlisting>
<para>
While we could just attach any widgets onto the main application window, it is a bit
cleaner to attach the widgets into a box that is attached to the main window. The
box is created with a call to <function>ewl_vbox_new()</function> creating a 
vertical box layout. We could have used <function>ewl_hbox_new()</function>
if we desired a horizontal box instead of a vertical one. Once the box is created
we attach it to the window by calling <function>ewl_container_child_append()</function>.
This places the given widget into the container as the next element. Containers are packed
from top to bottom, or left to right, so the order elements are inserted into the 
container effect there appearance on screen. Lastly, before showing the widget,
we attach a fill policy with <function>ewl_object_fill_policy_set()</function>. The fill
policy changes the way the object fills in its available space.
</para>
<para>
The possible fill policies are:
</para>
<itemizedlist mark="bullet" spacing="compact">
 <title>EWL Fill Flags</title>
 <listitem><para>EWL_FLAG_FILL_NONE</para></listitem>
 <listitem><para>EWL_FLAG_FILL_HSHRINK</para></listitem>
 <listitem><para>EWL_FLAG_FILL_VSHRINK</para></listitem>
 <listitem><para>EWL_FLAG_FILL_SHRINK</para></listitem>
 <listitem><para>EWL_FLAG_FILL_HFILL</para></listitem>
 <listitem><para>EWL_FLAG_FILL_VFILL</para></listitem>
 <listitem><para>EWL_FLAG_FILL_FILL</para></listitem>
 <listitem><para>EWL_FLAG_FILL_ALL</para></listitem>
</itemizedlist>
<para>
All of which should be pretty self explanatory, with the exceptions of, 
<literal>EWL_FLAG_FILL_SHRINK</literal>, <literal>EWL_FLAG_FILL_FILL</literal>
and <literal>EWL_FLAG_FILL_ALL</literal>. The SHRINK flag is the or of
the two HSHRINK and VSHRINK flags. The FILL flag is the or of the 
two HFILL and VFILL flags. Finally the ALL flag is the or of the
two SHRINK and FILL flags.
</para>

<programlisting role="C">
    label = ewl_text_new(NULL);
    ewl_container_child_append(EWL_CONTAINER(box), label);
    ewl_object_alignment_set(EWL_OBJECT(label), EWL_FLAG_ALIGN_CENTER);
    ewl_text_style_set(EWL_TEXT(label), "soft_shadow");
    ewl_text_color_set(EWL_TEXT(label), 255, 0, 0, 255);
    ewl_text_text_set(EWL_TEXT(label), "Hello");
    ewl_widget_show(label);
</programlisting>
<para>
Now that we have our containing box set up, we create the actual text element
that is going to function as our label. The label is created with a
call to <function>ewl_text_new()</function> in this case, we pass NULL as the value
because we will be specifying our text after we attach some styling to the object. 
You can also pass a text string into <function>ewl_text_new()</function> if desired.
Just keep in mind that text styling happens for text that is added <emphasis>after</emphasis>
the styling is attached.
</para>

<para>
Once the widget is created we attach it to the box
with <function>ewl_container_child_append()</function>. Next we set
the alignment on the text object though <function>ewl_object_alignment_set()</function>.
This specifies how the contents will be aligned within the widget itself.
</para>

<para>
The alignment function will accept one of:
</para>
<itemizedlist mark="bullet" spacing="compact">
 <title>EWL Alignment Flags</title>
 <listitem><para>EWL_FLAG_ALIGN_CENTER</para></listitem>
 <listitem><para>EWL_FLAG_ALIGN_LEFT</para></listitem>
 <listitem><para>EWL_FLAG_ALIGN_RIGHT</para></listitem>
 <listitem><para>EWL_FLAG_ALIGN_TOP</para></listitem>
 <listitem><para>EWL_FLAG_ALIGN_BOTTOM</para></listitem>
</itemizedlist>

<para>
Once all the widget properties are specified, we attach some text formatting
properties to the widget. The first, <function>ewl_text_style_set()</function>,
sets the style of the text object. The styles change the appearance of the text
by applying some kind of filter, in this case, creating a 'soft shadow' appearance
to the widget. We then set the colour of the text to red by calling 
<function>ewl_text_color_set()</function>. There are four parameters to the colour
function, those being, red, green, blue and alpha.
</para>

<programlisting role="C">
    o = ewl_entry_new("");
    ewl_container_child_append(EWL_CONTAINER(box), o);
    ewl_object_alignment_set(EWL_OBJECT(o), EWL_FLAG_ALIGN_CENTER);
    ewl_object_padding_set(EWL_OBJECT(o), 5, 5, 5, 0);
    ewl_entry_color_set(EWL_ENTRY(o), 0, 0, 0, 255);
    ewl_callback_append(o, EWL_CALLBACK_VALUE_CHANGED, text_update_cb, label);
    ewl_widget_show(o);
</programlisting>
<para>
The final widget we create is a text entry box. This is done with a call to 
<function>ewl_entry_new()</function>. In this case we are giving &quot;&quot;
as the value, but an initial string could be given to be displayed in the entry box.
We do a similar set of initializations to the entry box, setting the alignment and
setting the text colour to black. The call to <function>ewl_object_padding_set()</function>
sets the amount of padding around the widget. The four parameters are, left, right,
top and bottom.
</para>

<para>
With that you should have a basic understanding of how EWL functions and how different
widgets are created and setup.
</para>
</sect1>

<sect1 id="sec-Callbacks">
<title>Callbacks</title>
<para>
The EWL is powered through the use of callbacks. A large amount of the internal work
of the library itself also works on callbacks.
</para>

<para>
A callback is a function that will be called when a specific event happens. These events
can be anything from the user clicking a button to the window being destroyed by the
window manager.
</para>

<para>
For the events that an application needs notification a callback is registered
through EWL. This is done with the <function>ewl_callback_append()</function>. This
function takes four parameters: the object to attach the callback too, the callback
desired, the callback function and any user data.
</para>

<para>
Some of the possible callbacks include:
</para>
<variablelist termlength="35" spacing="compact">
 <title>Possible EWL Callbacks</title>
 <varlistentry>
  <term>EWL_CALLBACK_DESTROY</term>
  <listitem>
   <para>The widget is freed</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_DELETE_WINDOW</term>
  <listitem>
   <para>The window is being closed</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_KEY_DOWN</term>
  <listitem>
   <para>A key was pressed down</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_KEY_UP</term>
  <listitem>
   <para>A key was released</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_MOUSE_DOWN</term>
  <listitem>
   <para>Mouse button was pressed down</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_MOUSE_UP</term>
  <listitem>
   <para>Mouse button was released</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_MOUSE_MOVE</term>
  <listitem>
   <para>Mouse was moved</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_MOUSE_WHEEL</term>
  <listitem>
   <para>Mouse wheel scrolled</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_FOCUS_IN</term>
  <listitem>
   <para>Mouse was placed over the widget</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_FOCUS_OUT</term>
  <listitem>
   <para>Mouse was moved away from the widget</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_SELECT</term>
  <listitem>
   <para>Widget was selected by mouse or key</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_DESELECT</term>
  <listitem>
   <para>Widget was deselected by mouse or key</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_CLICKED</term>
  <listitem>
   <para>Mouse was pressed and released on a widget</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_DOUBLE_CLICKED</term>
  <listitem>
   <para>Mouse was clicked twice quickly</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_HILITED</term>
  <listitem>
   <para>Mouse is over the widget</para>
  </listitem>
 </varlistentry>
 <varlistentry>
  <term>EWL_CALLBACK_VALUE_CHANGED</term>
  <listitem>
   <para>Value in widget changed</para>
  </listitem>
 </varlistentry>
</variablelist>

<para>
The callback function has a signature like 
<literal>void fcn(Ewl_Widget *, void *, void *)</literal>. The first parameter is the
widget that activated this callback. The second parameter is the event data and the
third parameter is the user attached data.
</para>

<para>
The event data is a type that relates to the callback itself. So, for example, when
the callback for <literal>EWL_CALLBACK_MOUSE_WHEEL</literal> is called the event
data will have a struct of type <literal>Ewl_Event_Mouse_Wheel</literal> and this
struct contains additional information about the event. In the wheel case, the
key modifiers, the mouse position and the direction of scroll.
</para>

<para>
The last parameter to the callback attach function is the user data. This allows you
to attach any data desired to be passed to the callback when it is executed. This
data will be provided to the callback in the form of its third parameter.
</para>
</sect1>
 
</chapter>


