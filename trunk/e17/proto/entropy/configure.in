dnl Process this file with autoconf to produce a configure script.

rm -f config.cache

AC_INIT(configure.in)

AC_DEFINE_UNQUOTED([CONFIGURED_WITH], "$*", [what options were given to configure])

AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

# AC_INIT_PACKAGE(entropy, 0.0.1, alex@logisticchaos.com)
AM_INIT_AUTOMAKE(entropy, 0.0.1)

AC_PREREQ(2.52)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_PROG_INSTALL
AC_PROG_CXX
AC_LANG(C)


AM_ENABLE_SHARED
dnl AM_DISABLE_STATIC
AC_LIBTOOL_DLOPEN
AM_PROG_LIBTOOL
# AM_WITH_DMALLOC

if test X"$enable_shared" = Xyes; then
 DLLDFLAGS=-export-dynamic
 AC_SUBST(DLLDFLAGS)
fi






dnl ###########################################################################
dnl # functions
dnl ###################

AC_C_CONST
AC_C_INLINE
AC_C_VOLATILE
AC_C_BIGENDIAN

AC_STRUCT_TM
AC_STRUCT_ST_BLKSIZE
AC_STRUCT_ST_BLOCKS

CFLAGS="$CFLAGS -D_FILE_OFFSET_BITS=64"

AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_UID_T
AC_TYPE_SIGNAL
AC_TYPE_OFF_T
AC_TYPE_MODE_T

AC_CHECK_TYPE(ulong, ,[AC_DEFINE(ulong, u_long,[FreeBSD compat])])

AC_CHECK_HEADERS([limits.h])

AC_HEADER_TIME

AC_CHECK_FUNCS([localtime_r])
AC_CHECK_FUNCS([nl_langinfo])
AC_CHECK_FUNCS([memset])
AC_CHECK_FUNCS([memmove])
AC_CHECK_FUNCS([strcasecmp])
AC_CHECK_FUNCS([strncasecmp])
AC_CHECK_FUNCS([strtol])
AC_CHECK_FUNCS([strstr])
AC_CHECK_FUNCS([strrchr])
AC_CHECK_FUNCS([strchr])
AC_CHECK_FUNCS([strdup])
AC_CHECK_FUNCS([select])

AC_CHECK_FUNCS([ftello])
AC_CHECK_FUNCS([fseeko])
AC_CHECK_FUNCS([strtoul])
AC_CHECK_FUNCS([strtoull])

AC_CHECK_FUNCS([statfs])
AC_CHECK_FUNCS([statvfs])

AC_SYS_LARGEFILE
# AC_SYS_LONG_FILE_NAMES

AC_FUNC_SELECT_ARGTYPES
AC_FUNC_STAT
AC_FUNC_MALLOC
AC_FUNC_FORK
AC_FUNC_MKTIME
AC_FUNC_LSTAT
AC_FUNC_CLOSEDIR_VOID

ACX_PTHREAD()

# inspired by Bruno Haible
langinfo=no
AC_TRY_LINK([#include <langinfo.h>],
      [char *cs=nl_langinfo(CODESET);],
      [AC_DEFINE(HAVE_LANGINFO_CODESET,1,[Have <langinfo.h> and nl_langinfo(CODESET).])
      langinfo=yes])


valgrind="no"
PKG_CHECK_MODULES(VALGRIND,valgrind,[AC_DEFINE(HAVE_VALGRIND, 1, build with valgrind detection)],
                                    [AC_MSG_NOTICE([Building without valgrind detection -- if you don't know what this means, you don't need this])])
AC_SUBST(VALGRIND_CFLAGS)
AC_SUBST(VALGRIND_LIBS)



btrace=no
AC_ARG_ENABLE(
   btrace,
   AC_HELP_STRING(
      [--enable-btrace],
      [build with extra debugging using libbtrace]
   ),
   [ac_btrace="$enableval"],
   [ac_btrace="no"]
)
AC_MSG_CHECKING(whether to link in libbtrace)
if test X"$ac_btrace" = Xyes; then
   AC_CHECK_HEADER(
      btrace.h,
      [AC_CHECK_LIB(
          btrace, btrace_print,
          [btrace_libs="-lbtrace"
           btrace=yes
           AC_DEFINE(HAVE_BTRACE, 1, add support for libbtrace)]
       )]
   )
fi
AC_SUBST(btrace_cflags)
AC_SUBST(btrace_libs)


AC_CHECK_HEADER(
   wordexp.h,
   AC_DEFINE(HAVE_WORDEXP, 1, [whether wordexp is present; otherwise glob will be used])
)


#check for ecore
AC_PATH_EFL(
   ecore,
   0.9.9,
   [
     AC_DEFINE(HAVE_ECORE, 1, have ECORE)
     ecore="ECORE "
   ],
   [
     AC_MSG_ERROR([No ECORE, can't build.])
   ]
)

#check for ewl
AC_PATH_EFL(
   ewl,
   0.0.4,
   [
     AC_DEFINE(HAVE_EWL, 1, have EWL)
     ewl="EWL "
     have_ewl="yes"
   ],
   [
     AC_MSG_ERROR([No EWL, can't build.])
     have_ewl="no"
   ]
)

#check for etk
AC_PATH_EFL(
   etk,
   0.1.0,
   [
     AC_DEFINE(HAVE_ETK, 1, have ETK)
     etk="ETK "
     AM_CONDITIONAL(HAVE_ETK, true)
     have_etk="yes"
   ],
   [
     AC_DEFINE(HAVE_ETK, 0, no ETK)
     AM_CONDITIONAL(HAVE_ETK, false)
     AC_MSG_WARN([No ETK, can't build ETK plugin.])
     have_etk="no"
   ]
)

#Check for evfs
AC_PATH_EFL(
   evfs,
   0.0.1,
   [
     AC_DEFINE(HAVE_EVFS, 1, have EVFS)
     evfs="EVFS "
   ],
   [
     AC_MSG_ERROR([No EVFS, can't build.])
   ]
)

# check for Imlib2
AC_PATH_EFL(
   imlib2,
   1.2.1,
   [
     AC_DEFINE(HAVE_IMLIB2, 1, have Imlib2)
     imlib2="Imlib2 "
     have_imlib2="yes"
   ],
   [
     AC_MSG_WARN([Without Imlib2 the number of image formats we can create thumbnails for will be greatly reduced. Getting Imlib2 is recommended.])
     have_imlib2="no"
   ]
)

# check for libpng
libpng_dir=""
have_libpng="no"
AC_ARG_WITH(
   libpng,
   AC_HELP_STRING(
      [--with-libpng=DIR],
      [use libpng in <DIR>]
   ),
   [libpng_dir=$withval],
   [have_libpng="no"]
)

if ! test x"$libpng_dir" = x"" ; then
   saved_CPPFLAGS="${CPPFLAGS}"
   saved_LDFLAGS="${LDFLAGS}"
   CPPFLAGS="${CPPFLAGS} -I$libpng_dir/include/libpng12"
   AC_CHECK_HEADER(
      [png.h],
      [LDFLAGS="${LDFLAGS} -L$libpng_dir/lib/ -lz -lm"
       AC_CHECK_LIB(
          [png],
          [main],
          [libpng_libs="-L$libpng_dir/lib/ -lz -lm"
           AC_DEFINE(HAVE_LIBPNG,1,[have libpng for thumbnailing])
           libpng="PNG "
           have_libpng="yes"],
          [AC_MSG_WARN(libpng library not in $libpng_dir/lib)]
       )
       libpng_cflags="-I$libpng_dir/include/libpng12"],
      [AC_MSG_WARN(libpng headers not in $libpng_dir/include/libpng12)]
   )
   CPPFLAGS="${saved_CPPFLAGS}"
   LDFLAGS="${saved_LDFLAGS}"
fi

if test x"$have_libpng" = x"no" ; then
   AC_PATH_GENERIC(
      libpng,
      1.2.8,
      [have_libpng="yes"
       libpng_cflags=`libpng-config --cflags`
       libpng_libs=`libpng-config --libs`
       AC_DEFINE(HAVE_LIBPNG,1,[have libpng for thumbnailing])
       libpng="PNG "
       have_libpng="yes"],
      [AC_MSG_WARN(libpng-config not in your PATH)]
   )
fi

if test x"$have_libpng" = x"no" ; then
   PKG_CHECK_MODULES(
      PNG,
      libpng12 >= 1.2.8,
      [have_libpng="yes"
       libpng_cflags=`pkg-config --cflags`
       libpng_libs=`pkg-config --libs`
       AC_DEFINE(HAVE_LIBPNG,1,[have libpng for thumbnailing])
       libpng="PNG "
       have_libpng="yes"],
      [AC_MSG_WARN([No luck, guy. No pretty thumbnailing for you !])]
   )
fi
AC_SUBST(libpng_cflags)
AC_SUBST(libpng_libs)

AC_PATH_GENERIC(epsilon, 0.3.0,
  [ ],
  [ AC_MSG_ERROR(Cannot find epsilon) ]
)





dnl Check for F_NOTIFY.
dnl We don't really have to, but it's nice to let the user know in the summary.
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
#define _GNU_SOURCE
#include <fcntl.h>
]],[[int x=F_NOTIFY;]])],[fnotify="with F_NOTIFY support"],
                         [fnotify="without F_NOTIFY support"])



dnl ###########################################################################
dnl ###########################################################################
dnl ###########################################################################

dnl prefix
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_PREFIX,
  "${ac_default_prefix}", Prefix)
else
  AC_DEFINE_UNQUOTED(PACKAGE_PREFIX, "${prefix}", Prefix)
fi

dnl Set PACKAGE_LOCALE_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR,
  "${ac_default_prefix}/${DATADIRNAME}/locale", locale)
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale", locale)
fi

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR,
    "${ac_default_prefix}/share/${PACKAGE}", "")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", data)
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}", data)
fi

dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}", src)

dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl



dnl pthread.
AC_SUBST(PTHREAD_LIBS)
AC_SUBST(PTHREAD_CFLAGS)
AC_SUBST(PTHREAD_CC)



dnl
dnl Adjust the Makefile.am conditionals accordingly
dnl

AC_OUTPUT([
Makefile
images/Makefile
src/Makefile
src/plugins/Makefile
])

#####################################################################
## Info

echo
echo
echo
echo "------------------------------------------------------------------------"
echo "$PACKAGE $VERSION"
echo "------------------------------------------------------------------------"
echo
echo "Configuration Options Summary:"
echo
echo "  EWL plugin..............: $have_ewl"
echo "  ETK plugin..............: $have_etk"
echo "  Thumbnailing............: $have_libpng"
echo "  Imlib2..................: $have_imlib2"
echo
echo "Installation Path.........: $prefix"
echo
echo "Compilation...............: make"
echo "Installation..............: make install"
echo
