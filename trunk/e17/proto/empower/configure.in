dnl Process this file with autoconf to produce a configure script.

# get rid of that stupid cache mechanism
rm -f config.cache

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(empower, 0.2.0)
AM_CONFIG_HEADER(src/bin/config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST
AM_ENABLE_SHARED
AM_PROG_LIBTOOL

AM_WITH_DMALLOC

AM_PROG_CC_C_O

dnl Add the languages which your application supports here.
ALL_LINGUAS=""

dnl Set PACKAGE_LOCALE_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale", [Locale-specific data directory])
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale", [Locale-specific data directory])
fi

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", [Shared Data Directory])
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", [Shared Data Directory])
fi

dnl Set PACKAGE_BIN_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/bin'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${ac_default_prefix}/bin", [Installation directory for user executables])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${prefix}/bin", [Installation directory for user executables])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${bindir}", [Installation directory for user executables])
fi

dnl Set PACKAGE_LIB_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/lib'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${ac_default_prefix}/lib", [Installation directory for libraries])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${prefix}/lib", [Installation directory for libraries])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${libdir}", [Installation directory for libraries])
fi

dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}", [Source code directory])

PROG="evas-config";
AC_PATH_PROG(EVAS_CONFIG, $PROG, "", $PATH)
if test -z "$EVAS_CONFIG" ; then
  echo $PROG " is not in your \$PATH. Please ensure it is.";
  echo "Read the manual page for you shell as to how to extend your path.";
  AC_MSG_ERROR(Cannot find $PROG)
fi
evas_cflags=`$EVAS_CONFIG --cflags`
evas_libs=`$EVAS_CONFIG --libs`
AC_SUBST(evas_cflags)
AC_SUBST(evas_libs)

PROG="ecore-config";
AC_PATH_PROG(ECORE_CONFIG, $PROG, "", $PATH)
if test -z "$ECORE_CONFIG" ; then
  echo $PROG " is not in your \$PATH. Please ensure it is.";
  echo "Read the manual page for you shell as to how to extend your path.";
  AC_MSG_ERROR(Cannot find $PROG)
fi
ecore_cflags=`$ECORE_CONFIG --cflags`
ecore_libs=`$ECORE_CONFIG --libs`
AC_SUBST(ecore_cflags)
AC_SUBST(ecore_libs)

#PROG="ewl-config";
#AC_PATH_PROG(EWL_CONFIG, $PROG, "", $PATH)
#if test -z "$EWL_CONFIG" ; then.
#    echo $PROG " is not in your \$PATH. Please ensure it is.";
#    echo "Read the manual page for your shell as to how to extend your path.";
#    AC_MSG_ERROR(Cannot find $PROG)
#fi


#PROG="etk-config";
#AC_PATH_PROG(ETK_CONFIG, $PROG, "", $PATH)
#if test -z "$ETK_CONFIG" ; then
#    echo $PROG " is not in your \$PATH. Please ensure it is.";
#    echo "Read the manual page for your shell as to how to extend your path.";
#    AC_MSG_ERROR(Cannot find $PROG)
#fi


AC_ARG_ENABLE(ewl,
        AC_HELP_STRING([--enable-ewl/--disable-ewl],
        [enable/disable ewl version (default=autodetect)]),
        [enable_ewl=$enableval ], [ enable_ewl=default])

if test "x$enable_ewl" = "xdefault" || test "x$enable_ewl" = "xyes"; then
  AC_PATH_GENERIC(ewl, 0.0.4, [enable_ewl="yes"], [enable_ewl="no"])
  if test x$enable_ewl ; then
      ewl_cflags=`$EWL_CONFIG --cflags`
      ewl_libs=`$EWL_CONFIG --libs`
      AC_SUBST(ewl_cflags)
      AC_SUBST(ewl_libs)
  fi
fi

AM_CONDITIONAL(ENABLE_EWL, test x$enable_ewl = xyes)

AC_ARG_ENABLE(etk,
        AC_HELP_STRING([--enable-etk/--disable-etk],
        [enable/disable etk version (default=disabled)]),
        [enable_etk=$enableval], [enable_etk=default])

if test "x$enable_etk" = "xdefault" || test "x$enable_etk" = "xyes"; then
  AC_PATH_GENERIC(etk, 0.1.0, [enable_etk="yes"], [enable_etk="no"])
  if test x$enable_etk ; then
      etk_cflags=`$ETK_CONFIG --cflags`
      etk_libs=`$ETK_CONFIG --libs`
      AC_SUBST(etk_cflags)
      AC_SUBST(etk_libs)
  fi
fi

AM_CONDITIONAL(ENABLE_ETK, test x$enable_etk = xyes)

if test "x$enable_etk" = "xyes" && test "x$enable_ewl" = "xyes"; then
  build_separate=yes
else
  build_separate=no
fi

AM_CONDITIONAL(BUILD_SEPARATE, test x$build_separate = xyes)

#AC_DEFINE_UNQUOTED(HAVE_EWL, "${have_ewl}", [EWL])
#AC_DEFINE_UNQUOTED(HAVE_ETK, "${have_etk}", [ETK])

PROG="edje-config";
AC_PATH_PROG(EDJE_CONFIG, $PROG, "", $PATH)
if test -z "$EDJE_CONFIG" ; then
  echo $PROG " is not in your \$PATH. Please ensure it is.";
  echo "Read the manual page for you shell as to how to extend your path.";
  AC_MSG_ERROR(Cannot find $PROG)
fi
edje_cflags=`$EDJE_CONFIG --cflags`
edje_libs=`$EDJE_CONFIG --libs`
AC_SUBST(edje_cflags)
AC_SUBST(edje_libs)


AC_OUTPUT([
Makefile 
empower.spec
src/Makefile
src/bin/Makefile
src/bin/ewl/Makefile
src/bin/etk/Makefile
debian/changelog
])

echo
echo "Configuration:"
echo
echo "  Install path:                           ${prefix}"
echo
echo "  Toolkit Support"
echo "  ----------------"
echo "  Build ETK:                              $enable_etk"
echo "  Build EWL:                              $enable_ewl"
echo
echo "  Building Seperate Binaries              $build_separate"
echo 
  