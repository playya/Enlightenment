# get rid of that stupid cache mechanism
rm -f config.cache

AC_INIT(configure.in)
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_ISC_POSIX
AM_INIT_AUTOMAKE(enlightenment, 0.16.999.034)
AM_CONFIG_HEADER(config.h)

AC_C_BIGENDIAN
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST
AM_ENABLE_SHARED
AM_PROG_LIBTOOL
AC_FUNC_ALLOCA
AC_C___ATTRIBUTE__

AC_CHECK_FUNCS(setenv)
AC_CHECK_FUNCS(unsetenv)

AC_CHECK_HEADERS(fnmatch.h,, AC_MSG_ERROR([Cannot find fnmatch.h. Make sure your CFLAGS environment variable contains include lines for the location of this file]))

AC_CHECK_FUNCS(fnmatch, res=yes, res=no)
if test "x$res" = "xno"; then
        AC_CHECK_LIB(fnmatch, fnmatch, res=yes, res=no)
	if test "x$res" = "xno"; then
		AC_MSG_ERROR([Cannot find fnmatch() in neither libc nor libfnmatch])
        else
	        fnmatch_libs="-lfnmatch"
	fi
fi
				
AC_SUBST(fnmatch_libs)

have_pam=no
AC_CHECK_HEADERS(security/pam_appl.h, [
    LIBS="$LIBS -lpam"
    have_pam=yes
  AC_DEFINE(HAVE_PAM, 1, [PAM Authentication Support])])

# Setting have_valgrind to "no" seems pointless, but we just need to
# put something in as the 4th parameter, so configure doesn't abort
# when valgrind.pc isn't found.
#have_valgrind="no"
#PKG_CHECK_MODULES(VALGRIND, valgrind >= 2.4.0, have_valgrind=yes, have_valgrind=no)
#AC_ARG_ENABLE(valgrind,
#  [  --enable-valgrind               enable valgrind support], [
#      if test x"$enableval" = x"yes" ; then
#        AC_MSG_RESULT(yes)
#        have_valgrind="yes"
#      else
#        AC_MSG_RESULT(no)
#	have_valgrind="no"
#        VALGRIND_CFLAGS=""
#        VALGRIND_LIBS=""
#      fi
#  ], [
#    have_valgrind=$have_valgrind
#  ]
#)

#if test x$have_valgrind = "xyes"; then
#  AC_DEFINE(HAVE_VALGRIND, 1, [Valgrind support])
#fi

AC_SUBST(VALGRIND_CFLAGS)
AC_SUBST(VALGRIND_LIBS)

MODULE_ARCH="$host_os-$host_cpu"
AC_SUBST(MODULE_ARCH)
AC_DEFINE_UNQUOTED(MODULE_ARCH, "$MODULE_ARCH", "Module architecture")

# Check for omnibook laptops so that temperature module works with them
if test -f /proc/omnibook/temperature; then
	AC_DEFINE(HAVE_OMNIBOOK, 1, [Omnibook laptop support for temperature module])
fi

if test "x${bindir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    PACKAGE_BIN_DIR="${ac_default_prefix}/bin"
  else
    PACKAGE_BIN_DIR="${prefix}/bin"
  fi
else
  PACKAGE_BIN_DIR="${bindir}"
fi
AC_SUBST(PACKAGE_BIN_DIR)

if test "x${libdir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    PACKAGE_LIB_DIR="${ac_default_prefix}/lib"
  else
    PACKAGE_LIB_DIR="${prefix}/lib"
  fi
else
  PACKAGE_LIB_DIR="${libdir}"
fi
AC_SUBST(PACKAGE_LIB_DIR)

if test "x${prefix}" = "xNONE"; then
  PACKAGE_DATA_DIR="${ac_default_prefix}/share/${PACKAGE}"
  LOCALE_DIR="${ac_default_prefix}/share/locale"
  PACKAGE_SYSCONF_DIR="${ac_default_prefix}/etc"
else
  PACKAGE_DATA_DIR="${prefix}/share/${PACKAGE}"
  LOCALE_DIR="${prefix}/share/locale"
  PACKAGE_SYSCONF_DIR="${sysconfdir}"
fi
AC_SUBST(PACKAGE_DATA_DIR)
AC_SUBST(LOCALE_DIR)
AC_SUBST(PACKAGE_SYSCONF_DIR)

x_dir=""
x_cflags=""
x_libs=""
AC_PATH_XTRA
AC_CHECK_HEADER(X11/X.h,
  [
    x_dir=${x_dir:-/usr/X11R6}
    x_cflags=${x_cflags:--I${x_includes:-$x_dir/include}}
    x_libs="${x_libs:--L${x_libraries:-$x_dir/lib}} -lX11 -lXext"
  ],[
    AC_MSG_ERROR([Cannot find X headers and libraries.])
  ]
)
AC_SUBST(x_cflags)
AC_SUBST(x_libs)

cf_cflags=""
cf_libs=""
PCPPFLAGS="${CPPFLAGS}"
CPPFLAGS="${CPPFLAGS} -I /System/Library/Frameworks/CoreFoundation.framework/Headers"
AC_CHECK_HEADERS(CFBase.h,
  [
    cf_cflags="-I /System/Library/Frameworks/CoreFoundation.framework/Headers"
    cf_cflags="${cf_cflags} -I /System/Library/Frameworks/IOKit.framework/Headers"
    cf_libs="-framework 'CoreFoundation' -framework 'IOKit'"
  ],[
    AC_MSG_WARN([Cannot find CoreFoundation headers and libraries.])
  ]
)
CPPFLAGS="${PCPPFLAGS}"
AC_SUBST(cf_cflags)
AC_SUBST(cf_libs)

ALL_LINGUAS="bg de eo es fi fr ja pl pt ru zh_CN hu sl it cs da sk sv nb nl zh_TW ko"
AC_SUBST(ALL_LINGUAS)

AM_GNU_GETTEXT([external])
AM_GNU_GETTEXT_VERSION(0.12.1)
if test "x$LIBINTL" = "x"; then
  LIBINTL="$INTLLIBS"
fi

AC_CHECK_LIB(dl, dlopen, dlopen_libs=-ldl)
AC_SUBST(dlopen_libs)

AC_ARG_WITH(evas-config,
[  --with-evas-config=EVAS_CONFIG    use evas-config specified ],
[
  EVAS_CONFIG=$withval;
  echo "using "$EVAS_CONFIG" for evas-config";
],[
  PROG="evas-config";
  AC_PATH_PROG(EVAS_CONFIG, $PROG, "", $PATH)
])
evas_cflags=`$EVAS_CONFIG --cflags`
evas_libs=`$EVAS_CONFIG --libs`
AC_SUBST(evas_cflags)
AC_SUBST(evas_libs)

AC_ARG_WITH(ecore-config,
[  --with-ecore-config=ECORE_CONFIG  use ecore-config specified ],
[
  ECORE_CONFIG=$withval;
  echo "using "$ECORE_CONFIG" for ecore-config";
],[
  PROG="ecore-config";
  AC_PATH_PROG(ECORE_CONFIG, $PROG, "", $PATH)
])
ecore_cflags=`$ECORE_CONFIG --cflags`
ecore_libs=`$ECORE_CONFIG --libs`
AC_SUBST(ecore_cflags)
AC_SUBST(ecore_libs)

AC_ARG_WITH(edje-config,
[  --with-edje-config=EDJE_CONFIG    use edje-config specified ],
[
  EDJE_CONFIG=$withval;
  echo "using "$EDJE_CONFIG" for edje-config";
],[
  PROG="edje-config";
  AC_PATH_PROG(EDJE_CONFIG, $PROG, "", $PATH)
])
edje_cflags=`$EDJE_CONFIG --cflags`
edje_libs=`$EDJE_CONFIG --libs`

AC_ARG_WITH(eet-config,
[  --with-eet-config=EET_CONFIG      use eet-config specified ],
[
  EET_CONFIG=$withval;
  echo "using "$EET_CONFIG" for eet-config";
],[
  PROG="eet-config";
  AC_PATH_PROG(EET_CONFIG, $PROG, "", $PATH)
])
eet_cflags=`$EET_CONFIG --cflags`
eet_libs=`$EET_CONFIG --libs`

AC_ARG_WITH(embryo-config,
[  --with-embryo-config=EMBRYO_CONFIG use embryo-config specified ],
[
  EMBRYO_CONFIG=$withval;
  echo "using "$EMBRYO_CONFIG" for embryo-config";
],[
  PROG="embryo-config";
  AC_PATH_PROG(EMBRYO_CONFIG, $PROG, "", $PATH)
])
embryo_cflags=`$EMBRYO_CONFIG --cflags`
embryo_libs=`$EMBRYO_CONFIG --libs`

e_libs=$evas_libs" "$ecore_libs" "$edje_libs" "$eet_libs" "$embryo_libs" "$LIBINTL" "$fnmatch_libs" "
e_cflags="-DUSE_E_CONFIG_H "$evas_cflags" "$ecore_cflags" "$edje_cflags" "$eet_cflags" "$embryo_cflags" "
AC_SUBST(e_libs)
AC_SUBST(e_cflags)

profile="SLOW_PC"
AC_ARG_WITH(profile,
[  --with-profile=TARGET_PROFILE    specify a target format profile of:
                                    LOWRES_PDA, MEDIUMRES_PDA, HIRES_PDA, 
				    SLOW_PC, MEDIUM_PC, FAST_PC ],
[
  v=$withval;
  profile=$v
  echo "  Enlightenment build profile set to "$profile;
],[
  profile="SLOW_PC"
])
EDJE_DEF="-DLOWRES_PDA=1 -DMEDIUMRES_PDA=2 -DHIRES_PDA=3 -DSLOW_PC=4 -DMEDIUM_PC=5 -DFAST_PC=6"
EDJE_DEF=$EDJE_DEF" -DE17_PROFILE"=$profile
AC_SUBST(EDJE_DEF)

edje_cc="`$EDJE_CONFIG --prefix`/bin/edje_cc"
AC_ARG_WITH(edje-cc,
[  --with-edje-cc=PATH              specify a specific path to edje_cc],
[
  v=$withval;
  edje_cc=$v
  echo "  Enlightenment edje_cc explicitly set to "$edje_cc;
],[
  edje_cc="`$EDJE_CONFIG --prefix`/bin/edje_cc"
])
AC_SUBST(edje_cc)


AC_OUTPUT([
Makefile
enlightenment.spec
src/Makefile
src/bin/Makefile
src/modules/Makefile
src/modules/ibar/Makefile
src/modules/ibar/module.desktop
src/modules/dropshadow/Makefile
src/modules/dropshadow/module.desktop
src/modules/clock/Makefile
src/modules/clock/module.desktop
src/modules/pager/Makefile
src/modules/pager/module.desktop
src/modules/battery/Makefile
src/modules/battery/module.desktop
src/modules/temperature/Makefile
src/modules/temperature/module.desktop
src/modules/cpufreq/Makefile
src/modules/cpufreq/module.desktop
src/modules/ibox/Makefile
src/modules/ibox/module.desktop
src/modules/start/Makefile
src/modules/start/module.desktop
data/Makefile
data/fonts/Makefile
data/images/Makefile
data/init/Makefile
data/init/images/Makefile
data/input_methods/Makefile
data/themes/Makefile
data/themes/images/Makefile
data/other/Makefile
data/xsession/Makefile
data/xsession/enlightenment.desktop
data/backgrounds/Makefile
data/etc/Makefile
data/icons/Makefile
doc/Makefile
po/Makefile
intl/Makefile
enlightenment-config
debian/changelog
],[
chmod +x enlightenment-config
])
