dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(evfs, 0.0.1)
AM_CONFIG_HEADER(config.h)

if test "$prefix" = "NONE"; then
  prefix=$ac_default_prefix
fi

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AM_PROG_LIBTOOL

AC_C_BIGENDIAN       
AC_STRUCT_ST_BLKSIZE
AC_STRUCT_ST_BLOCKS

use_threads="yes"

dnl Check for functions that we need to be thread-safe.
AC_CHECK_FUNCS(readdir_r ctime_r, , have_all_threadsafe_funcs="no")
if test "$have_all_threadsafe_funcs" = "no"; then
   use_threads="no"   
   AC_MSG_WARN(Not all functions needed for multithreaded build found, not using threads.)
fi

dnl Check for statfs call or other alternatives.
AC_CHECK_FUNC(statfs, , have_statfs="no")
if test "$have_statfs" = "no"; then
   AC_CHECK_FUNC(statvfs, have_statvfs="yes")
   if test "$have_stavtfs" = "yes"; then
      AC_DEFINE(HAVE_STATVFS, 1, [Build support for statfs])
   fi
else
   AC_DEFINE(HAVE_STATFS, 1, [Build support for statfs])
fi
  
dnl Check for fam.
fam_cflags=""
fam_libs=""
AC_ARG_WITH(fam,
	AC_HELP_STRING([--with-fam@<:@=DIR@:>@],[use fam found in DIR]),
	[
		use_fam=$withval
		if test x"$use_fam" != x"no" ; then
			if test x"$use_fam" != x"yes" ; then
				fam_cflags="-I$withval/include"
				fam_libs="-L$withval/lib -lfam"
			else
				fam_libs="-lfam"
			fi
		fi
	], use_fam="auto")
if test x"$use_fam" = x"auto" ; then
	fam_libs="-lfam"
fi
if test x"$use_fam" != x"no" ; then
	save_LIBS="$LIBS"
	save_CFLAGS="$CFLAGS"
	CFLAGS="$CFLAGS $fam_cflags"
	LIBS="$LIBS $fam_libs"
	AC_CHECK_HEADER(fam.h, , fam_header_ok="no")
	AC_CHECK_LIB(fam, main, , fam_lib_ok="no")
	if test "$fam_header_ok" = "no" -o "$fam_lib_ok" = "no"; then
		fam="without FAM (file-alteration monitor) support"
		if test x"$use_fam" = x"auto" ; then
			AC_MSG_WARN(Optional library FAM not found -- this is not a problem.)
		else
			AC_MSG_ERROR(FAM not found)
		fi
	else
		fam="with FAM (file-alteration monitor) support";
		AC_DEFINE(HAVE_FAM, 1, [Try to use File-alteration monitor])
	fi
	LIBS="$save_LIBS"
	CFLAGS="$save_CFLAGS"
fi
AC_SUBST(fam_cflags)
AC_SUBST(fam_libs)



dnl Check for pthreads. Make sure we have both
dnl header and lib, otherwise, or when --disable-threads
dnl was given, build without thread support.
AC_ARG_ENABLE(threads,
	AC_HELP_STRING([--enable-threads],[enable thread support @<:@default=yes@:>@]),
	use_threads=$enableval)

dnl This needs revisiting
PTHREAD_CFLAGS=
PTHREAD_LIB=
if test "$use_threads" = "yes"; then
   AC_CHECK_HEADER(pthread.h, pthread_header_ok="yes", pthread_header_ok="no")
   if test "$pthread_header_ok" = "yes"; then
      AC_CHECK_LIB(pthread, main, PTHREAD_LIB="-lpthread", PTHREAD_LIB="error")
      if test "$PTHREAD_LIB" = "error"; then
         AC_CHECK_LIB(c_r, main, PTHREAD_LIB="-pthread", pthread_lib_ok="no")
      fi
   fi
   if test "$pthread_header_ok" = "no" -o "$pthread_lib_ok" = "no"; then
      cat <<EOF;
------------------------------------------------------
WARNING: Could not find a complete POSIX threads
(pthreads) installation on your system -- building
without thread support.
------------------------------------------------------
EOF
      AM_CONDITIONAL(USE_THREADS_FILES, false)
   else
      AC_DEFINE(USE_THREADS, 1, [Build support for threads])
      AM_CONDITIONAL(USE_THREADS_FILES, true)
      if test "$PTHREAD_LIB" = "-pthread"; then
         PTHREAD_CFLAGS="-D_THREAD_SAFE -D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS"
      else
         PTHREAD_CFLAGS="-D_REENTRANT -D_POSIX_PTHREAD_SEMANTICS"
      fi
      CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
      LIBS="$LIBS $PTHREAD_LIB"
   fi
else
   AM_CONDITIONAL(USE_THREADS_FILES, false)
fi

AC_SUBST(PTHREAD_CFLAGS)
AC_SUBST(PTHREAD_LIB)

dnl Check for libxml.
AC_ARG_WITH(xml2,
        [  --with-xml2=DIR          use libxml2 in <DIR>],
        [CFLAGS="$CFLAGS -I$withval/include"
         LIBS="-L$withval/lib $LIBS"])

AC_PATH_GENERIC(xml2, 2.3.10, [
    AC_SUBST(xml2_libs)
    AC_SUBST(xml2_cflags)],
    AC_MSG_ERROR(Cannot find libxml2: Is xml2-config in path?))
xml2_libs=`xml2-config --libs`
xml2_cflags=`xml2-config --cflags`


dnl Checking for Perl:
AC_PATH_PROG(PERL,perl,0)
AC_SUBST(PERL)

PROG="ecore-config";
AC_PATH_PROG(ECORE_CONFIG, $PROG, "", $PATH)
if [ test -z $ECORE_CONFIG ]; then
  echo $PROG " is not in your \$PATH. Please ensure it is.";
  echo "Read the manual page for you shell as to how to extend your path.";
  AC_MSG_ERROR(Cannot find $PROG)
fi
ecore_cflags=`$ECORE_CONFIG --cflags`
ecore_libs=`$ECORE_CONFIG --libs`
AC_SUBST(ecore_cflags)
AC_SUBST(ecore_libs)




dnl Set PACKAGE_LOCALE_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale", "Locale directory")
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale", "Locale directory")
fi


dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", "Data directory")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", "Data directory")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}", "Data directory")
fi

dnl Set the package lib dir
if test "x${libdir}" = 'x${prefix}/lib'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_PLUGIN_DIR, "${ac_default_prefix}/lib/${PACKAGE}", "Plugin directory")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_PLUGIN_DIR, "${prefix}/lib/${PACKAGE}", "Plugin directory")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_PLUGIN_DIR, "${prefix}/lib/${PACKAGE}", "Plugin directory")
fi



dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}", "Source directory")


dnl Backtrace generation code, based on code from Eterm. Cheers Michael :)
AC_PATH_PROG(DBX, dbx, no)
if test "$DBX" != "no"; then
  AC_DEFINE_UNQUOTED(DBX, "$DBX", "dbx program")
fi
AC_PATH_PROG(GDB, gdb, no)
if test "$GDB" != "no"; then
  AC_DEFINE_UNQUOTED(GDB, "$GDB", "gdb program")
fi
AC_PATH_PROG(PSTACK, pstack, no, $PATH:/usr/proc/bin:/usr/sbin)
if test "$PSTACK" != "no"; then
  AC_DEFINE_UNQUOTED(PSTACK, "$PSTACK", "pstack program")
fi
AC_CHECK_LIB(cl, U_STACK_TRACE, LIBS="$LIBS -lcl")

if test "$GDB" != "no"; then
  GDB_CMD_FILE=`eval eval eval eval echo "$datadir/$PACKAGE/gdb.scr"`
  AC_DEFINE_UNQUOTED(GDB_CMD_FILE, "$GDB_CMD_FILE", "gdb command file")
else
  GDB_CMD_FILE=""
fi
AC_SUBST(GDB_CMD_FILE)


dnl Look for jade for sgml translations.
AC_ARG_WITH(dbsheets,
       [  --with-dbsheets=DIR     use DIR to specify your DocBook stylesheets installation path.],
       DB_STYLESHEETS="$withval", DB_STYLESHEETS="/usr/lib/sgml/stylesheet/dsssl/docbook/nwalsh")
AC_SUBST(DB_STYLESHEETS)
AC_PATH_PROG(JADE, jade)
AM_CONDITIONAL(HAVE_JADE, test "x$JADE" != "x" && test -d "$DB_STYLESHEETS")



dnl Various conditionals
AM_CONDITIONAL(BUILD_ECORE_DEPENDENT,      test "$ecore" != "no")
AC_DEFINE(HAVE_ECORE, 1, [Build with ecore])


AC_OUTPUT([
Makefile
src/Makefile
src/bin/Makefile
src/lib/Makefile
src/plugins/Makefile
src/demo/Makefile
src/include/Makefile
evfs-config
], [
chmod +x evfs-config
])
