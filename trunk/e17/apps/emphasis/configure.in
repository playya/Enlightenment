dnl Process this file with autoconf to produce a configure script.

# get rid of that stupid cache mechanism
rm -f config.cache

AC_INIT(configure.in)

AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE(emphasis, 0.0.1)

AC_PREREQ(2.52)

AM_CONFIG_HEADER(config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST
AM_ENABLE_SHARED
#AM_PROG_LIBTOOL
LIBS=""
      
dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", [Shared Data Directory])
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", [Shared Data Directory])
fi

dnl Set PACKAGE_BIN_DIR in config.h.
if test "x${bindir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${ac_default_prefix}/bin", [Installation Directory for User Executables])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${prefix}/bin", [Installation Directory for User Executables])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${bindir}", [Installation Directory for User Executables])
fi

dnl Set PACKAGE_LIB_DIR in config.h.
if test "x${libdir}" = 'xNONE'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${ac_default_prefix}/lib", [Installation Directory for Libraries])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${prefix}/lib", [Installation Directory for Libraries])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${libdir}", [Installation Directory for Libraries])
fi

dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}", [Source Code Directory])

#check for ECORE
AC_PATH_EFL(
   ecore,
   0.9.9.022,
   [
     AC_DEFINE(HAVE_ECORE, 1, have ECORE)
     ecore="ECORE "
     AM_CONDITIONAL(HAVE_ECORE, true)
     have_ecore="yes"
     ecore_libs=`ecore-config --libs`
     ecore_cflags=`ecore-config --cflags`
   ],
   [
     AC_MSG_ERROR([No Ecore, can't build.])
   ]
)

#check for ETK
AC_PATH_EFL(
   etk,
   0.1.0.001,
   [
     AC_DEFINE(HAVE_ETK, 1, have ETK)
     etk="ETK "
     AM_CONDITIONAL(HAVE_ETK, true)
     have_etk="yes"
     etk_libs=`etk-config --libs`
     etk_cflags=`etk-config --cflags`     
   ],
   [
     AC_MSG_ERROR([No Etk, can't build.])
   ]
)

#check for libmpd
PKG_CHECK_MODULES(
   [libmpd], 
	libmpd >= 0.12.0,
	[
	 AC_DEFINE(HAVE_LIBMPD, 1, have LIBMPD)
	 libmpd="libmpd"
	 AM_CONDITIONAL(HAVE_LIBMPD, true)
	 have_libmpd="yes"
	 libmpd_libs=`pkg-config --libs libmpd`
	 libmpd_cflags=`pkg-config --cflags libmpd`
	],
	[
	 AC_MSG_ERROR([libmpd not found.])
	]
)

dnl Set ETK_PACKAGE_DATA_DIR in config.h.  
etk_prefix="\"`etk-config --prefix`/share/etk\""
AC_DEFINE_UNQUOTED(ETK_PACKAGE_DATA_DIR, $etk_prefix, [Data dir for etk lib.])


ecore_libs=`ecore-config --libs`
ecore_cflags=`ecore-config --cflags`
etk_libs=`etk-config --libs`
etk_cflags=`etk-config --cflags`
libmpd_libs=`pkg-config --libs libmpd`
libmpd_cflags=`pkg-config --cflags libmpd`

# add your required libs / include here
my_includes="$ecore_cflags $etk_cflags $libmpd_cflags"
my_libs="$ecore_libs $etk_libs $libmpd_libs"
AC_SUBST(my_includes)
AC_SUBST(my_libs)

AC_OUTPUT([
Makefile
src/Makefile
src/bin/Makefile
data/Makefile
data/images/Makefile
debian/changelog
],[
touch emphasis_docs.tar.gz
])
