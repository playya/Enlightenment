dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(entrance, 0.9.0)
AM_CONFIG_HEADER(src/config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC

if test "x${prefix}" = "xNONE"; then
	AC_DEFINE_UNQUOTED(PREFIX, "/usr/local", [Install prefix])
else
	AC_DEFINE_UNQUOTED(PREFIX, "${prefix}", [Install prefix])
fi

AC_EXPAND_DIR(PACKAGE_DATA_DIR, "$datadir/${PACKAGE}")
AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "$PACKAGE_DATA_DIR", [Shared data directory])
AC_EXPAND_DIR(PACKAGE_BIN_DIR, "$bindir")
AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "$PACKAGE_BIN_DIR", [Location of binaries])

# Override autosplat's destination dir settings
test $sysconfdir = '${prefix}/etc' && sysconfdir="/etc"
test $localstatedir = '${prefix}/var' && localstatedir="/var/lib/${PACKAGE}"

AC_DEFINE_UNQUOTED(PACKAGE_CFG_DIR, "${sysconfdir}", [Config data directory])
AC_DEFINE_UNQUOTED(PACKAGE_STATE_DIR, "${localstatedir}", [State data directory])

dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}", [Program source directory])

dnl Use -Wall if we have gcc.
changequote(,)dnl
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) ;;
  *) CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
changequote([,])dnl

AC_ARG_WITH(edb,
	[ --with-edb=DIR		use edb in <DIR>],
	[ CFLAGS="$CFLAGS -I$withval/include"
	LIBS="-L$withval/lib $LIBS"])
AC_ARG_WITH(evas,
	[ --with-evas=DIR		use evas in <DIR>],
	[ CFLAGS="$CFLAGS -I$withval/include"
	LIBS="-L$withval/lib $LIBS"])
AC_ARG_WITH(ecore,
	[ --with-ecore=DIR		use ecore in <DIR>],
	[ CFLAGS="$CFLAGS -I$withval/include"
	LIBS="-L$withval/lib $LIBS"])
AC_ARG_WITH(edje,
	[ --with-edje=DIR		use edje in <DIR>],
	[ CFLAGS="$CFLAGS -I$withval/include"
	LIBS="-L$withval/lib $LIBS"])

AC_PATH_GENERIC(edb, 1.0.3, [
	AC_SUBST(edb_libs)
	AC_SUBST(edb_cflags) ],
	AC_MSG_ERROR(Cannot find edb: Is edb-config in path?))
edb_libs=`edb-config --libs`
edb_cflags=`edb-config --cflags`
AC_SUBST(edb_libs)
AC_SUBST(edb_cflags)

AC_PATH_GENERIC(evas, 1.0.0, [
	AC_SUBST(evas_libs)
	AC_SUBST(evas_cflags) ],
	AC_MSG_ERROR(Cannot find evas: Is evas-config in path?))
evas_libs=`evas-config --libs`
evas_cflags=`evas-config --cflags`

AC_SUBST(evas_libs)
AC_SUBST(evas_cflags)

have_ecore=no
AC_CHECK_HEADER(Ecore.h,, 
   AC_MSG_ERROR([Ecore.h not found! Have you installed Ecore?]))
AC_CHECK_LIB(ecore, ecore_list_new, 
   [have_ecore=yes],
   AC_MSG_ERROR([Ecore check failed! Make sure you have the latest version of Ecore installed.]))

have_ecore_evas=no
AC_CHECK_HEADER(Ecore_Evas.h,,
   AC_MSG_ERROR([Ecore_Evas.h not found! Did you compile Ecore with Evas support?]))

AC_CHECK_LIB(ecore_evas, ecore_evas_init, [
	have_ecore_evas=yes],
   AC_MSG_ERROR([Cannot find Ecore_Evas!]))

have_ecore_software_x11=no
AC_CHECK_LIB(ecore_evas, ecore_evas_software_x11_new, [
    have_ecore_software_x11=yes],
    AC_MSG_ERROR([Ecore_Evas does not have Software/X11 support!]))

have_ecore_gl_x11=no
AC_CHECK_LIB(ecore_evas, ecore_evas_gl_x11_new, [
    have_ecore_gl_x11=yes
    AC_DEFINE(HAVE_ECORE_GL_X11, 1, [OpenGL support])])

have_ecore_ipc=no
AC_CHECK_HEADER(Ecore_Ipc.h,,
    AC_MSG_ERROR([Ecore_Ipc.h not found! Did you compile Ecore with IPC support?]))

AC_CHECK_LIB(ecore_ipc, ecore_ipc_init, [
    have_ecore_ipc=yes],
    AC_MSG_ERROR([Cannot find Ecore_Ipc!]))

ecore_cflags=`ecore-config --cflags`
ecore_libs=`ecore-config --libs`
AC_SUBST(ecore_libs)
AC_SUBST(ecore_cflags)

AC_PATH_GENERIC(edje, 0.5.0, [
	AC_SUBST(edje_libs)
	AC_SUBST(edje_cflags) ],
	AC_MSG_ERROR(Cannot find edje: Is edje-config in path?))
edje_libs=`edje-config --libs`
edje_cflags=`edje-config --cflags`
AC_SUBST(edje_libs)
AC_SUBST(edje_cflags)

AC_PATH_GENERIC(esmart, 0.9.0, [
	AC_SUBST(esmart_libs)
	AC_SUBST(esmart_cflags) ],
	AC_MSG_ERROR(Cannot find esmart: Is esmart-config in path?))
esmart_libs=`esmart-config --libs`
esmart_cflags=`esmart-config --cflags`
AC_SUBST(esmart_libs)
AC_SUBST(esmart_cflags)

have_pam=no
AC_CHECK_HEADERS(security/pam_appl.h, [
	LIBS="$LIBS -lpam"
	have_pam=yes
    AC_DEFINE(HAVE_PAM, 1, [PAM Authentication Support])])

have_crypt=no
AC_CHECK_LIB(crypt, crypt, [
	LIBS="$LIBS -lcrypt"
	have_crypt=yes])
AC_CHECK_HEADERS(crypt.h)

have_shadow=no
AC_CHECK_LIB(crypt, getspnam, [
	AC_DEFINE(HAVE_SHADOW, 1, [Shadow Authentication Support])
	have_shadow=yes])

if test "x${have_shadow}" = "x"; then
AC_CHECK_LIB(shadow, getspnam, [
	LIBS="$LIBS -lshadow"
	AC_DEFINE(HAVE_SHADOW, 1, [Shadow Authentication Support])
	have_shadow=yes])
fi

# Default authentication mode, 1 for PAM/2 for shadow
auth_mode=1

if test "x${have_pam}" != "xyes"; then
    auth_mode=2
fi

AC_ARG_WITH(auth_mode,
    [ --with-auth-mode=AUTHMODE  Specify the default authentication mode (pam or shadow)],
    [
     if test "x$withval" = "xshadow"; then
         auth_mode=2
     fi
    ]
)

AC_SUBST(auth_mode)

# what Xsession file we're using
xsession=/etc/X11/xdm/Xsession
AC_ARG_WITH(xsession,
	[ --with-xsession=PATH	Specify the location of system Xsession file],
	[
	    if test "x$withval" != "xno" ; then
		xsession=$withval
	    fi
	]
)
if test ! -x $xsession ; then
    AC_MSG_WARN([** no $xsession file on this system **])
    AC_MSG_WARN([** Perhaps you need to specify --with-xsession **])
    xsession="You should reconfigure --with-xsession"
fi

AC_DEFINE_UNQUOTED(ENTRANCE_XSESSION, "$xsession", [Xsession script])
AC_SUBST(xsession)

x_cflags="-I/usr/X11R6/include"
x_libs="-L/usr/X11R6/lib -lX11 -lXext"
AC_SUBST(x_cflags)
AC_SUBST(x_libs)

AC_OUTPUT([
Makefile
src/Makefile
src/client/Makefile
src/daemon/Makefile
src/daemon/entrance_wrapper
config/Makefile
config/init.d/Makefile
config/init.d/entrance
config/pam.d/Makefile
data/Makefile
data/config/Makefile
data/config/build_config.sh
data/fonts/Makefile
data/images/Makefile
data/images/sessions/Makefile
data/users/Makefile
data/users/default/Makefile
data/themes/Makefile
data/themes/default/Makefile
data/themes/E17/Makefile
data/themes/Nebulous/Makefile
data/themes/taillights/Makefile
data/themes/taillights/parts/Makefile
data/themes/taillights/programs/Makefile
data/themes/taillights/fonts/Makefile
data/themes/taillights/images/Makefile
])

echo
echo "Finished configuring $PACKAGE $VERSION"
echo
echo "OpenGL engine support ............... $have_ecore_gl_x11"
echo "Support for crypt authentication .... $have_crypt"
echo "Support for shadow authentication ... $have_shadow"
echo "Support for PAM authentication ...... $have_pam"
echo "XSession file to use ................ $xsession "
echo
echo "Now type 'make' (gmake on some systems) to compile $PACKAGE"
echo
