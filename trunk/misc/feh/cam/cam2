#!/usr/bin/perl -w

use strict;
use Getopt::Long;
use vars qw[%bookmarks];

my %prog = ( app => "feh", pre => " -q -G -w -Twebcam -1 0 -0 1",
			post => '');
my %opt = ( deftitle => '%cCAM - %u', bookmarks => "$ENV{HOME}/.cam_bookmarks");


sub usage {
	print while(<DATA>);
	exit -1;
}

sub add {
	my ($key, $url, $refresh, $title) = @_;
	die "Bad key syntax\n" unless ($key and $url and $refresh);

	$title ||= "";

	open BOOK, ">>$opt{bookmarks}" or die "Couldn't open $opt{bookmarks}: $!\n";
	print BOOK "$key=$refresh,$url \"$title\"";
	close BOOK;
	print "Added URL Key: $key = $url\n\trefreshing every $refresh seconds\n";
	exit 0;
}
	

usage unless @ARGV;
GetOptions('help|?|h'                   => \$opt{help},
           'full-screen|f|giblets-mom|g' => \$opt{fullscreen},
		   'list|l'                     => \$opt{list},
		   'verbose|v'                  => \$opt{verbose},
		   'add|a'                      => \$opt{add},
		   'keep-images|k|save-pr0n'    => \$opt{keep},
		   'title|t=s'                  => \$opt{title},
		   'debug|d'                    => \$opt{debug},
		   'bookmarks|b=s'              => \$opt{bookmarks}
		  );


usage if $opt{help};

$prog{pre} .= ' -V ' if $opt{verbose};
$prog{pre} .= ' -k ' if $opt{keep};
$prog{pre} =~ s/-w/-FZ/ if $opt{fullscreen};

add @ARGV if $opt{add};

open BOOK, "$opt{bookmarks}" or die "Couldn't open $opt{bookmarks}: $!\n";
while (<BOOK>) {
	my ($key, $ref, $url, $title) = /^(.*?)=(\d+),(.*?)(?: "([^"]+)")?$/;
	$title ||= $opt{deftitle};
	print "$key, $ref, $url, $title\n" if $opt{debug};

	$bookmarks{$key} = [($url, $ref, $title)];
}
close BOOK;

if($opt{list}) {
	for(sort keys %bookmarks) {
		print "$_: url = $bookmarks{$_}->[0] refresh = $bookmarks{$_}->[1]\n";
	}
}


while (my $key = shift @ARGV) {
	print "key == ", $key, "\n" if $opt{debug};
	die "Couldn't find URL key '$key'\n" unless $bookmarks{$key}->[0];
	my $url = $bookmarks{$key}->[0];
	my $ref = $bookmarks{$key}->[1];
	my $title = $opt{title} || $bookmarks{$key}->[2];
	
	# Could do better.
	$title =~ s/\%c/$key/g;
	$title =~ s/\%u/$url/g;
	$title =~ s/\%r/$ref/g;

	my $cmd = "$prog{app} $prog{pre} --title \"$title\" -T".$key."cam -R $ref $url $prog{post}";

	print "cmd == ", $cmd, "\n" if $opt{debug};

	FORK: {
		if(my $pid = fork) {
			# nop;
		} elsif(defined($pid) and !$pid) {
			exec $cmd or die "Couldn't exec $prog{app}: $!\n";
		} elsif ($! =~ /No More Process/) {
			sleep 3;
			redo FORK;
		} else {
			die "fork() error\n";
		}
	}
}

# Here because all the quotey stuff messes up syntax highlighting.
__END__

Cam 0.5
by Paul Duncan <pabs@pablotron.org>, and
   Richard Lowe <richlowe@btinternet.com>

Description:
  A convenient webcam wrapper for feh.

Usage:
  cam <keys>
    Load the urls specified by the given keys.
    key : a url key stored in the bookmarks file ("~/.cam_bookmarks").
  cam <-a|--add> key url refresh
    Add a key to the bookmarks file.
    key : short key (ex "jenni"),
    url : url (ex "http://www.jennicam.org/webcam/cam.jpg"),
    refresh : refresh, in seconds (ex 120)
  cam <-l|--list>
    List each url key in the bookmarks file ("~/.cam_bookmarks").
  cam [-f|--full-screen] keys
    Start feh in full-screen mode (aka -g and --giblets-mom "viewing" mode).
  cam [-k|--keep-images] keys
    Keep the images in /tmp/ (aka --save-pr0n).
  cam [-v|--verbose] options
    Start feh in verbose mode (feh -V).
  cam <-h|-?|--help>
    Display usage information (this screen).

Notes:
Thanks to giblet for feh, an awesome image and webcam viewing program,
and raster for Imlib2.

