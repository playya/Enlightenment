dnl Process this file with autoconf to produce a configure script.

# get rid of that stupid cache mechanism
rm -f config.cache

AC_INIT(configure.in)
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(engage, 0.0.9)
AM_CONFIG_HEADER(config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST
AM_ENABLE_SHARED
AM_PROG_LIBTOOL

MODULE_ARCH="$host_os-$host_cpu"
AC_SUBST(MODULE_ARCH)
AC_DEFINE_UNQUOTED(MODULE_ARCH, "$MODULE_ARCH", "Module architecture")

AC_CHECK_FUNCS(fmemopen)
AC_CHECK_FUNCS(open_memstream)

if test "x${bindir}" = 'x${exec_prefix}/bin'; then
  if test "x${exec_prefix}" = "xNONE"; then
    if test "x${prefix}" = "xNONE"; then
      bindir="${ac_default_prefix}/bin";
    else
      bindir="${prefix}/bin";
    fi
  else
    if test "x${prefix}" = "xNONE"; then
      bindir="${ac_default_prefix}/bin";
    else
      bindir="${prefix}/bin";
    fi
  fi
fi

if test "x${libdir}" = 'x${exec_prefix}/lib'; then
  if test "x${exec_prefix}" = "xNONE"; then
    if test "x${prefix}" = "xNONE"; then
      libdir="${ac_default_prefix}/lib";
    else
      libdir="${prefix}/lib";
    fi
  else
    if test "x${prefix}" = "xNONE"; then
      libdir="${ac_default_prefix}/lib";
    else
      libdir="${prefix}/lib";
    fi
  fi
fi

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", [Shared Data Directory])
else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", [Shared Data Directory])
fi

dnl Set PACKAGE_BIN_DIR in config.h.
if test "x${bindir}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${ac_default_prefix}/bin", [PACKAGE_BIN_DIR])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${prefix}/bin", [PACKAGE_BIN_DIR])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${bindir}", [PACKAGE_BIN_DIR])
fi

dnl Set PACKAGE_LIB_DIR in config.h.
if test "x${libdir}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${ac_default_prefix}/lib", [PACKAGE_LIB_DIR])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${prefix}/lib", [PACKAGE_LIB_DIR])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${libdir}", [PACKAGE_LIB_DIR])
fi

AC_PATH_GENERIC(esmart, 0.0.2, [
	AC_SUBST(esmart_libs)
	AC_SUBST(esmart_cflags) ],
	AC_MSG_ERROR(Cannot find esmart: Is esmart-config in path?))
esmart_libs=`esmart-config --libs`
esmart_cflags=`esmart-config --cflags`
AC_SUBST(esmart_libs)
AC_SUBST(esmart_cflags)

have_imlib="no"
AC_PATH_GENERIC(imlib2, 1.1.1, [
	AC_DEFINE(HAVE_IMLIB, [], [Imlib Image Manipulation Support])
	have_imlib="yes"
	AC_SUBST(imlib2_libs)
	AC_SUBST(imlib2_cflags) ],
	AC_MSG_ERROR(Cannot find imlib2: Is imlib2-config in path?))
imlib2_libs=`imlib2-config --libs`
imlib2_cflags=`imlib2-config --cflags`
AC_SUBST(imlib2_libs)
AC_SUBST(imlib2_cflags)

AC_PATH_GENERIC(edje, 0.5.0, [
	AC_SUBST(edje_libs)
	AC_SUBST(edje_cflags) ],
	AC_MSG_ERROR(Cannot find edje: Is edje-config in path?))
edje_libs=`edje-config --libs`
edje_cflags=`edje-config --cflags`
edje_cc="`edje-config --prefix`/bin/edje_cc"
AC_SUBST(edje_libs)
AC_SUBST(edje_cflags)
AC_SUBST(edje_cc)

AC_PATH_GENERIC(ecore, 0.9.9, [
	AC_SUBST(ecore_libs)
	AC_SUBST(ecore_cflags) ],
	AC_MSG_ERROR(Cannot find ecore: Is ecore-config in path?))
ecore_libs=`ecore-config --libs`
ecore_cflags=`ecore-config --cflags`
AC_SUBST(ecore_libs)
AC_SUBST(ecore_cflags)

AC_PATH_GENERIC(evas, 0.9.9, [
	AC_SUBST(evas_libs)
	AC_SUBST(evas_cflags) ],
	AC_MSG_ERROR(Cannot find evas: Is evas-config in path?))
evas_libs=`evas-config --libs`
evas_cflags=`evas-config --cflags`
AC_SUBST(evas_libs)
AC_SUBST(evas_cflags)

have_etk="no"
AC_PATH_GENERIC(etk, 0.0.1, [
  AC_DEFINE(HAVE_ETK, [], [ETK Support])
  have_etk="yes"
  AC_SUBST(etk_libs)
  AC_SUBST(etk_cflags) ],
  AC_MSG_WARN(Cannot find etk: Is etk-config in path?))
etk_libs=`etk-config --libs`
etk_cflags=`etk-config --cflags`
AC_SUBST(etk_libs)
AC_SUBST(etk_cflags)

dnl Set PACKAGE_SOURCE_DIR in config.h.
#packagesrcdir=`cd $srcdir && pwd`
#AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "$packagesrcdir", [PACKAGE_SOURCE_DIR]])

have_esmart_trans="no"
PCFLAGS=$CFLAGS
CFLAGS=$ESMART_CFLAGS" "$CFLAGS
dnl Make sure the esmart header/lib is available
AC_CHECK_HEADER( Esmart/Esmart_Trans_X11.h, 
  [ AC_DEFINE(HAVE_TRANS_BG, [], [Esmart Pseudo-transparency support]) 
    have_esmart_trans="yes"  
  ])
CFLAGS=$PCFLAGS

AC_ARG_ENABLE(xinerama,
  [  --enable-xinerama  Use Xinerama],
  [case "${enableval}" in
    yes) xinerama=true ;;
    no)  xinerama=false ;;
    *)   AC_MSG_ERROR(bad value ${enableval} for --enable-xinerama) ;;
  esac],[xinerama=false])
  AM_CONDITIONAL(XINERAMA, test x$xinerama = xtrue)

CFLAGS="-Wall $CFLAGS"

AC_OUTPUT([
Makefile
src/Makefile
data/Makefile
data/icons/Makefile
data/themes/Makefile
debian/changelog
],[
])
