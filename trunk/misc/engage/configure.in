dnl Process this file with autoconf to produce a configure script.

# get rid of that stupid cache mechanism
rm -f config.cache

AC_INIT(configure.in)
AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(engage, 0.0.9)
AM_CONFIG_HEADER(config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC
AC_C_CONST
AM_ENABLE_SHARED
AM_PROG_LIBTOOL

MODULE_ARCH="$target_os-$target_cpu"
AC_SUBST(MODULE_ARCH)
AC_DEFINE_UNQUOTED(MODULE_ARCH, "$MODULE_ARCH", "Module architecture")

AC_CHECK_FUNCS(fmemopen)
AC_CHECK_FUNCS(open_memstream)

if test "x${exec_prefix}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    bindir="${ac_default_prefix}/bin";
  else
    bindir="${prefix}/bin";
  fi
else
  if test "x${prefix}" = "xNONE"; then
    bindir="${ac_default_prefix}/bin";
  else
    bindir="${prefix}/bin";
  fi
fi

if test "x${exec_prefix}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    libdir="${ac_default_prefix}/lib";
  else
    libdir="${prefix}/lib";
  fi
else
  if test "x${prefix}" = "xNONE"; then
    libdir="${ac_default_prefix}/lib";
  else
    libdir="${prefix}/lib";
  fi
fi

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", [PACKAGE_DATA_DIR])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", [PACKAGE_DATA_DIR])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}", [PACKAGE_DATA_DIR])
fi

dnl Set PACKAGE_BIN_DIR in config.h.
if test "x${bindir}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${ac_default_prefix}/bin", [PACKAGE_BIN_DIR])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${prefix}/bin", [PACKAGE_BIN_DIR])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_BIN_DIR, "${bindir}", [PACKAGE_BIN_DIR])
fi

dnl Set PACKAGE_LIB_DIR in config.h.
if test "x${libdir}" = "xNONE"; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${ac_default_prefix}/lib", [PACKAGE_LIB_DIR])
  else
    AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${prefix}/lib", [PACKAGE_LIB_DIR])
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_LIB_DIR, "${libdir}", [PACKAGE_LIB_DIR])
fi

AC_PATH_GENERIC(esmart, 0.0.2, [
	AC_SUBST(esmart_libs)
	AC_SUBST(esmart_cflags) ],
	AC_MSG_ERROR(Cannot find esmart: Is esmart-config in path?))
esmart_libs=`esmart-config --libs`
esmart_cflags=`esmart-config --cflags`
AC_SUBST(esmart_libs)
AC_SUBST(esmart_cflags)

have_imlib="no"
AC_PATH_GENERIC(imlib2, 1.1.1, [
	AC_DEFINE(HAVE_IMLIB, [], [Imlib Image Manipulation Support])
	have_imlib="yes"
	AC_SUBST(imlib2_libs)
	AC_SUBST(imlib2_cflags) ],
	AC_MSG_ERROR(Cannot find imlib2: Is imlib2-config in path?))
imlib2_libs=`imlib2-config --libs`
imlib2_cflags=`imlib2-config --cflags`
AC_SUBST(imlib2_libs)
AC_SUBST(imlib2_cflags)

AC_PATH_GENERIC(edje, 0.5.0, [
	AC_SUBST(edje_libs)
	AC_SUBST(edje_cflags) ],
	AC_MSG_ERROR(Cannot find edje: Is edje-config in path?))
edje_libs=`edje-config --libs`
edje_cflags=`edje-config --cflags`
AC_SUBST(edje_libs)
AC_SUBST(edje_cflags)

AC_PATH_GENERIC(ecore, 1.0.0, [
	AC_SUBST(ecore_libs)
	AC_SUBST(ecore_cflags) ],
	AC_MSG_ERROR(Cannot find ecore: Is ecore-config in path?))
ecore_libs=`ecore-config --libs`
ecore_cflags=`ecore-config --cflags`
AC_SUBST(ecore_libs)
AC_SUBST(ecore_cflags)

AC_PATH_GENERIC(evas, 1.0.0, [
	AC_SUBST(evas_libs)
	AC_SUBST(evas_cflags) ],
	AC_MSG_ERROR(Cannot find evas: Is evas-config in path?))
evas_libs=`evas-config --libs`
evas_cflags=`evas-config --cflags`
AC_SUBST(evas_libs)
AC_SUBST(evas_cflags)

have_ewl="no"
AC_PATH_GENERIC(ewl, 0.0.1, [
  AC_DEFINE(HAVE_EWL, [], [Enlightenment Widget Library Support])
  have_ewl="yes"
  AC_SUBST(ewl_libs)
  AC_SUBST(ewl_cflags) ],
  AC_MSG_ERROR(Cannot find ewl: Is ewl-config in path?))
ewl_libs=`ewl-config --libs`
ewl_cflags=`ewl-config --cflags`
AC_SUBST(ewl_libs)
AC_SUBST(ewl_cflags)

have_e17="no"
AC_PATH_GENERIC(enlightenment, 16.999, [
  AC_DEFINE(HAVE_E17, [], [Development Enlightenment WindowManager Support])
  have_e17="true"
  AC_SUBST(e_libs)
  AC_SUBST(e_cflags) ],
  )
AM_CONDITIONAL(HAVE_E17, test x$have_e17 = xtrue)
e_libs=`enlightenment-config --libs`
e_cflags=`enlightenment-config --cflags`
e_modules=`enlightenment-config --module-dir`
AC_SUBST(e_libs)
AC_SUBST(e_cflags)
AC_SUBST(e_modules)

dnl Set PACKAGE_SOURCE_DIR in config.h.
#packagesrcdir=`cd $srcdir && pwd`
#AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "$packagesrcdir", [PACKAGE_SOURCE_DIR]])

have_esmart_trans="no"
dnl Make sure the esmart header/lib is available
AC_CHECK_HEADER( Esmart/Esmart_Trans_X11.h, 
  [ AC_DEFINE(HAVE_TRANS_BG, [], [Esmart Pseudo-transparency support]) 
    have_esmart_trans="yes"  
  ])

AC_ARG_ENABLE(xinerama,
  [  --enable-xinerama  Use Xinerama],
  [case "${enableval}" in
    yes) xinerama=true ;;
    no)  xinerama=false ;;
    *)   AC_MSG_ERROR(bad value ${enableval} for --enable-xinerama) ;;
  esac],[xinerama=false])
  AM_CONDITIONAL(XINERAMA, test x$xinerama = xtrue)

AC_OUTPUT([
Makefile
src/Makefile
src/module/Makefile
data/Makefile
data/icons/Makefile
data/themes/Makefile
],[
])
