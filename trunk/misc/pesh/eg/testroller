#!/usr/bin/perl -w

$progname = $0;
$progname =~ s,.*/,,;  # use basename only
$progname =~ s/\.\w*$//; # strip extension, if any

$VERSION = sprintf("%d.%02d", q$Revision$ =~ /(\d+)\.(\d+)/);

use lib qw(/home/amutiso/scripts/pesh/X11);

use X11::Esh;
use Getopt::Long;
use Data::Dumper;
use Tie::IxHash;

Getopt::Long::Configure(qw(auto_abbrev no_ignore_case no_bundling));

# Global variables
$verbose = 0;
$debug = 0;

sub usage {
    # usage: usage [exitstatus]
    local ($exitstatus) = ($_[0] || 0);

    print <<"EOT";
Usage: $progname [-dhvV] on|off|toggle
    Enlightenment Shell test program. Shade current area windows.
Options:
    -d 		enable debug output, (default: off).
    -h		display this message.
    -v		enable vebose output, (default: off).
    -V		display program version and exit.
EOT
    exit ($exitstatus);
}

sub parse_args {
    # usage: parge_args
    my($help,$Version) = (undef,undef);
    
    GetOptions("debug!", \$debug,
	       "help!", \$help,
	       "verbose!", \$verbose,
	       "Version!", \$Version,
	       ) || usage(1);
    usage(0) if $help;
    usage(1) unless defined ($ARGV[0]) and 
      $ARGV[0] =~ /^on$|^off$|^toggle$/i;
    (printf("%s: Version: %s\n", $progname, $VERSION),exit 0) if $Version;
}

# main()

&parse_args;

my $mode = lc $ARGV[0];
my $esh = new X11::Esh;
$esh->debug(1) if $debug;

$esh->send_messages("set clientname $progname",
		    "set version $VERSION",
		    "set author ZeroTau",
		    "set email zerotau\@icequake.com",
		    "set web http://www.enlightenment.org",
		    "set info Enlightenment Perl test script");

# get windows
my %windows = $esh->windows_info;
#printf("---XDB: windows: %s\n", Dumper(\%windows));

# determine current desktop and area
my $current_desk = $esh->goto_desktop;
my @current_area = $esh->goto_area;

# preserve window shade speed, for later reset
my $shadespeed = $esh->fx_window_shade_speed;
$esh->fx_window_shade_speed(10000000);

# shade all non e windows in the current desktop/area
foreach (keys %windows) {
  # skip internal windows, other desktops and areas
  next if $windows{$_}->{internal};			
  next unless $windows{$_}->{desk} == $current_desk;
  next unless $windows{$_}->{area}[0] == $current_area[0] ||
    $windows{$_}->{area}[1] == $current_area[1];

  printf("---XDB: window[%s]->%s:%dx%dx%d\n",$_,$windows{$_}{'title'},
	 $windows{$_}{'desktop'},
	 $windows{$_}{'area'}[0],$windows{$_}{'area'}[1])
    if $debug;
  $esh->win_op_shade($_, $mode);
}

# reset window shade speed
$esh->fx_window_shade_speed($shadespeed);

# Done!

#
# Mode: perl-mode
#
