<Eterm-0.9>
# ^- This must be the first line of any Eterm config file!
# Format is:  <Eterm-VERSION>  where VERSION is replaced by
#                              the version it was written for,
#                              minus the "DR-" if any.
#
# This is a sample Eterm config file.
#
# As always, the authors guarantee absolutely nothing and take
# no responsibility for anything that might happen to you, your
# computer, your dog, your sex life, or anyone or anything else
# directly or indirectly through the use of, or inability to use,
# this program.  Use at your OWN risk.

# A begin to get things started.
begin main

# Define the color properties
  begin color

# Foreground, background, cursor, scrollbar, pointer colors
    foreground white
    background black
    cursor #ffff00
    cursor_text #880000
    pointer white

# video attribute can either be "normal" or "reverse"
    video normal

# Redefine the 16 basic colors, if you really feel the need
# First word is "color", next is the number (0-15, BD, or UL),
# then the values for red, green, and blue separated by spaces
# Numbers are base 10 unless preceded by "0x" (base 16) or '0'
# (base 8).  Alternatively, you can use color names or #xxxxxx
# format.

# The colors below are taken from Rasterman's .Xdefaults file.  They are intended to
# display ANSI art properly when combined with a good ANSI-art font (like vga or
# Rasterman's nexus font).
    color  0 0    0    0
    color  1 0xaa 0    0
    color  2 0    0210 0
    color  3 0xaa 0x55 0x22
    color  4 0    0    0xaa
    color  5 0xaa 0    0xaa
    color  6 0    0xaa 0xaa
    color  7 0xaa 0xaa 0xaa
    color  8 0x44 0x44 0x44
    color  9 0xff 0x44 0x44
    color 10 0x44 0xff 0x44
    color 11 0xff 0xff 0x44
    color 12 0x44 0x44 0xff
    color 13 0xff 0x44 0xff
    color 14 0x44 0xff 0xff
    color 15 #ffffff
    color bd #ffffff
    color ul #ffffff

# This ends the color section.  Any text after the word "end" is
# assumed to be a comment and ignored.
  end color

# The X11 attributes section.  Should be fairly self-explanatory,
# but if not, consult the X man page.
  begin attributes

# Geometry == widthxheight+x_offset+y_offset, offsets from top left
#             if +, bottom right if -
#    geometry 132x50+100+100
    title "%appname() -- Emacs Theme"
    name "GNU Emacs"
#    iconname Eterm

# Set the fonts.  These must be monospace fonts.  The values shown are
# the Eterm defaults.  The "bold" font is the font used if color BD has
# not been set and Eterm cannot map the foreground color to one of the
# high-intensity colors (8-15).
    font default @DEF_FONT_IDX@
    font 0 @FONT0@
    font 1 @FONT1@
    font 2 @FONT2@
    font 3 @FONT3@
    font 4 @FONT4@
    font 5 10x20
    font 6 12x24
#    font bold 7x14
  end attributes

# The Multichar support options.  Same goes for these fonts as for the normal
# ones.  The "encoding" attribute can be either "eucj" or "sjis" or "euckr"
# or big5 or gb
  begin multichar
    font 0 @MFONT0@
    font 1 @MFONT1@
    font 2 @MFONT2@
    font 3 @MFONT3@
    font 4 @MFONT4@
    encoding @MULTICHAR_ENCODING@
  end multichar

# Define the imageclasses.
  begin imageclasses

# You must define this before setting any images that use it.  This is the $PATH-style variable
# that determines where Eterm looks for image files.
    path "./pix/:~/.Eterm/:~/.Eterm/themes/Eterm/pix:~/.Eterm/pix/:@PKGDATADIR@/pix/"

# If you want a different icon than the standard Eterm one, set this.
#   icon Eterm.xpm

# This is the background animator.  See the man page for the syntax.
#   anim 3 foo1 foo2 foo3

# Here we define an image.
    begin image

# The first thing you set when defining an image MUST be the type.  No type, no dice.  The type
# should be one of the following:  background, up_arrow, down_arrow, left_arrow, right_arrow,
#                                  trough, anchor, menu, or submenu
      type background

# Next you should set the state.  This is either normal, selected, or clicked.
      state normal

# Here you set the file.  You can also set the geometry string here if you follow the filename with
# an @ sign.  That way, you can include the geometries in your pixmaps.list file.
      file %random(`cat pixmaps.list`)

# The mode line.  This defines the startup mode for the image, as well as what modes are allowed.
# Valid modes are "image" (to display the image file), "trans" (to be transparent), or "viewport"
# (for viewport mode).  Syntax is "mode <startup_mode> allow <allowed_modes>".
      mode image allow image trans viewport auto

# Set the image border.  This is a portion of the image which will be kept at its actual size when
# scaling.  Use this for beveled images (buttons, etc.).
      border 0 0 0 0

# Th-th-th-th-that's all folks.
    end image

# The rest of the images.
    begin image
      type trough
      mode image allow image trans viewport auto
      state normal
      color black #666666
      file bar_vertical_3.png
# Here is how you specify the geometry string separately.  See the man page for its syntax.
      geom :scale
      border 2 2 2 3
    end image
    begin image
      type anchor
      mode image allow image auto
      state normal
      color black #666666
      file bar_vertical_1.png
      geom :scale
      border 2 2 2 3
      state selected
      file bar_vertical_2.png
      geom :scale
      border 2 2 2 3
    end image
    begin image
      type thumb
      mode image allow image auto
      state normal
      color black #666666
      file thumb_1.png
      geom :scale
      border 3 3 3 3
      state selected
      file thumb_2.png
      geom :scale
      border 3 3 3 3
    end image
    begin image
      type up_arrow
      mode image allow image auto
      state normal
      color black #666666
      file button_arrow_up_1.png
      geom :scale
      border 2 2 2 2
      state selected
      file button_arrow_up_2.png
      geom :scale
      border 2 2 2 2
      state clicked
      file button_arrow_up_3.png
      geom :scale
      border 2 2 2 2
    end image
    begin image
      type down_arrow
      mode image allow image auto
      state normal
      color black #666666
      file button_arrow_down_1.png
      geom :scale
      border 2 2 2 2
      state selected
      file button_arrow_down_2.png
      geom :scale
      border 2 2 2 2
      state clicked
      file button_arrow_down_3.png
      geom :scale
      border 2 2 2 2
    end image
    begin image
      type menu
      mode image allow image auto
      state normal
      color black #999999
      file bar_horizontal_1.png
      geom 100x100+0+0:scale
      border 2 3 2 3
      state selected
      file bar_horizontal_2.png
      geom 100x100+0+0:scale
      border 2 3 2 3
    end image
    begin image
      type submenu
      mode image allow image auto
      state normal
      color black #999999
      file menu1.png
      geom 100x100+0+0:scale
      border 3 15 3 3
      padding 3 15 3 3
      state selected
      file menu2.png
      geom 100x100+0+0:scale
      border 3 15 3 3
      padding 3 15 3 3
      state clicked
      file menu3.png
      geom 100x100+0+0:scale
      border 3 15 3 3
      padding 3 15 3 3
    end image
    begin image
      type button_bar
      mode image allow image auto
      state normal
      color black #999999
      file bar_horizontal_1.png
      geom 100x100+0+0:scale
      border 2 3 2 2
      state disabled
      color white #333333
      cmod image 0xc0
      border 2 3 2 2
    end image
    begin image
      type button
      mode image allow image auto
      state normal
      color black #cccccc
      file bar_horizontal_1.png
      geom 100x100+0+0:scale
      border 2 3 2 2
      state selected
      file bar_horizontal_2.png
      geom 100x100+0+0:scale
      border 2 3 2 2
      state clicked
      file bar_horizontal_3.png
      geom 100x100+0+0:scale
      border 2 3 2 2
    end image
  end

%include "menus.cfg"

# This section *must* come after the menu definitions if you want
# menu actions to work.  C'est la vie. :-)
#
# Syntax:  bind [ { <modifiers> | anymod } ] { <key> | <keysym> | <button> } to { string | echo | menu } <parameter>
#
  begin actions
    bind ctrl button1 to string "\e]5;\a"
    bind ctrl button2 to string "\e[?30t"
    bind ctrl button3 to menu Eterm
    bind ctrl shift button3 to string "\e]6;14\a"
  end actions

# This section must also come after the menus if you want any buttons
# to launch menus.  (If not, it can go anywhere.)
  begin button_bar

# Specify a font.  The default buttonbar font is the default terminal
# font as defined in the attributes section above.
    font "-adobe-helvetica-medium-r-normal--10-100-75-75-p-56-iso8859-1"

# Add a button.  The syntax is:
#   button <text> [ icon <filename> ] action { string | echo | menu } <parameter>
#
    button Eterm action menu Eterm
    button Buffers action menu Buffers
    button Files action menu Files
    button Edit action menu Edit
    button Search action menu Search
    button Help action menu Help
    rbutton icon help.png action string "\e]6;73;Eterm -e man Eterm\a"
    rbutton icon exit.png action string "\e]6;70\a"
  end button_bar

# The XIM support options.
# input_method: set the name of your favorate input method program
# preedit_type: OverTheSpot or OffTheSpot or Root
#  begin xim
#    input_method Ami
#    preedit_type OverTheSpot
#  end xim

# Boolean variables.  The values can be "1", "on", or "true" for TRUE, or "0",
# "off", or "false" for FALSE.
  begin toggles

# If true, Eterm will un-iconify itself when it receives a beep (ASCII 0x07)
    map_alert on

# If true, Eterm will flash rather than sending a beep.
    visual_bell off

# If true, Eterm will prepend '-' to the shell name when calling it.
    login_shell true

# If true, Eterm will display the scroll bar
    scrollbar on

# If true, Eterm will attempt to make an entry in the utmp file to record the
# login information.  Eterm *must* run privileged to do this.
    utmp_logging on

# If true, Eterm will handle the Meta (Alt) + keypress to set the 8th bit.
# If false, Eterm will handle the Meta + keypress as an escape prefix. (default)
#    meta8 false

# If true, Eterm will start iconified.
    iconic false

# If true, Eterm will jump to the bottom of the window when something is output
# to the terminal.
    home_on_output 1

# If true, Eterm will jump to the bottom of the window when a key is pressed.
    home_on_input 1

# If true, Eterm will put the scrollbar on the right of the window (default is left).
    scrollbar_right true

# If true, the scrollbar will have no trough.
    scrollbar_floating false

# If true, Eterm will run with no window borders.
    borderless false

  end toggles

  begin keyboard

# Use the supplied keysym to reduce/enlarge the font
    smallfont_key LessThan
    bigfont_key GreaterThan

# You can also associate a given keysym (0xff00 - 0xffff) with a string
#    keysym 0xffff "\r\n\e\007\t"

# Greek keyboard mode.  First the word "greek", then its boolean
# state, then its mode (either "iso" or "ibm").
#    greek off iso
  end keyboard

  begin misc

# The command to which to pipe print requests (printscreen)
#    print_pipe "lpr"

# The number of lines in the scrollback buffer.  More lines, more memory needed.
    save_lines 1024

# The characters to use as word delimiters for double-click selection
    cut_chars "\t\\\`\\\"\'&() *,;<=>?@[]{|}"

# Defines the width of the border between the terminal window and the client window.
# (Default is 5).
    border_width 5

# Defines the number of pixels to add between lines (default is 0).
#    line_space 2

# Value to use for $TERM
    term_name xterm

# Program to exec (intended for use with themes)
    exec emacs -nw

  end misc

end main
