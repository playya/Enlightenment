##################
The designer's den
##################

We all know that CSS will never be completely independent from markup if we
follow the current standards. Every time I dream that something like EDJE could
some day be used to design website I have to change my underwear.

But today we have to work with what we have. So I created a simple script to
impment grids *semantically* and abstracted from the CSS "framework" that
provides it.

Every time you call css.php inside /style/css/ it will lift the code from
`grid.css.php` and generate a valid `grid.css` file that should will included in
every page. This php file is not to be called dinamically but rather manually
every time you change `grid.css.php`, you should be able of calling it from your
browser, in which case a status message will be displayed.

When errors ocurr a half-way a `grid.css.new` file will be created for debugging
pruposes, along with the html ouput of grid.php.

On sucess, the resulting `grid.css` file will include:

#.   A reset CSS code.                        (probably from baselinecss.com)
#.   A vertical (typographic) grid.           (probably from baselinecss.com)
#.   The newly generated semantic grid system.

All other `*.css` files are normal files to be edited manually.

Grids, grids, grids.
====================
There are two grids the vertical grid and the horizontal grid. The vertical
grid consists of horizontal "lines" while the horizontal grid consist of
vertical "lines"

The **vertical grid** is not generated by grids.php but it sets typography to a
baseline based on a line-height of 18px. Any element that isn't controlled
entirely by typograpy should be set manally to a multiple of 18px, so should
all vertical margins and padding.

The **horizontal grid** is generated automatically by grid.php based on the
contents of `grid.css.php`.


grid.css.php
============
This file is quite simple, it looks like a css file but it isn't, you use the
semantic selectors for each page to insert the css code to turn the elements
into the grid system components.

If selectors collide prepend `body.pagename` to solve the colision, for both
elements, to prevent cascading issues. With "pagename" being the english name
of the page that owns each selector.

API
---
The api is quite simple:

#.  `<?php echo file_get_contents($file) ?>` is used to inline css code form
    other plain CSS files.

#.  `<?php page_container() ?>` is used to inline the CSS needed for that
    element to become the main website container, no echo needed.

#.  `<?php column_container($child) ?>` is used to inline the CSS needed to turn
    that element into a column container, if the column container is inside
    another column set $child to true otherwise leave it empty, the default
    value is false.

#.  `<?php column($span, $last) ?>` is used to inline the code necessary to
    turn that element into a column that spans a $span number of columns. The
    $last parameter is set to false by default and should be only set to true if
    the colum will be the last of the row, this will remove the gutter and
    cleanup other floats preveting it from wrapping.