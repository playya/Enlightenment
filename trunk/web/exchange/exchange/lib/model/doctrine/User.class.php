<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class User extends BaseUser
{
	const ANONYMOUS = 1;
	const USER = 2;
	const ADMIN = 3;
	
	public static function getByName($name) {
		$q = new Doctrine_Query();
		return $q->select('u.*')
					->from('User u')
					->where('name = ?', array($name))
					->fetchOne();
	}
	
	public static function getByPassword($name, $password) {
		$q = new Doctrine_Query();
		return $q->select('u.*')
						->from('User u')
						->where('name = ? and password = ? and active = ?', 
							array($name, md5($password), true))
						->fetchOne();
	}
	
	public static function getByEmail($name, $email) {
		$q = new Doctrine_Query();
		return $q->select('u.*')
						->from('User u')
						->where('name = ? and email = ? and active = ?', 
							array($name, $email, true))
						->fetchOne();
	}
	
	public static function getByApiKey($id, $api_key) {
		$q = new Doctrine_Query();
		return $q->select('u.*')
						->from('User u')
						->where('id = ? and api_key = ? and active = ?', 
							array($id, $api_key, true))
						->fetchOne();
	}
	
	public function getXML($rss = false, $api_key = false) {
		if ($rss) {
			$output = 	'<item>' .
							'<title>'.htmlspecialchars($this->getName()).'</title>' .
							'<link>'.htmlspecialchars(Tools::get('url').'/user/show/'.$this->getId()).'</link>' .
							'<description>'.
								htmlspecialchars(	'Email: '.$this->getEmail().', ' .
													'Role: '.$this->getRoleName().', ' .
													'Created On: '.date('r', strtotime($this->getCreatedAt()))).
							'</description>' .
							'<pubDate>'.date('r', strtotime($this->getUpdatedAt())).'</pubDate>' .
							'<guid>'.htmlspecialchars(Tools::get('url').'/user/show/'.$this->getId()).'</guid>' .
						'</item>';
		} else {
			$output = 	'<user>' .
							'<id>'.$this->getId().'</id>' .
							'<name>'.htmlspecialchars($this->getName()).'</name>' .
							'<email>'.htmlspecialchars($this->getEmail()).'</email>' .
							'<role>'.htmlspecialchars($this->getRoleName()).'</role>';
			if ($api_key)
				$output .= '<api_key>'.$this->getApiKey().'</api_key>';
			$output .=		'<created_at>'.$this->getCreatedAt().'</created_at>' .
							'<updated_at>'.$this->getUpdatedAt().'</updated_at>' .
						'</user>';
		}
		return $output;
	}
	
	/* # - digit
	   C - Caps Character (A-Z)
	   c - Small Character (a-z)
	   X - Mixed Case Character (a-zA-Z) */
	public static function generatePassword($mask = 'X#CX#CcX') {
		$length = strlen($mask);
		$pwd = '';
		for ($c=0;$c<$length;$c++) {
			$ch = $mask[$c];
			switch ($ch) {
				case '#':
					$p_char = rand(0,9);
					break;
				case 'C':
					$p_char = chr(rand(65,90));
					break;
				case 'c':
					$p_char = chr(rand(97,122));
					break;
				case 'X':
					do {
					  $p_char = rand(65,122);
					} while ($p_char > 90 && $p_char < 97);
					$p_char = chr($p_char);
					break;
			}
			$pwd .= $p_char;
		}
		return $pwd;
	}
	
	public static function getRoleOptions() {
		return array(
			self::USER => 'User',
			self::ADMIN => 'Admin'
			);
	}
	
	public function getRoleName()
	{
		if ($this->getRole()==self::USER)
			return 'User';
		elseif ($this->getRole()==self::ADMIN)
			return 'Admin';
		return '';
	}
	
	public function save(Doctrine_Connection $conn = null) {
    	if (!$this->getHash())
			$this->setHash(md5(uniqid(rand(), true)));
    	if (!$this->getApiKey())
			$this->setApiKey(md5(uniqid(rand(), true)));
    	if (!$this->exists()) {
			$this->setCreatedAt(date('Y-m-d H:i:s'));
			$this->sendActivationEmail();
    	}
		$this->setUpdatedAt(date('Y-m-d H:i:s'));
		parent::save($conn);
	}
	
	public function sendActivationEmail() {
		$to      = $this->getEmail();
		$subject = 'Activate Your Account - '.Tools::get('name');
		$message = 'Please activate your '.Tools::get('name').' account by visiting the following link:'."\n".
					Tools::get('url').'/user/activate/hash/'.$this->getHash();
		$headers = 'From: '.Tools::get('webmaster_email') . "\n" .
		    'Reply-To: '.Tools::get('webmaster_email') . "\n" .
		    'X-Mailer: '.Tools::get('name').' Mailer';
		mail($to, $subject, $message, $headers);
	}
	
	public function sendForgotPasswordEmail() {
		$password = User::generatePassword();
		$this->setPassword(md5($password));
		$this->save();
		$to      = $this->getEmail();
		$subject = 'Forgot Password - '.Tools::get('name');
		$message = 'Unbelievable! You forgot your password. ' . "\n" .
					'Here\'s a newly generated one: '.$password.'' . "\n" .
					'Go login and change your password immediately.' . "\n" .
					Tools::get('url');
		$headers = 'From: '.Tools::get('webmaster_email') . "\n" .
		    'Reply-To: '.Tools::get('webmaster_email') . "\n" .
		    'X-Mailer: '.Tools::get('name').' Mailer';
		mail($to, $subject, $message, $headers);
	}
	
	public static function update($values, $user) {
		$id = $values['id'];
		if ($id) {
			$q = new Doctrine_Query();
			if ($user->getRole()==User::ADMIN || ($user->getId() == $id)) {
				$update_user = $q->select('u.*')
								->from('User u')
								->where('id = ?', array($id))
								->execute()
								->getFirst();
				if ($user->getRole()==User::ADMIN && $values['role'])
					$update_user->setRole($values['role']);
			}
		} else {
			$update_user = new User();
			$update_user->setRole(User::USER); // Not an Admin
		}
		if ($update_user) {
			$update_user->setName($values['name']);
			$update_user->setEmail($values['email']);
			if ($values['password'] && $values['password']==$values['password2'])
				$update_user->setPassword(md5($values['password']));
			$update_user->save();
			return $update_user;
		}
		return null;
	}
}