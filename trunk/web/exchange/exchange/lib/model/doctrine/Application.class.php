<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Application extends BaseApplication
{
	public static function getByName($name) {
		$q = new Doctrine_Query();
		return $q->select('a.*')
					->from('Application a')
					->where('name = ?', array($name))
					->fetchOne();
	}
	
	public static function getAsOptions()
	{
		$q = new Doctrine_Query();
		$q = $q->select('a.*')
				->from('Application a');
		$q = $q->addWhere('approved = ?', array(true));
		$applications = $q->execute();
		$options = array();
		foreach ($applications as $application)
			$options[$application->getId()] = $application->getName();
		return $options;
	}

	public function getFolderPath()
	{
		if (sfConfig::get('sf_environment') == 'prod')
			return sfConfig::get('sf_root_dir').DIRECTORY_SEPARATOR.'..'.DIRECTORY_SEPARATOR.'html'.DIRECTORY_SEPARATOR.'files'.DIRECTORY_SEPARATOR.'application'.DIRECTORY_SEPARATOR.$this->getId().DIRECTORY_SEPARATOR;
		else
			return sfConfig::get('sf_root_dir').DIRECTORY_SEPARATOR.'web'.DIRECTORY_SEPARATOR.'files'.DIRECTORY_SEPARATOR.'application'.DIRECTORY_SEPARATOR.$this->getId().DIRECTORY_SEPARATOR;
	}
	
	public function getUrlPath()
	{
		return '/files/application/'.$this->getId().'/';
	}
	
	public function getShowPath()
	{
		return '/application/show/'.$this->getId();
	}
	
	public function getSourceDisplayUrl()
	{
		$url = $this->getSourceUrl();
		if (stripos($url, 'e16')===0 
			|| stripos($url, 'e17')===0
			|| stripos($url, 'e_modules')===0
			|| stripos($url, 'eterm')===0
			|| stripos($url, 'misc')===0)
			return '/home/cvs/path/'.urlencode(str_replace('/', '|', $url));
		return $url;
	}
	
	public function getXML($rss = false)
	{
		if ($rss) {
			$output = 	'<item>' .
							'<title>'.htmlspecialchars($this->getName()).'</title>' .
							'<link>'.htmlspecialchars(Tools::get('url').'/application/show/'.$this->getId()).'</link>' .
							'<description>'.
								htmlspecialchars('	<a href="'.Tools::get('url').'/application/show/'.$this->getId().'">' .
														'<img src="'.Tools::get('url').$this->getUrlPath().'smallthumb.png" alt="Thumbnail">' .
													'</a><br/>'.
												$this->getDescription()).'</description>' .
							'<pubDate>'.date('r', strtotime($this->getUpdatedAt())).'</pubDate>' .
							'<guid>'.htmlspecialchars(Tools::get('url').'/application/show/'.$this->getId()).'</guid>' .
						'</item>';
		} else {
			$output = '<application>';
			$output .= '<id>'.$this->getId().'</id>';
			$output .= '<name>'.htmlspecialchars($this->getName()).'</name>';
			$output .= '<description>'.htmlspecialchars($this->getDescription()).'</description>';
			$output .= '<url>'.htmlspecialchars($this->getSourceUrl()).'</url>';
			$output .= '<thumbnail>'.htmlspecialchars(Tools::get('url').$this->getUrlPath().'smallthumb.png').'</thumbnail>';
			$output .= '<screenshot>'.htmlspecialchars(Tools::get('url').$this->getUrlPath().'screenshot.png').'</screenshot>';
			$output .= '<user_id>'.$this->getUserId().'</user_id>';
			$output .= '<created_at>'.$this->getCreatedAt().'</created_at>';
			$output .= '<updated_at>'.$this->getUpdatedAt().'</updated_at>';
			$output .= '</application>';
		}
		return $output;
	}
	
	public function clearThemeGroups()
	{
		$applicationThemeGroups = $this->getApplicationThemeGroups();
		foreach ($applicationThemeGroups as $applicationThemeGroup)
			$applicationThemeGroup->delete();
	}
	
	public function addThemeGroup($name)
	{
	  	$name = trim($name);
	  	$q = new Doctrine_Query();
	    $applicationThemeGroup = $q->select('mt.*')
	    				->from('ApplicationThemeGroup at, mt.ThemeGroup t')
	    				->addWhere('at.application_id = ? and t.name = ?', array($this->getId(), $name))
	    				->fetchOne();
	    if (!$applicationThemeGroup) {
	  		$q = new Doctrine_Query();
		    $themeGroup = $q->select('t.*')
		    				->from('ThemeGroup t')
		    				->addWhere('t.name = ?', array($name))
		    				->fetchOne();
		    if (!$themeGroup) {
		    	$themeGroup = new ThemeGroup();
		    	$themeGroup->setName($name);
		    	$themeGroup->save();
		    }
		    $applicationThemeGroup = new ApplicationThemeGroup();
		    $applicationThemeGroup->setThemeGroupId($themeGroup->getId());
		    $applicationThemeGroup->setApplicationId($this->getId());
		    $applicationThemeGroup->save();
	    }
	    return $applicationThemeGroup;
	}
	
	public function save(Doctrine_Connection $conn = null) {
    	if (!$this->exists()) {
			$this->setCreatedAt(date('Y-m-d H:i:s'));
    	}
    	$modified = $this->getModified();
    	if (!isset($modified['downloads'])&&!isset($modified['rating']))
			$this->setUpdatedAt(date('Y-m-d H:i:s'));
		parent::save($conn);
	}
	
	public function updateRating() {
		$ratings = $this->getRatings();
		$total = 0;
		if (!$ratings->count())
			return 0;
		foreach ($ratings as $rating)
			$total += $rating->getValue();
		$this->setRating($total / $ratings->count());
		$this->save(); 
	}
	
	public static function update($values, $user)
	{
		$id = $values['id'];
		if ($id) {
			$q = new Doctrine_Query();
			$q = $q->select('a.*')
					->from('Application a');
			$q = $q->addWhere('id = ?', array($id));
			if (!$user->getRole()==User::ADMIN)
				$q = $q->addWhere('user_id = ?', array($user->getId()));
			$application = $q->fetchOne();
		} else
			$application = new Application();
		if ($application) {
			$application->setName($values['name']);
			$application->setDescription($values['description']);
			$application->setSourceUrl($values['source_url']);
			if (!$application->getUserId())
				$application->setUserId($user->getId());
			$application->setApproved(false);
			$application->save();
			$folderpath = $application->getFolderPath();
			if (!is_dir($folderpath))
				mkdir($folderpath);
			$screenshot = $values['screenshot'];
			if ($screenshot) {
				$screenshotpath = $folderpath.$application->getId().$screenshot->getOriginalName();
				$screenshot->save($screenshotpath);
				$smallThumb = new Thumbnail($screenshotpath);
				if ($smallThumb->getCurrentWidth() > 150 || $smallThumb->getCurrentHeight() > 150)
					$smallThumb->resize(150, 150);
				$smallThumb->show(100, $folderpath.'smallthumb.png');
				$bigThumb = new Thumbnail($screenshotpath);
				if ($bigThumb->getCurrentWidth() > 500 || $bigThumb->getCurrentHeight() > 500)
					$bigThumb->resize(500, 500);
				$bigThumb->show(100, $folderpath.'bigthumb.png');
				$screenshot = new Thumbnail($screenshotpath);
				$screenshot->show(100, $folderpath.'screenshot.png');
				unlink($screenshotpath);
			}
			return $application;
		}
		return null;
	}
}
