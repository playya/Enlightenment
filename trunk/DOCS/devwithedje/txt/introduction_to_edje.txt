Allow me to begin this chapter with a quote from the introduction of Edje's API
Reference. After all, I cannot expect to give Edje a better introduction than 
its creator:

    Edje is a complex graphical design and layout library. [..]

    [..] Edje should serve all the purposes of creating visual elements 
    (borders of windows, scrollbars, etc.) and allow the designer the ability 
    to animate, layout and control the look and feel of any program using Edje 
    as its basic GUI constructor. This library allows for multiple collections
    of Layouts in one file, sharing the same image database and thus allowing a
    whole theme to be conveniently packaged into 1 file and shipped around.

    Edje [..] separates the layout and behavior logic. Edje files ship with an 
    image database, used by all the parts in all the collections to source 
    graphical data. [..] Each part collection consists of a list of visual 
    parts, as well as a list of programs. A program is a conditionally run 
    program that if a particular event occurs (a button is pressed, a mouse 
    enters or leaves a part) will trigger an action that may affect other 
    parts. In this way a part collection can be "programmed" via its file as to
    hilight buttons when the mouse passes over them or show hidden parts when a
    button is clicked somewhere etc. The actions performed in changing from one
    state to another are also allowed to transition over a period of time, 
    allowing animation.

    [..] This separation and simplistic event driven style of programming can 
    produce almost any look and feel one could want for basic visual elements. 
    Anything more complex is likely the domain of an application or widget set
    that may use Edje as a convenient way of being able to configure parts of 
    the display.

As we have seen in the past chapters, there are roughly two methods for 
creating Graphical User Interfaces. In both cases it had to be implemented 
through a programming language. In one case, an API was used by the application 
developer to assemble interface elements from more primitive objects, in the
other case the API was used to include objects already defined by a library. 
Any changes to an nterface object beyond simplistic style modifications had to 
be submitted by the designer to the developer. Layout changes were only 
slightly less difficult than behavior changes. The idea of working on the 
interface objects and their composition in a live environment, like a web 
developer does, was pretty much unthinkable.

This is where the Edje library fits in, it liberates the designer and the 
developer from eachother. The artists uses the Edje Data Collection language to
manipulate primitive objects. EDC is in some ways comparable to Cascading Style
Sheets but its free of the framework that markup imposes. From the other side, 
the developer only has to include the resulting object and setup the callbacks 
(by the main loop) to the backend functions.

..  image:: img/workflow.png
    :scale: 85
    :align: center

Except for the usage of nested blocks, the sintax of an EDC file is similar to 
CSS. What really sets them appart is that with EDC the designer it's free to 
create and layout design elements as he sees fit. With CSS the designer is 
limited to applying style and layout properties to a structure of objects 
defined by the markup. With Edje each design object, know as "part", is created
by the designer and the final interface object composed by those parts, known
as "group", is used by the developer. The resulting theme file can consist of 
multiple groups representing multiple interface object.

The application developer will find out that the Edje API is small, since the 
developer is not expected to alter the composition of a group. The API focus on
high level manipulation of groups, like forcing a maximum size, but provides 
some functions to alter the content of a part when it's necessary to transmit 
information, like altering a paragraph of text with a message.

If we compare Edje to both extremes of GUI development we can see it provides 
the flexibility of developing your own interface objects from a plain canvas, 
yet remain almost as simple as including a predefined object from a toolkit. Of
course Edje has shortcomings of its own and we will explore them in this book 
as well.