Now that we know how to setup the environment to display the Edje objects we 
will review how to include and interact with the objects themselves. The 
following code is platform independent and can be merged with the example code
provided before or with the equivalent for any other platform.

Just like the last time we begin by including the necessary header files and 
initializing the libraries::
    
    ...
    #include <Edje.h>
    ...
    int main() {
        ...
        if (!edje_init()) return EXIT_FAILURE;
        ...

After a pointer to the canvas has been acquired, we need a pointer to a valid 
Evas object to insert our Edje object::

    ...
    Evas_Object *edje = NULL;
    ...
    edje = edje_object_add(evas);
    edje_object_file_set(edje, "testfile.edj", "testgroup");
    ...
          
Both functions are specific to Edje, in the first case we use edje_object_add 
to create a pointer to an Evas object and edje_object_file_set to add the 
contents represented by "testgroup" in "testfile.edj".
            
As with any other Evas object we need to instruct Evas to make it visible, but
not before adjusting the object inside the canvas or since we are only showing
one object, adjust the canvas to the size of our object::

    ...
    Evas_Coord width, height;
    ...
    evas_object_move(edje, 0, 0);
    edje_object_size_min_get(edje, &amp;width, &amp;height);
    evas_object_resize(edje, width, height);
    ecore_evas_resize(ecore_evas, width, height);
    evas_object_show(edje);
    ...

First we use evas_object_move to move our Edje object to the left-most, up-most
corner of the canvas. The function edje_object_size_min_get, returns the 
minimal possible size of the object and evas_object_resize changes the current 
size of the object to those values.
            
Before the end, we resize the canvas to the same values the object has with 
ecore_evas_resize and (finally) instruct Evas to show the object.