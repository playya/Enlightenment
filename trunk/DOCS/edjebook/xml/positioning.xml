<chapter>
<title>Edje Layout, Fills and Positioning</title>

<para>
The Edje positioning model is based heavily on relativity, and is difficult for many new users to adjust to.  Simply put, every
part defined is relative to something else and is positioned relative to that thing.  If you do not explicitly define what a part is
relative to it is relative to the entire interface.   The sections rel1 and rel2 are present in every part description and
define the positioning.  Each part should be thought of as a container, and the contents of the part may not necessarily
fill the entire container.  Thus we can think of the interface itself as a container, which simply contains other containers.
rel1 defines the positioning of the top left corner of the part container, and rel2 defines the positioning of the bottom right
corner of the part container.  Doubles are used with the keyword relative ranging from 0.0 to 1.0 representing a percentage of left-to-right
and top-to-bottom.  For instance, on a container the top left corner is 0.0 0.0, where the first double is the horizontal position and
the second is the vertical.  Whenever positioning is done in Edje you will always specify both horizontal and veritical parameters, and
always horizontal first followed by veritcal.  Thus the bottom right corner is 1.0 1.0.   Everything starts from the top left corner.
So the position 0.5 0.5 (relative to the whole interface) would be the middle of the interface, half way across the interface to the right
and half way down the interface moving south.
</para>

<figure><title>Positioning Model</title>
<graphic format='PNG' align='center' fileref='img/positioning.png'/>
</figure>

<para>In the figure we can see two containers, the large one representing the whole interface and the smaller in the middle representing a part.
On top I have provided an Edje compass which is a helpful tool to visualize positioning.  Looking at the compass, notice that the left and northern
directions approach 0.0 moving negatively, and that the right and southern directions approach 1.0 moving in the positive direction.  Again, this
is because everything starts from the top left corner of the parent container, regardless if that parent container is the entire interface or just
another part.  So the part in the middle of our figure would be positioned starting at roughtly 0.4 0.4, not 0.5 0.5.  A position of 0.5 0.5 would place
the top left corner of the part exactly in the middle of the interface, not center entire part.  To better illistrate this lets look at some
examples as you would see them in an EDC.
</para>

<figure>
<title>Placing a rectangle</title>
<programlisting>
                part {
                        name, "background";
                        type, RECT;
                        description {
                                state, "default" 0.0;
                                color, 255 255 255 255;

                                rel1 {
                                        relative, 0.0 0.0;
                                        offset, 0 0;
                                }

                                rel2 {
                                        relative, 1.0 1.0;
                                        offset, 0 0;
                                }
                        }

                }

                part {
                        name, "black_rect";
                        type, RECT;
                        description {
                                state, "default" 0.0;
                                color, 0 0 0 255;

                                rel1 {
                                        relative, 0.0 0.0;
                                        offset, 10 10;
                                }

                                rel2 {
                                        relative, 1.0 1.0;
                                        offset, -10 -10;
                                }
                        }

                }
</programlisting>
</figure>

<para>In the example above we define two parts, both simple rectangles.  The rel1 and rel2 sections are
defining the position of these rectangles.  The first part named "background" positions the rectangles
top left corner (rel1) to 0.0 (left) 0.0 (top) of the interface since no "to" keyword is present.  The
bottom right corner (rel2) is positioned at 1.0 (far right) 1.0 (far bottom).  No offset is specified
for either position so the rectangle will stretch from the top left corner of the interface to the
bottom right corner of the interface, which is the entire interface.  An EVAS has no default background,
and by extension, neither does an Edje interface, therefore you will always need to do something similiar
to this whether you use an image or a rectangle to fill in the background.
</para>

<para>The second part in the example above is very similar to the "background" part, it is not relative
to anything, and therefore is relative to the whole interface.  However, notice that an offset is specified
for both rel1 and rel2.  These values are position modifiers specified in pixels.  These offsets are based
on the positioning defined by the relative keyword.  Again, the two arguments specify horizontal positioning
followed by vertical.  So by using an offset in rel1 of 10 10, we're moving the top left corner of the part
(rel1) by 10 pixels to the right and 10 pixels south of the position specified by relative.  In the same way,
rel2 is placed at the bottom right corner of the interface, and offset by 10 pixels to the left (-10) and
10 pixels north (-10).  Remember that these values are negative because all positioning originates from the
top left corner of the container, so in this case we move backward thus making the values negative.
</para>

<para>
So putting these two parts together we are left with an effect of a black interface with a 10 pixel white border.
Or if you look at it another way, a white interface with a giant rectangle that is inset by 10 pixels.  In Edje
there are always several ways to look at placement to simulate effects.  One variation that could have been used
in the example would have been to place the "black_rect" part relative to the "background" part, rather than
positioning both relative to the entire interface.  In this example we could have added to the definition "to, "background";"
to both rel1 and rel2 of "black_rect"s default state and achieved the same result with the added bonus that if
we for some reason changed the positioning of the background the "black_rect" would be positioned accordingly.
</para>

<para>
To create a line of buttons in Edje we are presented with some positioning decisions to make.  Each button could
be positioned absolutely to the corners of the interface, or instead the first button would be positioned absolutely and
each following button positioned relative to the first.  Which method is right for your interface is an important decision
as it will effect the amount of effort needed to modify the interface later or if you move those parts using
a program.  If you position each button relative to the first you only need to move the first buttons position to move them
all as opposed to moving each button individually.  In this way we can group parts together to make them act in a unified
positioning manner.
</para>

<figure>
<title>Placing a row of buttons</title>
<programlisting>
                part {
                        name, "button1";
                        type, RECT;
                        description {
                                state, "default" 0.0;
                                color, 0 0 0 255;

                                rel1 {
                                        relative, 0.0 0.0;
                                        offset, 10 10;
                                }

                                rel2 {
                                        relative, 0.0 0.0;
                                        offset, 30 20;
                                }
                        }

                }

                part {
                        name, "button2";
                        type, RECT;
                        description {
                                state, "default" 0.0;
                                color, 0 0 0 255;

                                rel1 {
                                        relative, 1.0 0.0;
                                        offset, 10 0;
                                        to, "button1";
                                }

                                rel2 {
                                        relative, 1.0 1.0;
                                        offset, 30 0;
                                        to, "button1";
                                }
                        }

                }
</programlisting>
</figure>

<para>In this example we have two buttons.  Looking at "button1" we see it's top left corner (rel1) is positioned at the top left
corner of the interface (relative) and then offset 10 pixels to the right and 10 pixels south (offset).  Its bottom right corner (rel2)
is relative to the top left corner of the interface as well, but then offset 30 pixels to the right and 20 pixels south.  We position
both corners from the top left corner instead of from both the top left and bottom right corner of the interface.  This is a result of using
static offsets, we want to ensure the button stays in the same place even if the interface is resized.  Notice we are not specifying the
min and max size of either buttons, all sizing is happening based on the position of the corners of that part.  The result of the positioning
scheme used for "button1" is a container that stretches from the top left corner and is 20 pixels wide and 10 pixels high.  If we had specified
a min and max size for the part of 10 pixels the rectangle would only fill half of the container, and unless an "align" keyword was used that rectangle
would start from the top left corner of the container like everything else, thus the left side of the container would be filled with rect and the other
half of the container empty.</para>

<para>Button2 in our example uses the "to" keyword in both rel1 and rel2.  The top left corner of "button2" is positioned at the right top corner of "button1",
because rel1 is relative to "button1" and the relative keyword specifies that the top left corner of this part is relative to 1.0 0.0 of "button1".  An offset is
also used, which moves the "button2" container to the right by 10 pixels horizontally, which is going to act as the button spacing.  The bottom right
corner (rel2) is again positioned relative to "button1" but this time relative to "button1"s bottom right corner.  An offset of 30 pixels is used which
provides 10 pixels for our button spacing, and then another 20 pixels for the containers width.  In the end this gives us two buttons spaced 10 pixels apart
that are 20 by 10 pixels in size.  If we wanted to add another button we'd make it relative to "button2" so that each button is relative to the next all of
which are positioned ultimately by the first button.
</para>

<para>Suppose we wanted to create a button bar, but rather than using static buttons like in the last example we simply wanted them to fill the width of the
interface completely reguardless of how large or small it was resized.  In this case we could use something like the following example.
</para>

<figure>
<title>Resizable row of buttons</title>
<programlisting>
               part {
                        name, "button1";
                        type, RECT;
                        description {
                                state, "default" 0.0;
                                color, 255 0 0 255;

                                rel1 {
                                        relative, 0.0 0.0;
                                        offset, 0 0;
                                }

                                rel2 {
                                        relative, 0.5 0.0;
                                        offset, 0 30;
                                }
                        }

                }

                part {
                        name, "button2";
                        type, RECT;
                        description {
                                state, "default" 0.0;
                                color, 0 255 0 255;

                                rel1 {
                                        relative, 0.5 0.0;
                                        offset, 0 0;
                                }

                                rel2 {
                                        relative, 1.0 0.0;
                                        offset, 0 30;
                                }
                        }

                }
</programlisting>
</figure>

<para>In this example we are creating two buttons and positioning them relative to the interface.  The first button defines its container
from the top left corner of the interface (rel1) over to the middle of the interface, and 30 pixels south of the middle top (rel2).
The second buttons container starts half way across the top of the interface (rel1) and extends the rest of the way across the interface and
south by 30 pixels (rel2).  So we have two buttons that fill the entire width of the interface and are 30 pixels in height.  No matter how
thin or wide we resize the interface the button bar will look exactly as it should.</para>

<para>If we wanted to modify the example to place the button bar on the bottom of the interface we would change the veritcal parameter of the
relative keywords from 0.0 to 1.0 placing everything relative to the bottom of the interface, leaving the horizontal parameters alone and then
changing our offsets from a posative 30 pixels to a negative 30 pixels in order to push them upward rather than down.</para>

</chapter>
