<!--
#######################################################
a toggle in edje/embryo
#######################################################
-->
<section>
<sectioninfo>
  <author>
    <firstname>Corey</firstname>
    <surname>Donohoe</surname>
    <email>atmos@atmos.org</email>
    <othername>'atmos'</othername>
  </author>
  <date>11 July 2004</date>
</sectioninfo>

<title>Recipe: Edje/Embryo toggle</title>

<para>
Long ago <ulink url="http://www.rasterman.com">Raster</ulink> made Edje, and it
was good. The cavemen who discovered Edje on the cave walls (#edevelop)
were amazed, but early on there were many drawbacks. Given enough
creativity you could get away with things, toggles for example, but it was
alchemy to do properly. For historical purposes, an Edje Toggle without Embryo
is provided, as convoluted as it is. See the <link linkend="ex-Edje_no_Embryo">
Edje without Embryo</link> example below.
</para>

<para>
You'll notice that you have to speak in signals to your
application to determine the state of your toggle. So without further ado,
here's an Edje toggle utilizing embryo, in a <emphasis>much</emphasis> more elegant
fashion.
</para>

<para>
Embryo Scripting inside of Edje, henceforth EE scripting, gives you
variables. You can have integers, floating point numbers, and strings.  
This means that you can basically have some programming logic in
your edjes. Nothing complex, like composite structs, but simple variables
contained in a group might resemble the members of structs.
</para>

<para>
The first part of EE is choosing your variables. In this simple example we
only have one variable, and you get it involved in an edje group by
declaring a <emphasis>script { ... }</emphasis> block.
<emphasis>button_toggle_state</emphasis> is
implicitly an integer, and it will be used as a boolean variable to let us
know whether or not the toggle button is on or off. The cool thing about
this variable is we can use it as a way of communicating between our
application and our edje. Furthermore you can rest easy knowing (assuming
you did it right) that some edje trickery isn't going to throw your app into
limbo.
</para>

<para>
<example>
<title>Creating the variable</title>
<programlisting>
collections {
    group {
        name: "Toggler";
	script {
	    public button_toggle_state;
	}
	parts {
	    part {
		...
	    }
	}
	programs {
	    program {
		...
	    }
	}
    }
}
</programlisting>
</example>
</para>

<para>
The second part of EE Scripting is initializing your variables. For the
most part you can assume these variables will be initialized to zero, but
it's good practice to explicitly set them yourself.  Edje emits a
&quot;load&quot; signal when the group is loaded into memory, this is your
opportunity to set your embryo variables. 

<example>
<title>Initializing variables</title>
<programlisting>
program {
    name: "group_loaded";
    signal: "load";
    source: "";
    script {
	set_int(button_toggle_state, 0);
    }
}
</programlisting>
</example>
</para>

<para>
The third part is actually giving your edje a look. For this example
rectangles are used, but images and even text should also work fine.
There's a background object just for consistency's sake, and there's a
rectangle called &quot;toggler&quot;. toggler has two states,
default (implicitly off) and on. When toggler is clicked it should, you
guessed it, toggle to the other state. off -&gt; on, on -&gt; off. toggler
is going to have its default (off) state color red, and it's going to have
its on state blue so they can easily be differentiated. The background will
be white cause it's not red or blue. :D
</para>

<para>
<example>
<title>The toggler button</title>
<programlisting>
collections {
    group {
        name: "Toggler";
        script {
            public button_toggle_state;
        }
        parts {
            part {
                name: "background";
                type: RECT;
                mouse_events: 0;
                description {
		    state: "default" 0.0;
                    color: 255 255 255 255;
                    rel1 { relative: 0.0 0.0; offset: 0 0; }
                    rel2 { relative: 1.0 1.0; offset: 0 0; }
                }
            }
            part {
                name: "toggle";
                type: RECT;
                mouse_events: 1;
                description {
                    state: "default" 0.0;
                    color: 255 0 0 255;
                    rel1 { relative: 0.0 0.0; offset: 10 10; }
                    rel2 { relative: 1.0 1.0; offset: -10 -10; }
                }
                description {
                    state: "on" 0.0;
                    color: 0 0 255 255;
                    rel1 { relative: 0.0 0.0; offset: 10 10; }
                    rel2 { relative: 1.0 1.0; offset: -10 -10; }
                }
            }
        }
        programs {
            program {
                name: "group_loaded";
                signal: "load";
                source: "";
                script {
                    set_int(button_toggle_state, 0);
                }
            }
        }
    }
}
</programlisting>
</example>
</para>

<para>
The fourth part is hooking in the mouse events to trigger the toggling as
edje programs. Not only changing the Embryo variable, but also change the
appearance of our edje. This example uses normal left mouse button clicking
to change the toggles state, in edje terms "mouse,clicked,1". This example
doesn't use the built in Embryo <emphasis>set_state</emphasis> function call, but emits
signals which are trapped by other programs. The reasoning behind this
approach is to allow for smooth visual transitions between the two states.
The Embryo set_state function call is an immediate state change, and it just
doesn't look a nice as the SINUSOIDAL transition used in the following
snippets.
</para>

<para>
<example>
<title>Hooking into the mouse events</title>
<programlisting>
collections {
    group {
        name: "Toggler";
        script {
            public button_toggle_state;
        }
        parts {
            part {
                 ...
            }
	}
	programs {
	    program {
                name: "toggle_icon_mouse_clicked";
                signal: "mouse,clicked,1";
                source: "toggle";
                script {
		    if(get_int(button_toggle_state) == 0) {
			set_int(button_toggle_state, 1);
                        emit("toggle,on", "");
                    }
                    else {
                        set_int(button_toggle_state, 0);
			emit("toggle,off", "");
		    }
		}
            }
            program {
                name: "toggle_on";
                signal: "toggle,on";
                source: "";
                action: STATE_SET "on" 0.0;
                target: "toggle";
		transition: SINUSOIDAL 0.5;
            }
	    program {
		name: "toggle_off";
                signal: "toggle,off";
                source: "";
                action: STATE_SET "default" 0.0;
                target: "toggle";
                transition: SINUSOIDAL 0.5;
             }
         }
     }
 }
</programlisting>
</example>
</para>

<para>
The fifth part is pondering the scenario presented. This is only the tip of
the iceberg with respect to EE scripting. You can add many more variables
to keep track of internal states that are completely unrelated to your apps.
There are nuances between this and practical usage of Embryo variables,
however understanding these building blocks will make working with or
writing EE scripted apps much more simple.
</para>

<para>
 <itemizedlist mark="bullet" spacing="compact">
  <listitem><para>What's bad about the technique presented here?</para></listitem>
  <listitem><para>What if the app wants the toggle &quot;on&quot; by default?</para></listitem>
 </itemizedlist>
</para>

<para>
You can use a script similar to the following the build this example.
<example>
<title>Build script</title>
<programlisting>
#!/bin/sh -e
THEME="default"
APPNAME=""
edje_cc -v $THEME.edc $THEME.eet
if [ $? = "0" ]; then
    if [ "$APPNAME" = "" ]; then
	echo "Build was successful"
    else
	PREFIX=`dirname \`which $APPNAME\` | sed 's/bin//'`
	sudo cp $THEME.eet $PREFIX"share/$APPNAME/themes/"
	echo -n "Installed theme to "
	echo $PREFIX"share/$APPNAME/themes/"
    fi
else
    echo "Building failed"
fi
</programlisting>
</example>
</para>

<para>
<example id="ex-Edje_no_Embryo">
<title>Edje toggle without Embryo</title>
<programlisting>
images { }

collections {
    group {
        name, "Rephorm";
        min, 50 50;
        max, 75 75;
        parts {
            part {
                name, "Clip";
                type, RECT;
                mouse_events, 0;
                description {
                    state, "default" 0.0;
                    visible, 1;
                    rel1 { relative, 0.0 0.0; offset, 5 5; } 
		    rel2 { relative, 1.0 1.0; offset, -5 -5; }
                    color, 255 255 255 255;
                }
                description {
                    state, "hidden" 0.0;
                    visible, 1; 
		    rel1 { relative, 0.0 0.0; offset, 5 5; } 
		    rel2 { relative, 1.0 1.0; offset, -5 -5; }
                    color, 255 255 255 128;
                }
            }
            part {
                name, "On";
                type, RECT;
                mouse_events, 1;
                clip_to, "Clip";
                description {
                    state, "default" 0.0;
                    visible, 0;
                    rel1 { relative, 0.0 0.0; offset, 5 5; } 
		    rel2 { relative, 1.0 1.0; offset, -5 -5; }
                    color, 255 0 0 0;
                }
                description {
                    state, "visible" 0.0;
                    visible, 1;
                    rel1 { relative, 0.0 0.0; offset, 5 5; } 
		    rel2 { relative, 1.0 1.0; offset, -5 -5; }
                    color, 255 0 0 255;
                }
            }
            part {
                name, "Off";
                type, RECT;
                mouse_events, 1;
                clip_to, "Clip";
                description {
                    state, "default" 0.0;
                    visible, 1;
                    rel1 { relative, 0.0 0.0; offset, 5 5; } 
		    rel2 { relative, 1.0 1.0; offset, -5 -5; }
                    color, 0 0 255 255;
                }
                description {
                    state, "visible" 0.0;
                    visible, 0;
                    rel1 { relative, 0.0 0.0; offset, 5 5; } 
		    rel2 { relative, 1.0 1.0; offset, -5 -5; }
                    color, 0 0 255 0;
                }
            }
            part {
                name, "Grabber";
                type, RECT;
                mouse_events, 1;
                repeat_events, 1;
                clip_to, "Clip";
                description {
                    state, "default" 0.0;
                    visible, 1;
                    rel1 { relative, 0.0 0.0; offset, 5 5; } 
		    rel2 { relative, 1.0 1.0; offset, -5 -5; }
                    color, 255 255 255 0;
                }
            }
        }
        programs {
            program {
                name, "ToggleOn";
                signal, "mouse,clicked,1";
                source, "Off";
                action, STATE_SET "visible" 0.0;
                target, "Off";
                target, "On";
                transition, SINUSOIDAL 0.5;
            }
            program {
                name, "ToggleOff";
                signal, "mouse,clicked,1";
                source, "On";
                action, STATE_SET "default" 0.0;
                target, "Off";
                target, "On";
                transition, SINUSOIDAL 0.5;
            }
            program {
                name, "GrabberIn";
                signal, "mouse,in";
                source, "Grabber";
                action, STATE_SET "default" 0.0;
                target, "Clip";
                transition, SINUSOIDAL 0.5;
            }
            program {
		    name, "GrabberOut";
                signal, "mouse,out";
                source, "Grabber";
                action, STATE_SET "hidden" 0.0;
                target, "Clip";
                transition, SINUSOIDAL 0.5;
	    }
        }
    }
}
</programlisting>
</example>
</para>
</section>


