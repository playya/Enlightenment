<!--
#######################################################
EDB introduction
#######################################################
-->
<section>
<sectioninfo>
  <author>
    <firstname>dan</firstname>
    <surname>sinclair</surname>
    <email>zero@perplexity.org</email>
    <othername>'dj2'</othername>
  </author>
  <date>26 July 2004</date>
</sectioninfo>

<title>Recipe: EDB introduction</title>

<para>
EDB provides a powerful database backend for use in your application. This
recipe is a simple introduction that will open a database, write several
keys and then read them back out.
</para>

<para>
<example>
<title>EDB introduction</title>
<programlisting>
#include &lt;stdio.h&gt;
#include &lt;Edb.h&gt;

#define INT_KEY     "/int/val"
#define STR_KEY     "/str/val"
#define FLT_KEY     "/float/val"

int main(int argc, char ** argv) {
    E_DB_File *db_file = NULL;
    char *str;
    int i;
    float f;

    if (argc &lt; 2) {
        printf("Need db file\n");
        return 0;
    }

    db_file = e_db_open(argv[1]);
    if (db_file == NULL) {
        printf("Error opening db file (%s)\n", argv[1]);
        return 0;
    }

    printf("Adding values...\n");
    e_db_int_set(db_file, INT_KEY, 42);
    e_db_float_set(db_file, FLT_KEY, 3.14159);
    e_db_str_set(db_file, STR_KEY, "My cats breath smells like...");

    printf("Reading values...\n");
    if (e_db_int_get(db_file, INT_KEY, &amp;i))
        printf("Retrieved (%s) with value (%d)\n", INT_KEY, i);

    if (e_db_float_get(db_file, FLT_KEY, &amp;f))
        printf("Retrieved (%s) with value (%f)\n", FLT_KEY, f);

    if ((str = e_db_str_get(db_file, STR_KEY)) != NULL) {
        printf("Retrieved (%s) with value (%s)\n", STR_KEY, str);
        free(str);
    }

    e_db_close(db_file);
    e_db_flush();

    return 1;
}
</programlisting>
</example>
</para>

<para>
In order to use EDB you must include &lt;Edb.h&gt; in your file to have
access to the API. The initial portions of the program are pretty standard, I
have a tendency to make typing mistakes so I defined the different keys that
I will be using. As long as we have a file name we try to open/create the
database.
</para>

<para>
The database will be opened, or if it doesn't exist, created with the call
to <function>e_db_open()</function> which will return NULL if an error was
encountered.
</para>

<para>
Once the database is open we can write our values. This is done through the
three calls: <function>e_db_int_set()</function>,
<function>e_db_float_set()</function> and
<function>e_db_str_set()</function>. You can also set generic data into a
db file with <function>e_db_data_set()</function>.
</para>

<para>
Along with normal data, you can store meta-data about the db into the file
itself. This data can not be retrieved with the normal get/set methods.
These properties are set with <function>e_db_property_set()</function>
</para>

<para>
Each of the type setting methods takes three parameters:
<itemizedlist mark="bullet" spacing="compact">
 <listitem><para>E_DB_File *db</para></listitem>
 <listitem><para>char *key</para></listitem>
 <listitem><para>value</para></listitem>
</itemizedlist>
The <literal>value</literal> parameter is of the corresponding type to the
method, int, float, char * or void * for _int_set, _float_set, _str_set and
_data_set respectively.
</para>

<para>
Once the values are in the db they can be retrieved with the getter methods.
Each of these methods takes 3 parameters and returns an int. The return
value is 1 on successful retrieval and 0 otherwise.
</para>

<para>
As with the setter methods, the getter methods parameters are the db, key
and a pointer to place to put the value.
</para>

<para>
Once we're finished with the database we can close it with a call to
<function>e_db_close()</function>. The call to
<function>e_db_close()</function> does not guarantee that the database has
been written to disk, to do this we call <function>e_db_flush()</function>
which will write all databases are not being used and writes the contents
out to disk.
</para>

<para>
<example>
<title>Compiling</title>
<screen>
zero@oberon [edb] -&gt; gcc -o edb edb_ex.c \
	`pkg-config --cflags --libs edb`
</screen>
</example>
If you execute the program you should see the values written out to the
screen, and after execution there will be a .db file with the name you
specified. You can then take a look at the .db file with
<command>edb_gtk_ed</command> and see the values entered.
</para>

</section>


